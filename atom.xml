<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy.Lee&#39;s  Blog</title>
  <subtitle>Good good study, day day up !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huaqianlee.github.io/"/>
  <updated>2019-12-14T09:03:57.068Z</updated>
  <id>http://huaqianlee.github.io/</id>
  
  <author>
    <name>Andy.Lee</name>
    <email>huaqianlee@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】博客主题分类一览</title>
    <link href="http://huaqianlee.github.io/2100/11/22/SUMMARY/"/>
    <id>http://huaqianlee.github.io/2100/11/22/SUMMARY/</id>
    <published>2100-11-22T06:34:36.000Z</published>
    <updated>2019-12-14T09:03:57.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux">Linux</h2><ul>
<li><a href="http://huaqianlee.github.io/2019/08/31/Linux/Process-and-thread-in-linux/" target="_blank" rel="external">Process and thread in linux</a></li>
<li><a href="http://huaqianlee.github.io/2014/12/21/Linux/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/" target="_blank" rel="external">Linux常用快捷键及命令总结</a></li>
<li><a href="http://huaqianlee.github.io/2014/11/17/Linux/Linux%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/" target="_blank" rel="external">Linux文件IO操作及网络架构</a></li>
<li><a href="http://huaqianlee.github.io/2015/03/17/Linux/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E6%A0%B8%E9%87%8C%E6%93%8D%E4%BD%9C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6-create-open-read-write/" target="_blank" rel="external">如何在内核里操作读写文件</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/21/Linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/" target="_blank" rel="external">深入理解Linux启动过程</a><a id="more"></a></li>
<li><a href="http://huaqianlee.github.io/2016/01/04/Linux/linux-problem-set/" target="_blank" rel="external">linux系统使用问题集</a></li>
</ul>
<h2 id="ARTS">ARTS</h2><ul>
<li><a href="http://huaqianlee.github.io/2019/09/07/ARTS/Third-week-of-ARTS/" target="_blank" rel="external">Third week of ARTS: Repo</a></li>
<li><a href="http://huaqianlee.github.io/2019/09/07/ARTS/Second-week-of-ARTS-Hurry/" target="_blank" rel="external">Second week of ARTS: Hurry</a></li>
<li><a href="http://huaqianlee.github.io/2019/08/31/ARTS/First-week-of-ARTS-Start/" target="_blank" rel="external">First week of ARTS: Start</a></li>
</ul>
<h2 id="Android">Android</h2><p><em>APP</em></p>
<ul>
<li><a href="http://huaqianlee.github.io/2017/11/08/Android/Getting-Started-With-RecyclerView-and-CardView-on-Android/" target="_blank" rel="external">Getting Started With RecyclerView and CardView on Android</a></li>
<li><a href="http://huaqianlee.github.io/2017/08/18/Android/Dynamic-loading-layout-by-recyclerview-item/" target="_blank" rel="external">通过自定义侧边导航栏的RecyclerView动态加载布局</a></li>
<li><a href="http://huaqianlee.github.io/2017/08/18/Android/hides-navigation-in-drawerlayou/" target="_blank" rel="external">按返回键只关闭DrawerLayout侧边栏不退出Activity的实现方案</a></li>
<li><a href="http://huaqianlee.github.io/2017/08/17/Android/the-card-navigation-base-on-drawerlayout/" target="_blank" rel="external">基于DrawerLayout打造卡片式Navigation</a></li>
<li><a href="http://huaqianlee.github.io/2017/08/17/Android/the-selected-effect-of-recyclerview-item/" target="_blank" rel="external">RecyclerView Item选中效果及点击事件的实现</a>   </li>
<li><a href="http://huaqianlee.github.io/2017/07/11/Android/%E5%AE%9E%E7%8E%B0%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89%E4%B8%8A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAAPP%E4%B9%8B%E5%90%AF%E7%A8%8B/" target="_blank" rel="external">实现真正意义上的第一个APP之启程</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/19/Android/Android%E4%B8%ADadb-Android-Debug-Bridge-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/" target="_blank" rel="external">Android中adb命令的用法</a></li>
<li><a href="http://huaqianlee.github.io/2015/05/29/Android/Android-Stdudio-Linux-windows-mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/" target="_blank" rel="external">Android Stdudio常用快捷键</a></li>
</ul>
<p><em>System &amp;&amp; Bsp</em></p>
<ul>
<li><a href="_posts/Android/A-summary-of-Android-source-analysis.md"><strong>Android 系统源码分析综述：整理总结源码分析的所有博客</strong></a></li>
<li><a href="http://huaqianlee.github.io/2018/08/23/Android/Three-ways-to-dump-usb-register/" target="_blank" rel="external">Three ways to dump usb register</a></li>
<li><a href="http://huaqianlee.github.io/2019/05/15/Android/pmic-voter/" target="_blank" rel="external">pmic voter</a></li>
<li><a href="http://huaqianlee.github.io/2019/05/16/Android/A-little-knowledge-about-health/" target="_blank" rel="external">一个 health service 不生效问题引出的一点知识</a></li>
<li><a href="http://huaqianlee.github.io/2017/11/13/Android/What-is-fast-charge-now/" target="_blank" rel="external">常用的快充技术简介</a></li>
<li><a href="http://huaqianlee.github.io/2019/08/27/Android/USB-port-error/" target="_blank" rel="external">UFP was modified as DRP when we unplug OTG</a></li>
<li><a href="http://huaqianlee.github.io/2017/12/17/Android/android-sensor-arch-analysis/" target="_blank" rel="external">Android传感器（Sensor）架构简析 (╯_╰)</a></li>
<li><a href="http://huaqianlee.github.io/2017/12/03/Android/Android-Linux-i2c-driver-arch/" target="_blank" rel="external">Android/Linux  I2C 驱动架构分析</a></li>
<li><a href="http://huaqianlee.github.io/2017/11/23/Android/Android-Linux-input-system-analysis/" target="_blank" rel="external">Android(Linux) 输入子系统解析</a></li>
<li><a href="http://huaqianlee.github.io/2017/11/21/Android/BMS-of-Android-Power-Management/" target="_blank" rel="external">Android 电源管理之电池管理系统(BMS)</a></li>
<li><a href="http://huaqianlee.github.io/2017/11/14/Android/Android-SELinux-Permison-and-Question/" target="_blank" rel="external">Android Selinux 权限及问题</a></li>
<li><a href="http://huaqianlee.github.io/2017/07/12/Android/MTK-Modem-%E9%97%AE%E9%A2%98%E9%9B%86/" target="_blank" rel="external">MTK-Modem-问题集</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/12/Android/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">About ActivityNotFoundException Unable to find explicit activity class &amp;&amp; Android.mk解析</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/18/Android/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Android日志系统详解</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/18/Android/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/" target="_blank" rel="external">怎么用Android日志系统更好地去调试</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/19/Android/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/" target="_blank" rel="external">怎么抓取Android测试日志文件</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/11/Android/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/12/Android/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/12/Android/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/23/Android/%E9%AB%98%E9%80%9AAndroid%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90-%E4%BB%8Epower-on%E4%B8%8A%E7%94%B5%E5%88%B0Home-Lanucher%E5%90%AF%E5%8A%A8/" target="_blank" rel="external">高通Android设备启动流程分析-从power-on上电到Home-Lanucher启动</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/15/Android/%E9%AB%98%E9%80%9A%E5%B9%B3%E5%8F%B0Android%E6%BA%90%E7%A0%81bootloader%E5%88%86%E6%9E%90%E4%B9%8Bsbl1-%E4%B8%80/" target="_blank" rel="external">高通平台Android源码bootloader分析之sbl1 一</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/15/Android/%E9%AB%98%E9%80%9A%E5%B9%B3%E5%8F%B0Android%E6%BA%90%E7%A0%81bootloader%E5%88%86%E6%9E%90%E4%B9%8Bsbl1-%E4%BA%8C/" target="_blank" rel="external">高通平台Android源码bootloader分析之sbl1 二</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/18/Android/%E9%AB%98%E9%80%9A%E5%B9%B3%E5%8F%B0Android%E6%BA%90%E7%A0%81bootloader%E5%88%86%E6%9E%90%E4%B9%8Bsbl1-%E4%B8%89/" target="_blank" rel="external">高通平台Android源码bootloader分析之sbl1 三</a></li>
<li><a href="http://huaqianlee.github.io/2015/08/19/Android/%E9%AB%98%E9%80%9A%E5%B9%B3%E5%8F%B0Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BLinux%E5%86%85%E6%A0%B8%E8%AE%BE%E5%A4%87%E6%A0%91-DT-Device-Tree-dts%E6%96%87%E4%BB%B6/" target="_blank" rel="external">高通平台Android源码分析之Linux内核设备树dts文件</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/06/Android/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/" target="_blank" rel="external">Android电池监控系统BMS之电池系统架构</a></li>
<li><a href="http://huaqianlee.github.io/2015/07/25/Android/Android%E6%BA%90%E7%A0%81bootable%E8%A7%A3%E6%9E%90%E4%B9%8BLK-bootloader-little-kernel/" target="_blank" rel="external">Android源码bootable解析之LK</a></li>
<li><a href="http://huaqianlee.github.io/2015/05/30/Android/Android%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E6%9E%B6%E6%9E%84/" target="_blank" rel="external">Android电源管理架构</a></li>
<li><a href="http://huaqianlee.github.io/2015/01/21/Android/%E9%AB%98%E9%80%9AAndroid%E4%B8%8D%E5%B8%A6%E7%94%B5%E9%87%8F%E8%AE%A1%E7%9A%84%E7%94%B5%E9%87%8F%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">高通Android不带电量计的电量计算方式</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/24/Android/qaulcomm-bms-driver-analysis/" target="_blank" rel="external">高通电池管理系统（BMS）驱动分析</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/24/Android/linear-charger-driver/" target="_blank" rel="external">高通 linear charger 驱动分析</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/24/Android/qcom-pmic-driver/" target="_blank" rel="external">高通 PMIC 架构简析</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/24/Android/smb135x-charger-driver/" target="_blank" rel="external">高通 smb135x charger 驱动分析</a></li>
</ul>
<h2 id="Git">Git</h2><ul>
<li><a href="http://huaqianlee.github.io/2019/09/15/Git/How-does-android-repo-work/" target="_blank" rel="external">How does the repo of android source code work ?</a></li>
<li><a href="http://huaqianlee.github.io/2019/05/05/Git/gitlab-jenkins-gitbook-to-create-LAN-gitbook/" target="_blank" rel="external">Gitbook + Jenkins + Gitlab 搭建内网自动构建的 Gitbook</a></li>
<li><a href="http://huaqianlee.github.io/2015/06/11/Git/git%E5%B8%B8%E7%94%A8%E5%8F%8A%E8%BF%9B%E9%98%B6%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/" target="_blank" rel="external">git常用及进阶命令总结</a></li>
<li><a href="http://huaqianlee.github.io/2015/10/22/Git/git-experence/" target="_blank" rel="external">git常见问题总结</a></li>
</ul>
<h2 id="Uav">Uav</h2><ul>
<li><a href="http://huaqianlee.github.io/2017/03/29/Uav/px4-imu-mpu9250-code-structure/" target="_blank" rel="external">PX4之外设代码结构及流程-IMU</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/25/Uav/PX4-for-Snapdragon-Flight/" target="_blank" rel="external">PX4 for Snapdragon Flight</a></li>
<li><a href="http://huaqianlee.github.io/2016/05/11/Uav/qualcomm-px4-code-reading-note/" target="_blank" rel="external">高通px4代码阅读笔记</a></li>
<li><a href="http://huaqianlee.github.io/2016/04/02/Uav/uav-board-debugging/" target="_blank" rel="external">无人机主板调试</a></li>
<li><a href="http://huaqianlee.github.io/2016/04/27/Uav/Qualcomm-uav-blsp-port/" target="_blank" rel="external">高通无人机8074BLSP接口说明</a></li>
<li><a href="http://huaqianlee.github.io/2016/05/07/Uav/mobile-and-uav-sensors/" target="_blank" rel="external">手机无人机常用sensor介绍</a></li>
<li><a href="http://huaqianlee.github.io/2016/07/07/Uav/camera-arch-and-tunning-rookie-note/" target="_blank" rel="external">camera架构与调试-菜鸟笔记</a></li>
</ul>
<h2 id="英语">英语</h2><ul>
<li><a href="http://huaqianlee.github.io/2017/05/08/English/Americal-and-english-phonetic/" target="_blank" rel="external">英式音标与美式音标</a></li>
</ul>
<h2 id="Kotlin">Kotlin</h2><ul>
<li><a href="http://huaqianlee.github.io/2017/05/23/Kotlin/Kotlin-HElloWorld/" target="_blank" rel="external">Android Kotlin之曲折HelloWord</a></li>
</ul>
<h2 id="学习笔记">学习笔记</h2><p><em>第一行代码</em></p>
<ul>
<li><a href="http://huaqianlee.github.io/2017/03/24/FirstCode/The-departure-of-FirstCode-learning-notes/" target="_blank" rel="external">第一行代码思维导图及学习笔记目录</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/24/FirstCode/FirstCode-learning-note-project-structure-and-activity/" target="_blank" rel="external">第一行代码之项目结构与活动</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/25/FirstCode/firstcode-note-UI/" target="_blank" rel="external">第一行代码之UI</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/25/FirstCode/FirstCode-Broadcast-Receiver/" target="_blank" rel="external">第一行代码之广播机制</a></li>
<li><a href="http://huaqianlee.github.io/2017/04/29/FirstCode/FirstCode-data-storage/" target="_blank" rel="external">第一行代码之数据存储</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/03/FirstCode/FirstCode-Content-Provider/" target="_blank" rel="external">第一行代码之跨程序共享数据-内容提供器</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/06/FirstCode/FirstCode-media/" target="_blank" rel="external">第一行代码之手机多媒体</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/06/FirstCode/FirstCode-Service/" target="_blank" rel="external">第一行代码之服务</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/09/FirstCode/FirstCode-Network/" target="_blank" rel="external">第一行代码之网络</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/10/FirstCode/FirstCode-Fragment/" target="_blank" rel="external">第一行代码之碎片</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/10/FirstCode/FirstCode-Material-Design/" target="_blank" rel="external">第一行代码之Material Design</a></li>
<li><a href="http://huaqianlee.github.io/2017/05/13/FirstCode/FirstCode-advanced-skills/" target="_blank" rel="external">第一行代码之高级技巧</a></li>
</ul>
<p><em>Android群英传</em></p>
<p><em>Linux内核完全注释</em></p>
<ul>
<li><a href="http://huaqianlee.github.io/2017/03/24/Linux/Linux-kernel-content-80x86-mem-manage/" target="_blank" rel="external">Linux内核完全注释之80x86内存管理</a></li>
</ul>
<h2 id="Hexo">Hexo</h2><ul>
<li><a href="http://huaqianlee.github.io/2014/10/24/Hexo/build-person-blog-with-hexo/" target="_blank" rel="external">构建个人博客</a></li>
<li><a href="http://huaqianlee.github.io/2014/10/20/Hexo/hello-world/" target="_blank" rel="external">hello-world</a></li>
</ul>
<h2 id="Java">Java</h2><ul>
<li><a href="http://huaqianlee.github.io/2015/01/20/Java/JUnit-test%E7%9A%84%E7%94%A8%E6%B3%95/" target="_blank" rel="external">JUnit-test的用法</a></li>
<li><a href="http://huaqianlee.github.io/2014/10/27/Java/The-document-convetions-for-Java/" target="_blank" rel="external">Java注释规范</a></li>
</ul>
<h2 id="Think">Think</h2><ul>
<li><a href="http://huaqianlee.github.io/2014/11/01/Think/How-to-read/" target="_blank" rel="external">How-to-read</a></li>
</ul>
<h2 id="Web">Web</h2><ul>
<li><a href="http://huaqianlee.github.io/2015/01/18/Web/xml%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">xml基础</a></li>
<li><a href="http://huaqianlee.github.io/2015/01/19/Web/xml%E6%96%87%E4%BB%B6%E7%BA%A6%E6%9D%9F%E4%B8%8E%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">xml文件约束与解析</a></li>
</ul>
<h2 id="Life">Life</h2><ul>
<li><a href="http://huaqianlee.github.io/2018/02/12/Life/Bye-2017-Hi-2018/" target="_blank" rel="external">17 小结，18 计划!</a></li>
<li><a href="http://huaqianlee.github.io/2015/10/08/Life/2015%E5%B9%B410%E6%9C%887%E6%97%A5-%E5%B0%8F%E4%B8%91/" target="_blank" rel="external">2015年10月7日:小丑</a></li>
<li><a href="http://huaqianlee.github.io/2013/09/19/Life/four-years/" target="_blank" rel="external">Four years</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/17/Life/Ashamed/" target="_blank" rel="external">Ashamed</a></li>
<li><a href="http://huaqianlee.github.io/2017/03/24/Life/About-my-books-and-my-plan/" target="_blank" rel="external">所买的书</a></li>
<li><a href="http://huaqianlee.github.io/2017/07/20/Life/no-no-no-go-go-go/" target="_blank" rel="external">no no no, go go go</a></li>
</ul>
<h2 id="Other">Other</h2><ul>
<li><a href="http://huaqianlee.github.io/2017/11/08/Other/MDB-ICP-protocol/" target="_blank" rel="external">纸币器和MDB协议</a></li>
<li><a href="_posts/Android/What-is-fast-charge-now？.md">Android快充介绍</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux&quot;&gt;Linux&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://huaqianlee.github.io/2019/08/31/Linux/Process-and-thread-in-linux/&quot;&gt;Process and thread in linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://huaqianlee.github.io/2014/12/21/Linux/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/&quot;&gt;Linux常用快捷键及命令总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://huaqianlee.github.io/2014/11/17/Linux/Linux%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/&quot;&gt;Linux文件IO操作及网络架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://huaqianlee.github.io/2015/03/17/Linux/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E6%A0%B8%E9%87%8C%E6%93%8D%E4%BD%9C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6-create-open-read-write/&quot;&gt;如何在内核里操作读写文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://huaqianlee.github.io/2015/08/21/Linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/&quot;&gt;深入理解Linux启动过程&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oh, the Git! - part 1</title>
    <link href="http://huaqianlee.github.io/2019/11/17/Git/Some-knowledge-about-git/"/>
    <id>http://huaqianlee.github.io/2019/11/17/Git/Some-knowledge-about-git/</id>
    <published>2019-11-17T15:38:05.000Z</published>
    <updated>2019-12-14T14:37:42.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface">Preface</h1><p>Git has always been a must-have skill for developers, I will submize a series of blogs related to it, but I don’t know too much about git now.</p>
<p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Pro Git</a> is the best guide of git, I need to read it when I have plenty of time so that I can check for gaps.</p>
<h1 id="VCS(Version_Control_System)">VCS(Version Control System)</h1><h2 id="Central_VCS">Central VCS</h2><p>Central VCS mainly includes <code>SVN</code> and <code>CVS</code>, its newwork architecture is client-server.<br><img src="https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/vcs/Central%20VCS.jpg" alt="Central VCS"><br><a id="more"></a><br>Advantages:</p>
<ul>
<li>Centralized version management.</li>
<li>File version management and branch management.</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>The client must remain connectec to the server at all times.</li>
</ul>
<h2 id="Distributed_VCS">Distributed VCS</h2><p>Distributed VCS mainly includes <code>Git</code> and <code>Mercurial</code>,its network architecture is distributied.<br><img src="https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/vcs/Distributed%20VCS.jpg" alt="Distributed VCS"></p>
<p>Advantages:</p>
<ul>
<li>Complete repositories on both server and client.</li>
<li>The client can manage the version independently.</li>
<li>Most operations without relying on the server.</li>
</ul>
<h1 id="Config">Config</h1><h2 id="Config_user">Config user</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --[ <span class="built_in">local</span> | global | system ] user.name <span class="string">"your_name"</span></span><br><span class="line">git config --[ <span class="built_in">local</span> | global | system ] user.email <span class="string">"your_email@domain.com"</span>   <span class="comment"># email notification</span></span><br><span class="line"></span><br><span class="line">git config --local <span class="comment"># Valid for the current repository, if no option defualts to local</span></span><br><span class="line">git config --global <span class="comment"># Valid for the current user.</span></span><br><span class="line">git config --system <span class="comment"># Valid for all user.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>local - .git/config.<br>global - ~/.gitconfig.<br>system - git installation path.</p>
</blockquote>
<h2 id="Check_configuration">Check configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list --local <span class="comment"># Highest priority</span></span><br><span class="line">git config --list --global <span class="comment"># Higher priority</span></span><br><span class="line">git config --list --system <span class="comment"># Low priority</span></span><br></pre></td></tr></table></figure>
<h2 id="Clean_configuration">Clean configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --unset --local user.name</span><br><span class="line">git config --unset --global user.name</span><br><span class="line">git config --unset --system user.name</span><br></pre></td></tr></table></figure>
<h1 id="Basic_usage">Basic usage</h1><h2 id="Init_git_repository">Init git repository</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project&gt;</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">git init &lt;project&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Work_flow">Work flow</h2><p>Basic cmds:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add [&lt;file&gt; | .]  <span class="comment"># . : All files of current directory.</span></span><br><span class="line">git commit [--allow-empty] [-m &lt;msg&gt;]</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>git &lt;cmd&gt; --help</code> for the details.</p>
</blockquote>
<p>Work flow:</p>
<p><img src="https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/vcs/vcs_work_flow.jpg" alt="Work flow"></p>
<h1 id="Tips">Tips</h1><h2 id="Rename">Rename</h2><p>We can rename one files as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv name new_name</span><br><span class="line">git add new_name</span><br><span class="line">git rm name</span><br></pre></td></tr></table></figure></p>
<p>The better way:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv name new_name</span><br></pre></td></tr></table></figure></p>
<h2 id="Log">Log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline -n&lt;number&gt; <span class="comment"># -n : last &lt;number&gt; record </span></span><br><span class="line">git <span class="built_in">log</span> --onelie --all -n5 --graph <span class="comment"># --all: all branches. </span></span><br><span class="line">git <span class="built_in">log</span> branch</span><br></pre></td></tr></table></figure>
<h2 id="UI">UI</h2><p>We can check the information of repository through UI as long as we install <code>gitk</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitk <span class="comment"># open graphical interface.</span></span><br><span class="line">gitk file</span><br></pre></td></tr></table></figure></p>
<h2 id="more_tips">more tips</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># info from remote repository.</span></span><br><span class="line">author <span class="comment"># who did the first commission, `git cherry-pick` won't change it</span></span><br><span class="line">committer <span class="comment"># who did the last commission.</span></span><br><span class="line">tag <span class="comment"># tag for project stage.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmds</span></span><br><span class="line">git <span class="built_in">help</span> --web cmd  <span class="comment"># View cmd's help by web</span></span><br><span class="line">git checkout -b &lt;branch&gt; <span class="comment"># Create and checkout &lt;branch&gt;</span></span><br><span class="line">git commit -am <span class="comment"># git add + git commit -m, not suggested.</span></span><br><span class="line">git reset --hard <span class="comment"># clean staging area and working dirctory</span></span><br><span class="line">git show <span class="comment"># Shows one or more objects (blobs, trees, tags and commits).</span></span><br><span class="line">git blame <span class="comment"># Show what revision and author last modified each line of a file.</span></span><br><span class="line">git stash <span class="comment"># Stash the changes in a dirty working directory away.</span></span><br><span class="line">git stash pop <span class="comment"># Pop the stashed changes.</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-</code> : single char options, like -m , -a;<br> <code>--</code>: multi char options, like —web, —hard; </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Preface&quot;&gt;Preface&lt;/h1&gt;&lt;p&gt;Git has always been a must-have skill for developers, I will submize a series of blogs related to it, but I don’t know too much about git now.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;Pro Git&lt;/a&gt; is the best guide of git, I need to read it when I have plenty of time so that I can check for gaps.&lt;/p&gt;
&lt;h1 id=&quot;VCS(Version_Control_System)&quot;&gt;VCS(Version Control System)&lt;/h1&gt;&lt;h2 id=&quot;Central_VCS&quot;&gt;Central VCS&lt;/h2&gt;&lt;p&gt;Central VCS mainly includes &lt;code&gt;SVN&lt;/code&gt; and &lt;code&gt;CVS&lt;/code&gt;, its newwork architecture is client-server.&lt;br&gt;&lt;img src=&quot;https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/vcs/Central%20VCS.jpg&quot; alt=&quot;Central VCS&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://huaqianlee.github.io/categories/Git/"/>
    
    
      <category term="Tools" scheme="http://huaqianlee.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>The ninth week of ARTS</title>
    <link href="http://huaqianlee.github.io/2019/10/23/ARTS/Ninth-week-of-ARTS/"/>
    <id>http://huaqianlee.github.io/2019/10/23/ARTS/Ninth-week-of-ARTS/</id>
    <published>2019-10-22T16:00:43.000Z</published>
    <updated>2019-11-16T15:05:43.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="external">Remove Element</a>.<br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RemoveElement.java" target="_blank" rel="external">Java</a>.</p>
<h1 id="Review">Review</h1><p>I found a usage of “repo init … —reference” this week, I want to know more, so I read <a href="https://forum.xda-developers.com/android/software/guide-android-repo-mirroring-t3170869" target="_blank" rel="external">Android Repo Mirroring</a> this week.</p>
<p>This article explains “repo mirroring” in a simple and clear way through examples.<br><a id="more"></a></p>
<h1 id="Tips">Tips</h1><p>Download android code from local mirror(code). As follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u url -b &lt;branch&gt; --reference=&lt;<span class="built_in">local</span>_dir&gt;</span><br></pre></td></tr></table></figure></p>
<p>It could increase download speed and save the storage when we want to keep multiple sets of code.</p>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/remove-element/&quot;&gt;Remove Element&lt;/a&gt;.&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RemoveElement.java&quot;&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;I found a usage of “repo init … —reference” this week, I want to know more, so I read &lt;a href=&quot;https://forum.xda-developers.com/android/software/guide-android-repo-mirroring-t3170869&quot;&gt;Android Repo Mirroring&lt;/a&gt; this week.&lt;/p&gt;
&lt;p&gt;This article explains “repo mirroring” in a simple and clear way through examples.&lt;br&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>The eighth week of ARTs</title>
    <link href="http://huaqianlee.github.io/2019/10/20/ARTS/Eighth-week-of-ARTs/"/>
    <id>http://huaqianlee.github.io/2019/10/20/ARTS/Eighth-week-of-ARTs/</id>
    <published>2019-10-20T14:52:39.000Z</published>
    <updated>2019-11-16T15:04:56.186Z</updated>
    
    <content type="html"><![CDATA[<p>生病、私事、连续十多天的加班。。。 等等借口让我断更 ARTS 快一个月了，比较让人沮丧，先把标题准备起，花一周把进度赶上。</p>
<blockquote>
<p>临时标注</p>
</blockquote>
<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="external">Remove Duplicates from Sorted Array</a><br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RemoveDuplicatesfromSortedArray.java" target="_blank" rel="external">Java</a></p>
<h1 id="Review">Review</h1><a id="more"></a>
<h1 id="Tips">Tips</h1><p>Patch the staged and untracked files via <code>git</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached // diff staged (after <span class="string">'git add'</span>)</span><br><span class="line">git add -N &lt;unstracked_file_name&gt;; git diff <span class="comment"># diff untracked file</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生病、私事、连续十多天的加班。。。 等等借口让我断更 ARTS 快一个月了，比较让人沮丧，先把标题准备起，花一周把进度赶上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;临时标注&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&quot;&gt;Remove Duplicates from Sorted Array&lt;/a&gt;&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RemoveDuplicatesfromSortedArray.java&quot;&gt;Java&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>The seventh week of ARTs</title>
    <link href="http://huaqianlee.github.io/2019/10/13/ARTS/Seventh-week-of-ARTs/"/>
    <id>http://huaqianlee.github.io/2019/10/13/ARTS/Seventh-week-of-ARTs/</id>
    <published>2019-10-13T14:45:09.000Z</published>
    <updated>2019-11-16T15:06:01.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted Lists</a><br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/MergeTwoSortedLists.java" target="_blank" rel="external">Java</a></p>
<h1 id="Review">Review</h1><a id="more"></a>
<h1 id="Tips">Tips</h1><p>I forgot the following git cmds when I needed them.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b topic-branch // checkout and branch a new topic branch.</span><br><span class="line">git branch --set-upstream-to=origin/branch topic-branch //  <span class="built_in">set</span> tracking information <span class="keyword">for</span> topic-branch.</span><br></pre></td></tr></table></figure></p>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/&quot;&gt;Merge Two Sorted Lists&lt;/a&gt;&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/MergeTwoSortedLists.java&quot;&gt;Java&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>The sixth week of ARTs</title>
    <link href="http://huaqianlee.github.io/2019/10/06/ARTS/Sixth-week-of-ARTs/"/>
    <id>http://huaqianlee.github.io/2019/10/06/ARTS/Sixth-week-of-ARTs/</id>
    <published>2019-10-06T14:44:44.000Z</published>
    <updated>2019-11-16T15:06:09.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="external">Valid Parentheses</a><br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/python/ValidParentheses.py" target="_blank" rel="external">Python</a></p>
<h1 id="Review">Review</h1><p>I read <a href="https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/" target="_blank" rel="external">How to Read an Academic Article</a> this week. It teaches me to read academic article by sharing handout. It simply summarizes the method of fast reading, a lot of them maybe be a cliche, but the summary is very helpful.<br><a id="more"></a></p>
<h1 id="Tips">Tips</h1><p>Quickly replace all specified strings under the specified path.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> .<span class="regexp">/ -type f -exec sed -i 's/</span>old_string<span class="regexp">/new_string/g</span><span class="string">' &#123;&#125; \;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/&quot;&gt;Valid Parentheses&lt;/a&gt;&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/python/ValidParentheses.py&quot;&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;I read &lt;a href=&quot;https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/&quot;&gt;How to Read an Academic Article&lt;/a&gt; this week. It teaches me to read academic article by sharing handout. It simply summarizes the method of fast reading, a lot of them maybe be a cliche, but the summary is very helpful.&lt;br&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>The fifth week of ARTS</title>
    <link href="http://huaqianlee.github.io/2019/09/29/ARTS/Fifth-week-of-ARTS/"/>
    <id>http://huaqianlee.github.io/2019/09/29/ARTS/Fifth-week-of-ARTS/</id>
    <published>2019-09-29T14:44:56.000Z</published>
    <updated>2019-11-16T15:05:15.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">Longest Common Prefix</a><br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/LongestCommonPrefix.java" target="_blank" rel="external">Java</a></p>
<h1 id="Review">Review</h1><p>I always want to change the mind of my loves, but I didn’t use the good way to do it. So I read <a href="https://forge.medium.com/how-to-change-a-mind-1774681b9369" target="_blank" rel="external">How to Change a Mind</a> this week.</p>
<p>To be honesty, I can’t get this article well, it is a little hard to me. But I got the following opinions from this topic.</p>
<ol>
<li>Firstly we should think or do like the people who we want to change.</li>
<li>For scams, we should let the people lose the faith in the person not in the scams, it will be a better way. Quote the sentence:  <blockquote>
<p>“Dylan did not need to lose his faith in what his elders were saying; he needed to lose his faith in them.” </p>
<a id="more"></a>
<h1 id="Tips">Tips</h1><p>This week I leaned the way to unmount <code>sshfs</code>. <code>sshfs</code> is used to map(mount) a remote server dir to the local pc.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fusermount -u remote_dir // unmount sshfs</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>BTW, I summarize the sample use of <code>sshfs</code> cmd as follows.</p>
<h2 id="mount">mount</h2><p>mkdir ~/remote_dir<br>sshfs -o idmap=user $USER@far:/dir ~/remote_dir</p>
<h2 id="unmount">unmount</h2><p>fusermount -u ~/dir</p>
<h2 id="To_add_it_to_your_/etc/fstab">To add it to your <code>/etc/fstab</code></h2><p>sshfs#$USER@<ip>:/dir /home/$USER/remote_dir fuse defaults,idmap=user 0 0</ip></p>
<blockquote>
<p>sshfs $USER@<ip>:/dir /home/$USER/remote_dir // mount via terminal</ip></p>
</blockquote>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/&quot;&gt;Longest Common Prefix&lt;/a&gt;&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/LongestCommonPrefix.java&quot;&gt;Java&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;I always want to change the mind of my loves, but I didn’t use the good way to do it. So I read &lt;a href=&quot;https://forge.medium.com/how-to-change-a-mind-1774681b9369&quot;&gt;How to Change a Mind&lt;/a&gt; this week.&lt;/p&gt;
&lt;p&gt;To be honesty, I can’t get this article well, it is a little hard to me. But I got the following opinions from this topic.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Firstly we should think or do like the people who we want to change.&lt;/li&gt;
&lt;li&gt;For scams, we should let the people lose the faith in the person not in the scams, it will be a better way. Quote the sentence:  &lt;blockquote&gt;
&lt;p&gt;“Dylan did not need to lose his faith in what his elders were saying; he needed to lose his faith in them.” &lt;/p&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>The fourth week of ARTS</title>
    <link href="http://huaqianlee.github.io/2019/09/22/ARTS/Fourth-week-of-ARTS/"/>
    <id>http://huaqianlee.github.io/2019/09/22/ARTS/Fourth-week-of-ARTS/</id>
    <published>2019-09-22T14:44:01.000Z</published>
    <updated>2019-11-16T15:05:37.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title: <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Roman to Integer</a><br>Solution: <a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RomantoInteger.java" target="_blank" rel="external">Java Solution:</a></p>
<h1 id="Review">Review</h1><p>Today I access <a href="">Medium</a>,This article called <a href="https://medium.com/free-code-camp/code-comments-the-good-the-bad-and-the-ugly-be9cc65fbf83" target="_blank" rel="external"><code>Putting comments in code: the good, the bad, and the ugly.</code></a> got into my eyes first. So I choose it as my <code>Review</code>.</p>
<p>This article mainly says the cliche <code>“Good code is self-documenting.”</code> It tells the good, the bad, and the ugly when it comes to commenting our code.<br><a id="more"></a></p>
<h1 id="Tips">Tips</h1><p>In my job, I always build the android source code or capture some logs. I just named the logs manually before, forgot to named them automaticly. This week I remember the followsing way.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD | tee build-$(date <span class="string">"+%Y%m%d-%H%M%S"</span>).log <span class="comment"># Generate build log</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Share">Share</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title: &lt;a href=&quot;https://leetcode.com/problems/roman-to-integer/&quot;&gt;Roman to Integer&lt;/a&gt;&lt;br&gt;Solution: &lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/java/RomantoInteger.java&quot;&gt;Java Solution:&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;Today I access &lt;a href=&quot;&quot;&gt;Medium&lt;/a&gt;,This article called &lt;a href=&quot;https://medium.com/free-code-camp/code-comments-the-good-the-bad-and-the-ugly-be9cc65fbf83&quot;&gt;&lt;code&gt;Putting comments in code: the good, the bad, and the ugly.&lt;/code&gt;&lt;/a&gt; got into my eyes first. So I choose it as my &lt;code&gt;Review&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This article mainly says the cliche &lt;code&gt;“Good code is self-documenting.”&lt;/code&gt; It tells the good, the bad, and the ugly when it comes to commenting our code.&lt;br&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>How does the repo of android source code work ?</title>
    <link href="http://huaqianlee.github.io/2019/09/15/Git/How-does-android-repo-work/"/>
    <id>http://huaqianlee.github.io/2019/09/15/Git/How-does-android-repo-work/</id>
    <published>2019-09-15T09:40:17.000Z</published>
    <updated>2019-09-15T15:01:32.549Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>android</code> 源码中，主要用 <a href="https://android.googlesource.com/tools/repo" target="_blank" rel="external"><strong>Repo</strong></a> 和 <a href="https://git-scm.com/" target="_blank" rel="external"><strong>Git</strong></a> 来进行版本管理。<code>Repo</code> 是一个由谷歌构建，运行在 Git 之上的仓库管理工具，其让多项目管理变得更容易，尤其对于基本的网络操作，譬如，下载由上百个项目组成的 Android 源码。</p>
<h1 id="Repo_的组成和基本使用">Repo 的组成和基本使用</h1><h2 id="Repo_launcher">Repo launcher</h2><p><code>Repo</code> 的第一部分，其是一个 <code>Python</code> 脚本，主要用来获取完整的 <code>Repo</code> 工具并转发接收到的命令 .</p>
<h2 id="Repo_Tool">Repo Tool</h2><p><code>Repo</code> 的第二部分，由 <code>Repo launcher</code> 下载到 <code>$srcDir/.repo/repo</code>，其是主要功能部分，处理 <code>Repo launcher</code> 转发的命令。<br><a id="more"></a></p>
<h2 id="官方的获取方式">官方的获取方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure>
<h2 id="官方源码下载方式">官方源码下载方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://android.googlesource.com/platform/manifest -b android-<span class="number">4.0</span>.<span class="number">1</span>_r1</span><br><span class="line">repo sync [-c --no-tags]</span><br></pre></td></tr></table></figure>
<h1 id="Repo_怎么工作">Repo 怎么工作</h1><p>下载代码时 <code>repo</code> 主要工作流程如下：</p>
<ol>
<li><code>repo init</code> 在当前路径创建 <code>.repo</code> 文件夹并克隆 <a href="https://android.googlesource.com/tools/repo" target="_blank" rel="external">repo 的 git 仓库</a>到 <code>.repo/repo</code>（即 <code>Repo Tool</code>）。</li>
<li>以 <code>--bare</code><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server#_getting_git_on_a_server" target="_blank" rel="external">(reference link)</a> 方式克隆 <code>-u</code> 选项指定的 <code>git</code> 仓库（没有工作空间的仓库）到 <code>.repo/manifests.git</code>。 </li>
<li>创建 <code>.repo/manifests</code> 目录，通过创建 <code>.repo/manifests/.git</code> 作为 <code>.repo/manifests.git</code> 的符号链接将其转换为 <code>Git</code> 仓库。 </li>
<li><strong>Checkout</strong> <code>-b</code> 选项指定的分支，并创建 <code>.repo/manifests</code> 目录中的指定文件（通过 <code>-m</code> 指定，通常默认为 <code>.repo/manifests/defualt.xml</code>）的符号链接 <code>.repo/manifest.xml</code>。</li>
<li><code>repo sync</code> 将 <code>manifest.xml</code> 和 <code>local_manifest.xml</code> 中每一个 <code>project</code> 的 <code>git</code> 仓库克隆到 <code>.repo/projects</code>。</li>
<li>通过链接到相应空仓库的 <code>.git</code> 创建工作路径， <strong>checkout</strong>  <code>manifest</code> 中指定的分支，并更新 <code>.repo/project.list</code>。 <blockquote>
<p>项目存在的情况下， 一般执行 <code>git pull [--rebase]</code>来下载更新源码。</p>
</blockquote>
</li>
</ol>
<p><code>repo init</code>的大体流程上如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">repo init -u <span class="variable">$URL</span> -b <span class="variable">$BRANCH</span> -m <span class="variable">$MANIFEST</span></span><br><span class="line"> --------------------</span><br><span class="line"> mkdir .repo; <span class="built_in">cd</span> .repo</span><br><span class="line"> git <span class="built_in">clone</span> https://android.googlesource.com/tools/repo</span><br><span class="line"> git <span class="built_in">clone</span> --bare <span class="variable">$URL</span> manifests.git</span><br><span class="line"> mkdir -p manifests/.git; <span class="built_in">cd</span> manifests/.git</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> ../../manifests.git/*; <span class="keyword">do</span> ln <span class="operator">-s</span> <span class="variable">$i</span> .; <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"> git checkout <span class="variable">$BRANCH</span> -- .</span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"> ln <span class="operator">-s</span> manifests/<span class="variable">$MANIFEST</span> manifest.xml</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>我们可以通过 <code>repo --trace init ...</code> 来追踪执行过程  </p>
</blockquote>
<h1 id="VCS(Version_Control_System)_的使用">VCS(Version Control System) 的使用</h1><h2 id="常见工作流程">常见工作流程</h2><ol>
<li>repo start 创建一个新的 topic 分支</li>
<li>git add</li>
<li>git commit</li>
<li>repo upload (个人习惯使用的方式：git push origin HEAD:refs/for/branch)</li>
</ol>
<h2 id="常见工作命令">常见工作命令</h2><table>
<thead>
<tr>
<th style="text-align:left">Command</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">repo init</td>
<td style="text-align:left">Initializes a new client.</td>
</tr>
<tr>
<td style="text-align:left">repo sync</td>
<td style="text-align:left">Syncs the client to the repositories.</td>
</tr>
<tr>
<td style="text-align:left">repo start</td>
<td style="text-align:left">Starts a new branch.</td>
</tr>
<tr>
<td style="text-align:left">repo status</td>
<td style="text-align:left">Shows the status of the current branch.</td>
</tr>
<tr>
<td style="text-align:left">repo upload</td>
<td style="text-align:left">Uploads changes to the review server.</td>
</tr>
<tr>
<td style="text-align:left">git add</td>
<td style="text-align:left">Stages the files.</td>
</tr>
<tr>
<td style="text-align:left">git commit</td>
<td style="text-align:left">Commits the staged files.</td>
</tr>
<tr>
<td style="text-align:left">git branch</td>
<td style="text-align:left">Shows the current branches.</td>
</tr>
<tr>
<td style="text-align:left">git branch [branch]</td>
<td style="text-align:left">Creates a new topic branch.</td>
</tr>
<tr>
<td style="text-align:left">git checkout [branch]</td>
<td style="text-align:left">Switches HEAD to the specified branch.</td>
</tr>
<tr>
<td style="text-align:left">git merge [branch]</td>
<td style="text-align:left">Merges [branch] into current branch.</td>
</tr>
<tr>
<td style="text-align:left">git diff</td>
<td style="text-align:left">Shows diff of the unstaged changes.</td>
</tr>
<tr>
<td style="text-align:left">git diff —cached</td>
<td style="text-align:left">Shows diff of the staged changes.</td>
</tr>
<tr>
<td style="text-align:left">git log</td>
<td style="text-align:left">Shows the history of the current branch.</td>
</tr>
<tr>
<td style="text-align:left">git log m/[codeline]..</td>
<td style="text-align:left">Shows the commits that aren’t pushed.</td>
</tr>
</tbody>
</table>
<h1 id="Reference">Reference</h1><p><a href="https://stackoverflow.com/questions/6149725/how-does-the-android-repo-manifest-repository-work" target="_blank" rel="external">stack overflow.</a><br><a href="https://source.android.com/setup/develop" target="_blank" rel="external">Source Control Tools.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;android&lt;/code&gt; 源码中，主要用 &lt;a href=&quot;https://android.googlesource.com/tools/repo&quot;&gt;&lt;strong&gt;Repo&lt;/strong&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://git-scm.com/&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; 来进行版本管理。&lt;code&gt;Repo&lt;/code&gt; 是一个由谷歌构建，运行在 Git 之上的仓库管理工具，其让多项目管理变得更容易，尤其对于基本的网络操作，譬如，下载由上百个项目组成的 Android 源码。&lt;/p&gt;
&lt;h1 id=&quot;Repo_的组成和基本使用&quot;&gt;Repo 的组成和基本使用&lt;/h1&gt;&lt;h2 id=&quot;Repo_launcher&quot;&gt;Repo launcher&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Repo&lt;/code&gt; 的第一部分，其是一个 &lt;code&gt;Python&lt;/code&gt; 脚本，主要用来获取完整的 &lt;code&gt;Repo&lt;/code&gt; 工具并转发接收到的命令 .&lt;/p&gt;
&lt;h2 id=&quot;Repo_Tool&quot;&gt;Repo Tool&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Repo&lt;/code&gt; 的第二部分，由 &lt;code&gt;Repo launcher&lt;/code&gt; 下载到 &lt;code&gt;$srcDir/.repo/repo&lt;/code&gt;，其是主要功能部分，处理 &lt;code&gt;Repo launcher&lt;/code&gt; 转发的命令。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://huaqianlee.github.io/categories/Git/"/>
    
    
      <category term="Repo" scheme="http://huaqianlee.github.io/tags/Repo/"/>
    
      <category term="Tools" scheme="http://huaqianlee.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>The third week of ARTS: Repo</title>
    <link href="http://huaqianlee.github.io/2019/09/13/ARTS/Third-week-of-ARTS/"/>
    <id>http://huaqianlee.github.io/2019/09/13/ARTS/Third-week-of-ARTS/</id>
    <published>2019-09-13T08:34:02.000Z</published>
    <updated>2019-11-16T15:04:33.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title：<a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="external">Palindrome Number</a><br>Solution：<a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/isPalindrome.c" target="_blank" rel="external">C solution</a></p>
<h1 id="Review">Review</h1><p>I always don’t kwnow enough about repo, so I read some articles about repo this week. These articles describe the repo Manifest format, usage of repo, repo &amp;&amp; git , etc in detail. It helps me a lot. But I have not absorbed them yet, I need more time.</p>
<p>The links are as follows:<br><a href="https://android.googlesource.com/tools/repo" target="_blank" rel="external">repo</a></p>
<ul>
<li><a href="https://source.android.com/setup/develop" target="_blank" rel="external">Source Control Tools</a></li>
<li><a href="https://source.android.com/setup/create/coding-tasks" target="_blank" rel="external">Source Control Workflow</a></li>
<li><a href="https://source.android.com/setup/develop/repo" target="_blank" rel="external">Repo Command Reference</a></li>
<li><a href="https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.md" target="_blank" rel="external">Repo Manifest Format</a></li>
<li><a href="https://android.googlesource.com/tools/repo/+/HEAD/docs/repo-hooks.md" target="_blank" rel="external">Repo hooks</a></li>
<li><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/howto/separating-topic-branches.txt" target="_blank" rel="external">How to separate topic branches</a>  </li>
</ul>
<a id="more"></a>
<h1 id="Tips">Tips</h1><ul>
<li><p>Delete Files Using Extended Pattern Matching Operators.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable extglob</span></span><br><span class="line"><span class="built_in">shopt</span> <span class="operator">-s</span> extglob</span><br><span class="line"></span><br><span class="line">rm -v !(<span class="string">"filename"</span>)</span><br><span class="line">rm -v !(<span class="string">"filename1"</span>|<span class="string">"filename2"</span>) </span><br><span class="line"><span class="comment"># such as,</span></span><br><span class="line">rm -i !(*.zip)</span><br><span class="line">rm -v !(*.zip|*.odt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># disable extglob</span></span><br><span class="line"><span class="built_in">shopt</span> -u extglob</span><br></pre></td></tr></table></figure>
</li>
<li><p>Delete Files Using Linux find Command</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find /directory/ -type f -not -name <span class="string">'PATTERN'</span> -delete</span><br><span class="line">find /directory/ -type f -not -name <span class="string">'PATTERN'</span> -print0 | xargs -<span class="number">0</span> -I &#123;&#125; rm &#123;&#125;</span><br><span class="line">find /directory/ -type f -not -name <span class="string">'PATTERN'</span> -print0 | xargs -<span class="number">0</span> -I &#123;&#125; rm [options] &#123;&#125;</span><br><span class="line"><span class="comment"># such as,</span></span><br><span class="line">find . -type f -not -name <span class="string">'*.gz'</span>-delete</span><br><span class="line">find . -type f -not -name <span class="string">'*gz'</span> -print0 | xargs -<span class="number">0</span>  -I &#123;&#125; rm -v &#123;&#125;</span><br><span class="line">find . -type f -not \(-name <span class="string">'*gz'</span> -or -name <span class="string">'*odt'</span> -or -name <span class="string">'*.jpg'</span> \) -delete</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Share">Share</h1><p><a href="http://huaqianlee.github.io/2019/09/15/Git/How-does-android-repo-work/" target="_blank" rel="external">How does the repo of android source code work ?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title：&lt;a href=&quot;https://leetcode.com/problems/palindrome-number/&quot;&gt;Palindrome Number&lt;/a&gt;&lt;br&gt;Solution：&lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/isPalindrome.c&quot;&gt;C solution&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;I always don’t kwnow enough about repo, so I read some articles about repo this week. These articles describe the repo Manifest format, usage of repo, repo &amp;amp;&amp;amp; git , etc in detail. It helps me a lot. But I have not absorbed them yet, I need more time.&lt;/p&gt;
&lt;p&gt;The links are as follows:&lt;br&gt;&lt;a href=&quot;https://android.googlesource.com/tools/repo&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://source.android.com/setup/develop&quot;&gt;Source Control Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://source.android.com/setup/create/coding-tasks&quot;&gt;Source Control Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://source.android.com/setup/develop/repo&quot;&gt;Repo Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.md&quot;&gt;Repo Manifest Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android.googlesource.com/tools/repo/+/HEAD/docs/repo-hooks.md&quot;&gt;Repo hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/docs/howto/separating-topic-branches.txt&quot;&gt;How to separate topic branches&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>A little basic knowledge of the shell</title>
    <link href="http://huaqianlee.github.io/2019/09/08/Shell/A-little-basic-knowledge-of-the-shell/"/>
    <id>http://huaqianlee.github.io/2019/09/08/Shell/A-little-basic-knowledge-of-the-shell/</id>
    <published>2019-09-08T05:07:57.000Z</published>
    <updated>2019-10-20T14:57:27.672Z</updated>
    
    <content type="html"><![CDATA[<p>I don’t have a good idea what to share for ARTS this week. So I summarize a little knowledge of the shell.</p>
<h2 id="What_is_a_shell">What is a shell</h2><p>A shell is a software interface that is ofthen a command line interface that enables the user to interact with the computer. In linux, we can check all supported shell via the following way.<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lee@lee-server:~$ sudo cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>bash( Bourne again shell) - rewrited sh, generate more functions.</p>
</blockquote>
<h2 id="What_is_the_differnce_between_script_execution">What is the differnce between script execution</h2><h3 id="First_situation">First situation</h3><p>Execute as one child process, once the child process exists and back to parent shell, the related envs will disappear. Such as:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash script_name.sh</span><br><span class="line">./script_name.sh <span class="comment"># Need to add execute permission in advance. like, chmod u+x script_name.sh</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>envs: environmental variables.</p>
</blockquote>
<h3 id="Second_situation">Second situation</h3><p>Execute in the current shell. envs will always work before quit. Such as:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> script_name.sh</span><br><span class="line">. script_name.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="Pip">Pip</h2><p>The output of left cmd is used as the input to the right cmd. As follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lee@lee-server:/boot/grub$ cat | ps <span class="operator">-f</span> <span class="comment"># Create one new process for every external cmd.</span></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">lee      <span class="number">21193</span>  <span class="number">4020</span>  <span class="number">2</span> <span class="number">11</span>:<span class="number">22</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> bash -c <span class="built_in">cd</span> <span class="string">"/boot/grub"</span> &amp;&amp; bash -i -c <span class="string">"cat | ps -f"</span></span><br><span class="line">lee      <span class="number">21596</span> <span class="number">21193</span>  <span class="number">4</span> <span class="number">11</span>:<span class="number">22</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> bash -i -c cat | ps <span class="operator">-f</span></span><br><span class="line">lee      <span class="number">21775</span> <span class="number">21596</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">22</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> cat</span><br><span class="line">lee      <span class="number">21776</span> <span class="number">21596</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">22</span> pts/<span class="number">3</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps <span class="operator">-f</span></span><br></pre></td></tr></table></figure></p>
<p>We should avoid to use built-in cmd in pip ,such as , ls , cd ,etc.</p>
<blockquote>
<p>built-in cmd: execute in the current shell. external cmd: create one new process, like top. </p>
</blockquote>
<h2 id="Input_and_output_redirection">Input and output redirection</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&lt;"</span>   <span class="comment"># input redirection.</span></span><br><span class="line"><span class="string">"&gt;"</span>   <span class="comment"># output redirection</span></span><br><span class="line"><span class="string">"&gt;&gt;"</span>  <span class="comment"># output append redirection.</span></span><br><span class="line"><span class="string">"2&gt;"</span>  <span class="comment"># error output redirection.</span></span><br><span class="line"><span class="string">"&amp;&gt;"</span>  <span class="comment"># all output redirection.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># input + output redirection, EOF part redirect as input f cat.</span></span><br><span class="line">cat &gt; file.txt &lt;&lt;EOF</span><br><span class="line">Hello, Shell!</span><br><span class="line">EOF </span><br><span class="line"><span class="comment"># EOF can be any strings, it is only a conventional writing (End Of File)</span></span><br></pre></td></tr></table></figure>
<h2 id="Variable">Variable</h2><h3 id="Definition_of_variables">Definition of variables</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var=value</span><br><span class="line"><span class="built_in">let</span> var=value</span><br><span class="line">l=ls</span><br><span class="line">var=$(ls <span class="operator">-l</span> /etc) </span><br><span class="line">or</span><br><span class="line">var=`ls <span class="operator">-l</span> /etc`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>quote: \${var}, sometimes we can only use \$var, sometimes we can’t, like, \${var}test != $vartest.</p>
</blockquote>
<h3 id="Scope_of_the_variable">Scope of the variable</h3><p>Variable only works in the current terminal or the current shell script. </p>
<p>If we want to use it in the child process, we need to export it as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> var(=xxx)</span><br></pre></td></tr></table></figure></p>
<p>If we don’t need it anymore, we need to clear it as follows:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> var</span><br></pre></td></tr></table></figure></p>
<h3 id="Env_and_others">Env and others</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="comment"># display the current shell variable.</span></span><br><span class="line">env <span class="comment"># view all current env.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span> <span class="comment"># view var.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PS1</span> <span class="comment"># The current prompt terminal</span></span><br><span class="line">$?  <span class="comment"># The return value of the previous cmd</span></span><br><span class="line">$$  <span class="comment"># the current process's PID</span></span><br><span class="line"><span class="variable">$0</span>  <span class="comment"># the current process name </span></span><br><span class="line"><span class="comment"># Get the parameters passed to the current process</span></span><br><span class="line"><span class="variable">$1</span> <span class="variable">$2</span> ... <span class="variable">$&#123;10&#125;</span> ... <span class="variable">$&#123;n&#125;</span></span><br><span class="line"><span class="comment"># Initial for null variable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;2&#125;</span>_   <span class="comment"># if [ null ],then: _ else value_ fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;2-_&#125;</span>  <span class="comment"># if [ null ],then: _ else value fi</span></span><br></pre></td></tr></table></figure>
<h2 id="Config_of_linux">Config of linux</h2><h3 id="All_user’s_config">All user’s config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">/etc/profile.d/</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure>
<h3 id="Current_user’s_config">Current user’s config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="Loading_order">Loading order</h3><p>su - root<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">~/.bash_profile</span><br><span class="line">~/.bashrc</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>It is a better way to switch account.</p>
</blockquote>
<p>su root<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/.bashrc</span><br><span class="line">/etc/bashrc</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I don’t have a good idea what to share for ARTS this week. So I summarize a little knowledge of the shell.&lt;/p&gt;
&lt;h2 id=&quot;What_is_a_shell&quot;&gt;What is a shell&lt;/h2&gt;&lt;p&gt;A shell is a software interface that is ofthen a command line interface that enables the user to interact with the computer. In linux, we can check all supported shell via the following way.&lt;br&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://huaqianlee.github.io/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>The second week of ARTS: Hurry</title>
    <link href="http://huaqianlee.github.io/2019/09/07/ARTS/Second-week-of-ARTS-Hurry/"/>
    <id>http://huaqianlee.github.io/2019/09/07/ARTS/Second-week-of-ARTS-Hurry/</id>
    <published>2019-09-07T12:49:00.000Z</published>
    <updated>2019-11-16T15:05:50.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm">Algorithm</h1><p>Title：<a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="external">Reverse Integer</a><br>Solution：<a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/reverseInteger.c" target="_blank" rel="external">C solution</a></p>
<h1 id="Review">Review</h1><p>Because I am learnning python, I was attracted by the <a href="https://medium.com/free-code-camp/learning-python-from-zero-to-hero-120ea540b567" target="_blank" rel="external">Learning Python: From Zero to Hero</a> article of <a href="http://Medium.com" target="_blank" rel="external">Medium</a>.  </p>
<p>This article is very good ,  it almost show all the python-related knowledge in a limited page. Such as , variables, conditional statements, looping, collection/array, key-value collection, iterate , classes and objects, encapsulation, inheritance, etc.</p>
<a id="more"></a>
<h1 id="Tips">Tips</h1><h2 id="Get_the_patch_of_the_specified_commission-">Get the patch of the specified commission.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff origin/master HEAD <span class="comment"># Get patch for all commits which are not merged</span></span><br><span class="line">git diff start_commit_id end_commit_id <span class="comment"># Get patch between start_commit_id and end_commit_id</span></span><br></pre></td></tr></table></figure>
<h2 id="A_way_to_avoid_that_security_issue_between_vendor_and_system-">A way to avoid that security issue between vendor and system.</h2><p>I am not sure when, if I am correct , there is security issues with file operations between vendor and system from Android O. I found a way to avoid it this week, that is, escape selinux verification in the following file.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external/selinux/libselinux/src/avc.c</span><br></pre></td></tr></table></figure></p>
<h1 id="Share">Share</h1><p><a href="http://huaqianlee.github.io/2019/09/08/Shell/A-little-basic-knowledge-of-the-shell/" target="_blank" rel="external">A little basic knowledge of the shell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Algorithm&quot;&gt;Algorithm&lt;/h1&gt;&lt;p&gt;Title：&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/&quot;&gt;Reverse Integer&lt;/a&gt;&lt;br&gt;Solution：&lt;a href=&quot;https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/reverseInteger.c&quot;&gt;C solution&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Review&quot;&gt;Review&lt;/h1&gt;&lt;p&gt;Because I am learnning python, I was attracted by the &lt;a href=&quot;https://medium.com/free-code-camp/learning-python-from-zero-to-hero-120ea540b567&quot;&gt;Learning Python: From Zero to Hero&lt;/a&gt; article of &lt;a href=&quot;http://Medium.com&quot;&gt;Medium&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This article is very good ,  it almost show all the python-related knowledge in a limited page. Such as , variables, conditional statements, looping, collection/array, key-value collection, iterate , classes and objects, encapsulation, inheritance, etc.&lt;/p&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>Process and thread in linux</title>
    <link href="http://huaqianlee.github.io/2019/08/31/Linux/Process-and-thread-in-linux/"/>
    <id>http://huaqianlee.github.io/2019/08/31/Linux/Process-and-thread-in-linux/</id>
    <published>2019-08-31T09:35:46.000Z</published>
    <updated>2019-08-31T14:37:06.669Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>没有太多时间去查看详细源代码，所以仍然有很多不清晰或者理解不到位的地方，后续将 Linux 相关知识学习得更深入的时候再来更新一次。  </p>
</blockquote>
<h1 id="进程与线程">进程与线程</h1><p>在 Linux 中，进程和线程几乎没有什么区别，主要的区别就是线程共享同样的虚拟内存地址空间。对于 kernel 来说，进程和线程都是一个可运行的 task 。</p>
<p>线程创建函数 pthread_create() 会调用 clone(), 而进程创建函数 fork() 最终也是调用 clone()。我们查看<a href="https://linux.die.net/man/2/clone" target="_blank" rel="external">clone</a>函数的介绍时，可以看到 clone() 的参数 flags 用来指明子‘进程’和父‘进程’共享什么，所以可以说进程就是不共享任何东西的一个典型线程（一个不成熟的观点，不一定正确）。<br><img src="https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/linux/process_thread_to_task.jpeg" alt="process_thread_to_task">  </p>
<blockquote>
<p>摘录线程库发展史：Linux threading libraries evolution: Linux Threads, NGPT, NPTL. The library is part of gilbc, programmer interface is POSIX pthreads.  </p>
</blockquote>
<h1 id="线程模型">线程模型</h1><a id="more"></a>
<p>Linux 中的线程是 “1-1” 模型, 而不是 “1-N” 或者 “M-N” 模型。下面简单介绍一下线程模型。</p>
<h2 id="“1-1”_模型">“1-1” 模型</h2><p>将每个用户级线程映射到一个内核级线程（即 task）。<br>优点：<br>消耗更少的资源，比如内存（虚拟的和物理的）和 内核对象（object）。并且也会更少地上下文切换，从而提高性能，在理想情况下，当你拥有和运行线程一样多的处理器的时候，将可能几乎没有上下文切换。<br>缺点：<br>可能是延迟更大：如果池中的所有线程都忙，并且您添加了新的短任务，则可能需要等待很长时间才能开始执行。</p>
<h2 id="“1-N”_模型">“1-N” 模型</h2><p>将多个用户级线程映射到一个内核级线程,早期 OS 的线程实现方式。<br>优点:<br>内核不干涉线程的任何生命活动和上下文切换。线程的管理在用户空间进行,因而效率比较高;<br>缺点:<br>一个进程中的多个线程只能调度到一个CPU，这种约束限制了可用的并行总量，并且如果某个线程 block 了，其他线程都只能等着。</p>
<h2 id="“M-N”_模型">“M-N” 模型</h2><p>在线程池里，将 M 个用户线程映射到 N 个内核线程 (M &gt;= N)，可以算结合上面两种方法的优势，但会牺牲一些额外的用户模式调度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;没有太多时间去查看详细源代码，所以仍然有很多不清晰或者理解不到位的地方，后续将 Linux 相关知识学习得更深入的时候再来更新一次。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;进程与线程&quot;&gt;进程与线程&lt;/h1&gt;&lt;p&gt;在 Linux 中，进程和线程几乎没有什么区别，主要的区别就是线程共享同样的虚拟内存地址空间。对于 kernel 来说，进程和线程都是一个可运行的 task 。&lt;/p&gt;
&lt;p&gt;线程创建函数 pthread_create() 会调用 clone(), 而进程创建函数 fork() 最终也是调用 clone()。我们查看&lt;a href=&quot;https://linux.die.net/man/2/clone&quot;&gt;clone&lt;/a&gt;函数的介绍时，可以看到 clone() 的参数 flags 用来指明子‘进程’和父‘进程’共享什么，所以可以说进程就是不共享任何东西的一个典型线程（一个不成熟的观点，不一定正确）。&lt;br&gt;&lt;img src=&quot;https://andylee-1258982386.cos.ap-chengdu.myqcloud.com/linux/process_thread_to_task.jpeg&quot; alt=&quot;process_thread_to_task&quot;&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘录线程库发展史：Linux threading libraries evolution: Linux Threads, NGPT, NPTL. The library is part of gilbc, programmer interface is POSIX pthreads.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;线程模型&quot;&gt;线程模型&lt;/h1&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://huaqianlee.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>The first week of ARTS: Start</title>
    <link href="http://huaqianlee.github.io/2019/08/31/ARTS/First-week-of-ARTS-Start/"/>
    <id>http://huaqianlee.github.io/2019/08/31/ARTS/First-week-of-ARTS-Start/</id>
    <published>2019-08-31T08:39:35.000Z</published>
    <updated>2019-11-16T15:05:26.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARTS_简单介绍">ARTS 简单介绍</h1><p>Algorithm：<br>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>
<p>Review：<br>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章，我个人最喜欢去的地方是 <a href="http://Medium.com" target="_blank" rel="external">Medium</a>（需要梯子）以及各个公司的技术 blog，如 Netflix 的。</p>
<p>Tip：<br>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>
<p>Share：<br>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>
<a id="more"></a>
<h1 id="Algorithm">Algorithm</h1><p>本周用 c 语言完成了两道算法题。<br>算法题目：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Two Sum</a><br>我的代码：<a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/twoSum.c" target="_blank" rel="external">C Solution</a>  </p>
<p>算法题目：<a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="external">Add Two Numbers</a><br>我的代码：<a href="https://github.com/huaqianlee/LeetcodeSolutions/blob/master/algorithms/c/addTwoNumbers.c" target="_blank" rel="external">C Solution</a>  </p>
<h1 id="Review">Review</h1><p>因为自己想学习一下正则表达式，所以就找了一篇英文教程：<a href="https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285" target="_blank" rel="external">Regex tutorial — A quick cheatsheet by examples</a> 。 </p>
<p>这篇文章简单介绍了 topics 及相关实例，十分适合入门学习，而且通过这个网站我发现了一个<a href="https://regex101.com/r/cO8lqs/2" target="_blank" rel="external">在线 regex 调试器</a> ，通过这个在线调试器我们就能很方便的进行正则表达式学习。</p>
<h1 id="Tips">Tips</h1><p>这周学到了两个版本管理的技巧。</p>
<ul>
<li><p>快速撤销本地的所有修改和提交件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repo forall -vc <span class="string">"git reset --hard; git clean -fdx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># explanation</span></span><br><span class="line">forall - Execute <span class="keyword">for</span> all repos.</span><br><span class="line">v - Print the output of the <span class="built_in">command</span></span><br><span class="line">c - Command to execute,the actual <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将版本回退到指定时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo forall -c <span class="string">'git checkout `git rev-list --all -n1 --before="2019-08-15 15:00"`'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Share">Share</h1><p><a href="http://huaqianlee.github.io/2019/08/31/Linux/Process-and-thread-in-linux/" target="_blank" rel="external">进程与线程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ARTS_简单介绍&quot;&gt;ARTS 简单介绍&lt;/h1&gt;&lt;p&gt;Algorithm：&lt;br&gt;主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。&lt;/p&gt;
&lt;p&gt;Review：&lt;br&gt;主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章，我个人最喜欢去的地方是 &lt;a href=&quot;http://Medium.com&quot;&gt;Medium&lt;/a&gt;（需要梯子）以及各个公司的技术 blog，如 Netflix 的。&lt;/p&gt;
&lt;p&gt;Tip：&lt;br&gt;主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。&lt;/p&gt;
&lt;p&gt;Share：&lt;br&gt;主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。&lt;/p&gt;
    
    </summary>
    
      <category term="ARTS" scheme="http://huaqianlee.github.io/categories/ARTS/"/>
    
    
      <category term="Algorithm" scheme="http://huaqianlee.github.io/tags/Algorithm/"/>
    
      <category term="成长" scheme="http://huaqianlee.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>UFP was modified as DRP when we unplug OTG</title>
    <link href="http://huaqianlee.github.io/2019/08/27/Android/USB-port-error/"/>
    <id>http://huaqianlee.github.io/2019/08/27/Android/USB-port-error/</id>
    <published>2019-08-27T14:11:32.000Z</published>
    <updated>2019-09-01T06:22:00.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Term">Term</h1><ul>
<li><p>DFP - Downstream Facing Port<br>下行端口，可以理解为 Host 的 Type-c 端口或者作为 Host 的 hub ，DFP 提供 VBUS，可以提供数据。在协议规范中 DFP 特指数据的下行传输，笼统意义上指的是数据下行和对外提供电源的设备。典型的 DFP 设备是电源适配器。</p>
</li>
<li><p>UFP - Upstream Facing port<br>上行端口，可以理解为 Device 上的 Type-c 端口或者连接到 Host/DFP of a hub ，UFP 从 VBUS 中取电，并可提供数据。典型设备是 U 盘，移动硬盘。</p>
</li>
<li><p>DRP - DUal Role Port (DFP + UFP)<br>双角色端口，DRP 既可以做 DFP(Host)，也可以做 UFP(Device)，也可以在 DFP 与 UFP 间动态切换。典型的DRP设备是笔记本电脑。</p>
</li>
</ul>
<blockquote>
<p>引用摘录：A DRP port is a port that can operate as either a sink or source.</p>
<p>source - takes the data role of a DFP.<br>sink - take the data role of a UFP.</p>
<p>A current sink is a port or circuit point that accepts negative current, e.g. current into the circuit which it drains to ground.<br>A current source is a port or circuit point that provides positive current. A good example of a current source is a DC power supply</p>
</blockquote>
<h1 id="Description">Description</h1><p>逻辑：USB 默认为 UFP，不能使用 OTG ；若要使用需要通过 node 将其设为 DRP ， 但是在拔出后需要将其设回 UFP。 </p>
<p>问题： 当拔掉 OTG 之后，USB 仍然为 DRP ，导致不用设置 node 即可连接 OTG。</p>
<h1 id="Solution">Solution</h1><a id="more"></a>
<h2 id="初步解析">初步解析</h2><p>通过在 smblib_handle_typec_removal 函数设置 USB 端口模式的地方加日志读取端口状态，发现 DRP 是被成功设置了的，但是短暂时间后又被其他地方修改为 UFP 模式了。</p>
<p>通过寄存器相关关键字等各种方式皆不能找到其余修改的地方。</p>
<p>因为老版本（Android N）上是没有问题的，所以尝试在本问题版本（Android Q） one by one 烧写 N 的镜像，最终发现 pmic.elf 分区会让问题得以解决。</p>
<h2 id="方案一">方案一</h2><p>对比代码发现如下两种修改方法可以解决问题：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">diff --git a/QcomPkg/Library/PmicLib/target/sdm660_pm660_pm660l/psi/pm_config_target_pbs_ram.c b/QcomPkg/Library/PmicLib/target/sdm660_pm660_pm660l/psi/pm_config_target_pbs_ram.c</span><br><span class="line">index bfb32ba..cb012b4 <span class="number">100755</span></span><br><span class="line">--- a/QcomPkg/Library/PmicLib/target/sdm660_pm660_pm660l/psi/pm_config_target_pbs_ram.c</span><br><span class="line">+++ b/QcomPkg/Library/PmicLib/target/sdm660_pm660_pm660l/psi/pm_config_target_pbs_ram.c</span><br><span class="line">@@ -<span class="number">58</span>,<span class="number">7</span> +<span class="number">58</span>,<span class="number">7</span> @@ pm_pbs_seq [ ][PBS_RAM_DATA_SIZE] =</span><br><span class="line">      &#123; <span class="number">0x00</span>,  <span class="number">0x1B</span>,   <span class="number">0x01</span>,   <span class="number">0x18</span>&#125;,  <span class="comment">// W#1 -        0x804 Header offset, Header Version, PBS RAM Revision, PBS RAM Branch</span></span><br><span class="line">      &#123; <span class="number">0x2C</span>,  <span class="number">0x08</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#2 -        0x808 Start of trigger jump table:</span></span><br><span class="line">      &#123; <span class="number">0x68</span>,  <span class="number">0x08</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#3 -        0x80C</span></span><br><span class="line"><span class="preprocessor"># mothod first.</span></span><br><span class="line">-      &#123; <span class="number">0xC4</span>,  <span class="number">0x08</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#4 -        0x810</span></span><br><span class="line">+      &#123; <span class="number">0xB8</span>,  <span class="number">0x08</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#4 -        0x810</span></span><br><span class="line">OR </span><br><span class="line"><span class="preprocessor"># mothod second.</span></span><br><span class="line">-      &#123; <span class="number">0x38</span>,  <span class="number">0x09</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#5 -        0x814</span></span><br><span class="line">+      &#123; <span class="number">0x2C</span>,  <span class="number">0x09</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#5 -        0x814</span></span><br><span class="line">      &#123; <span class="number">0xC4</span>,  <span class="number">0x0F</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#6 -        0x818 Fixed Offset = RAM-Base-Addr + 0x18 + 0x00 =&gt; SLEEP-SET</span></span><br><span class="line">      &#123; <span class="number">0xCC</span>,  <span class="number">0x0F</span>,   <span class="number">0xFF</span>,   <span class="number">0x83</span>&#125;,  <span class="comment">// W#7 -        0x81C Fixed Offset = RAM-Base-Addr + 0x18 + 0x04 =&gt; PON X Reasons</span></span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>但是针对这个问题咨询高通得到的回复是：PSI 模块是不允许修改的，会导致难以预料的问题，所以这种方案作罢。因为没有找到相关资料，不清楚这个差异具体是什么，高通也未给出清晰的答案。</p>
<h2 id="方案二">方案二</h2><p>拔掉时延时 5 毫秒才重置 USB 为 UFP 模式，试图在 PSI 之后修改，经过测试此修改方案能解决此问题。如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/drivers/power/supply/qcom/smb-lib.c b/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">--- a/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">+++ b/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">@@ -<span class="number">4378</span>,<span class="number">12</span> +<span class="number">4378</span>,<span class="number">28</span> @@</span><br><span class="line"> <span class="preprocessor">#ifdef FEATURE__DET_DRIVER</span></span><br><span class="line"> 	<span class="comment">/* configure power role for default */</span></span><br><span class="line"> 	_power_role_val.intval = _det_get_default_power_role();</span><br><span class="line"></span><br><span class="line">+	msleep(<span class="number">5</span>);  <span class="preprocessor"># 延时等 PSI 修改 USB 为 DRP 完成，然后我们再修改为 UFP</span></span><br><span class="line">	rc = smblib_set_prop_typec_power_role(chg, &amp;_power_role_val);</span><br></pre></td></tr></table></figure></p>
<h2 id="方案三">方案三</h2><p>此方案与方案二类似，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/drivers/power/supply/qcom/smb-lib.c b/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">--- a/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">+++ b/drivers/power/supply/qcom/smb-lib.c</span><br><span class="line">@@ -<span class="number">4378</span>,<span class="number">12</span> +<span class="number">4378</span>,<span class="number">28</span> @@</span><br><span class="line"> <span class="preprocessor">#ifdef FEATURE__DET_DRIVER</span></span><br><span class="line"> 	<span class="comment">/* configure power role for default */</span></span><br><span class="line"> 	_power_role_val.intval = _det_get_default_power_role();  <span class="comment">// 获取需要设定端口模式</span></span><br><span class="line">-	rc = smblib_set_prop_typec_power_role(chg, &amp;_power_role_val);</span><br><span class="line">-	<span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">-		smblib_err(chg,</span><br><span class="line">-			<span class="string">"Couldn't configure power role for %d rc=%d\n"</span>, _power_role_val.intval, rc);</span><br><span class="line">+	<span class="keyword">if</span>(_power_role_val.intval == POWER_SUPPLY_TYPEC_PR_SINK)&#123;</span><br><span class="line">+		rc = smblib_masked_write(chg, TYPE_C_INTRPT_ENB_SOFTWARE_CTRL_REG, TYPEC_DISABLE_CMD_BIT, TYPEC_DISABLE_CMD_BIT);</span><br><span class="line">+		<span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">+			smblib_err(chg, <span class="string">"Couldn't disable type-c\n"</span>);</span><br><span class="line">+</span><br><span class="line">+		msleep(<span class="number">200</span>);  <span class="preprocessor"># 延时等 PSI 修改 USB 为 DRP 完成，然后我们再修改为 UFP</span></span><br><span class="line">+		rc = smblib_masked_write(chg, TYPE_C_INTRPT_ENB_SOFTWARE_CTRL_REG, UFP_EN_CMD_BIT | DFP_EN_CMD_BIT, UFP_EN_CMD_BIT);</span><br><span class="line">+		<span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">+			smblib_err(chg, <span class="string">"Couldn't configure power role for %d rc=%d\n"</span>, _power_role_val.intval, rc);</span><br><span class="line">+</span><br><span class="line">+		msleep(<span class="number">10</span>);</span><br><span class="line">+		rc = smblib_masked_write(chg, TYPE_C_INTRPT_ENB_SOFTWARE_CTRL_REG, TYPEC_DISABLE_CMD_BIT, <span class="number">0</span>);</span><br><span class="line">+		<span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">+			smblib_err(chg, <span class="string">"Couldn't enable type-c\n"</span>);</span><br><span class="line">+	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">+		rc = smblib_set_prop_typec_power_role(chg, &amp;_power_role_val); <span class="comment">// write 3 bit， if 中的内容部分算此函数的子集，只是提取出来添加了 TYPEC_DISABLE_CMD_BIT 和延时</span></span><br><span class="line">+		<span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">+			smblib_err(chg, <span class="string">"Couldn't configure power role for %d rc=%d\n"</span>, _power_role_val.intval, rc);</span><br><span class="line"> 	&#125;</span><br><span class="line"> <span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"> 	<span class="comment">/* enable DRP */</span></span><br><span class="line"> 	rc = smblib_masked_write(chg, TYPE_C_INTRPT_ENB_SOFTWARE_CTRL_REG,</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Term&quot;&gt;Term&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DFP - Downstream Facing Port&lt;br&gt;下行端口，可以理解为 Host 的 Type-c 端口或者作为 Host 的 hub ，DFP 提供 VBUS，可以提供数据。在协议规范中 DFP 特指数据的下行传输，笼统意义上指的是数据下行和对外提供电源的设备。典型的 DFP 设备是电源适配器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UFP - Upstream Facing port&lt;br&gt;上行端口，可以理解为 Device 上的 Type-c 端口或者连接到 Host/DFP of a hub ，UFP 从 VBUS 中取电，并可提供数据。典型设备是 U 盘，移动硬盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DRP - DUal Role Port (DFP + UFP)&lt;br&gt;双角色端口，DRP 既可以做 DFP(Host)，也可以做 UFP(Device)，也可以在 DFP 与 UFP 间动态切换。典型的DRP设备是笔记本电脑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;引用摘录：A DRP port is a port that can operate as either a sink or source.&lt;/p&gt;
&lt;p&gt;source - takes the data role of a DFP.&lt;br&gt;sink - take the data role of a UFP.&lt;/p&gt;
&lt;p&gt;A current sink is a port or circuit point that accepts negative current, e.g. current into the circuit which it drains to ground.&lt;br&gt;A current source is a port or circuit point that provides positive current. A good example of a current source is a DC power supply&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;Description&lt;/h1&gt;&lt;p&gt;逻辑：USB 默认为 UFP，不能使用 OTG ；若要使用需要通过 node 将其设为 DRP ， 但是在拔出后需要将其设回 UFP。 &lt;/p&gt;
&lt;p&gt;问题： 当拔掉 OTG 之后，USB 仍然为 DRP ，导致不用设置 node 即可连接 OTG。&lt;/p&gt;
&lt;h1 id=&quot;Solution&quot;&gt;Solution&lt;/h1&gt;
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.github.io/categories/Android/"/>
    
    
      <category term="Bug" scheme="http://huaqianlee.github.io/tags/Bug/"/>
    
      <category term="Qualcomm" scheme="http://huaqianlee.github.io/tags/Qualcomm/"/>
    
  </entry>
  
  <entry>
    <title>一个 health service 不生效问题引出的一点知识</title>
    <link href="http://huaqianlee.github.io/2019/05/16/Android/A-little-knowledge-about-health/"/>
    <id>http://huaqianlee.github.io/2019/05/16/Android/A-little-knowledge-about-health/</id>
    <published>2019-05-16T15:57:34.000Z</published>
    <updated>2019-05-16T16:15:12.698Z</updated>
    
    <content type="html"><![CDATA[<p>从 Android P 开始，Google 开始推荐厂家再定制一个 health 。前不久遇到一个定制 health 中的信息未成功反应到 Framework 的问题，在分析解决问题的过程中，学习到了一点新知识，所以就在这篇文章里根据解决问题的流程做一个小小的记录。</p>
<blockquote>
<p>问题：定制 health service 中的一些 health 信息未成功反应到 Framework。</p>
<p>已知：定制 health 和 Google healthd 进程都运行于设备中，定制 health 主要重写 healthd_board_battery_update 函数，会通过库文件引用原生代码（system/core/healthd/）中的实现。</p>
</blockquote>
<h1 id="初步方案">初步方案</h1><h2 id="简单介绍">简单介绍</h2><p>服务创建时都编写了一个 x.rc 文件，用来描述 health service 的一些特点，其中就包括其启动时机。如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># system/core/healthd/android.hardware.health@2.0-service.rc&#10;/* sevice &#31867;&#22411;&#30340; setction &#34920;&#31034;&#19968;&#20010;&#21487;&#25191;&#34892;&#31243;&#24207;&#65288;&#36827;&#31243;&#65289; */&#10;service health-hal-2-0 /vendor/bin/hw/android.hardware.health@2.0-service or healthd.rc&#10;&#9;class hal &#10;&#9;user system&#10;&#9;group system&#10;&#9;file /dev/kmsg w</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>启动顺序： hal-&gt; core-&gt; main -&gt; later</p>
</blockquote>
<a id="more"></a>
<h2 id="尝试性修改_health_service_启动时机">尝试性修改 health service 启动时机</h2><p>因为对 Framework 层的处理不熟悉，就根据经验判断定制 health 与 Google healthd 可能有时序冲突，对定制 health 做延迟启动处理，如下：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># device/&lt;vendor&gt;/health/xxx.rc </span></span><br><span class="line">- <span class="class"><span class="keyword">class</span> <span class="title">hal</span> </span></span><br><span class="line">+ <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br></pre></td></tr></table></figure></p>
<p>经过测试，此方案可行，但是这种说不出 root cause 的解决方案难以让人接受，所以也就拉通代码继续研究。</p>
<h1 id="最终方案">最终方案</h1><h2 id="原理分析">原理分析</h2><h3 id="Framework_层">Framework 层</h3><p>首先最大疑问就是 FW 层怎么判断使用哪一个 health 的内容。因 health 信息最终会更新到 BatteryService.java, 尝试在此文件中寻找答案，最终找到如下关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># frameworks/base/services/core/java/com/android/server/BatteryService.java</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthServiceWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HealthServiceWrapper"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSTANCE_HEALTHD = <span class="string">"backup"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSTANCE_VENDOR = <span class="string">"default"</span>;</span><br><span class="line">    <span class="comment">// All interesting instances, sorted by priority high -&gt; low.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; sAllInstances =</span><br><span class="line">            Arrays.asList(INSTANCE_VENDOR, INSTANCE_HEALTHD);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过这段代码知道系统是根据 service 的实例名来决定使用哪一个 health。</p>
<h3 id="service_的实例名">service 的实例名</h3><h4 id="定制_health">定制 health</h4><p>通过查看如下代码得知定制 health 的实例名为 “default”。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># device/vendor/health/HealthService.cpp</span></span><br><span class="line"><span class="comment">/*通过库和如下函数引入 Google healthd 部分*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> health_service_main();</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor"># hardware/interfaces/health/2.0/utils/libhealthservice/HealthServiceCommon.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">health_service_main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* instance)</span> </span>&#123;</span><br><span class="line">    gInstanceName = instance;</span><br><span class="line">    <span class="keyword">if</span> (gInstanceName.empty()) &#123;</span><br><span class="line">        gInstanceName = <span class="string">"default"</span>; <span class="comment">// 空白时实例名</span></span><br><span class="line">    &#125;</span><br><span class="line">    healthd_mode_ops = &amp;healthd_mode_service_2_0_ops;</span><br><span class="line">    LOG(INFO) &lt;&lt; LOG_TAG &lt;&lt; gInstanceName &lt;&lt; <span class="string">": Hal starting main loop..."</span>;</span><br><span class="line">    <span class="keyword">return</span> healthd_main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Google_healthd">Google healthd</h4><p>通过查看如下代码得知 healthd 的实例名与定制 health 相同，所以在 Framework 层面，后加载的 service 生效。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># system/core/healthd/HealthServiceDefault.cpp</span></span><br><span class="line"><span class="comment">/* 此 service 实例名为 “default”*/</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> health_service_main();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># system/core/healthd/HealthServiceHealthd.cpp</span></span><br><span class="line"><span class="comment">/* 实例名为 “backup”*/</span></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">return</span> health_service_main(<span class="string">"backup"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># system/core/healthd/Android.bp</span></span><br><span class="line"><span class="comment">/* HealthServiceDefault 重写了 HealthServiceHealthd，所以 healthd 使用的实例名为“default”*/</span></span><br><span class="line">cc_binary &#123;</span><br><span class="line">    name: <span class="string">"android.hardware.health@2.0-service.override"</span>,</span><br><span class="line">    defaults: [<span class="string">"android.hardware.health@2.0-service_defaults"</span>],</span><br><span class="line"></span><br><span class="line">    overrides: [</span><br><span class="line">        <span class="string">"healthd"</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="解决方案">解决方案</h2><p>因为我们需要使用定制的 health，所以将原生的实例名改为“backup”，这样这个问题就得以解决了。</p>
<h2 id="花絮">花絮</h2><p>我也尝试给定制 health 新建一个实例名，但是未成功，后发现似乎新添实例名需要按如下方式配置一下。但因为时间和研究的动力不足就没有继续了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">hal</span> <span class="attribute">format</span>=<span class="value">"hidl"</span> <span class="attribute">optional</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">name</span>&gt;</span>xxx.xxx<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">instance</span>&gt;</span>default<span class="tag">&lt;/<span class="title">instance</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">instance</span>&gt;</span>backup<span class="tag">&lt;/<span class="title">instance</span>&gt;</span> # 似乎可以这样添加实例名</span><br><span class="line">    <span class="tag">&lt;/<span class="title">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">hal</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 Android P 开始，Google 开始推荐厂家再定制一个 health 。前不久遇到一个定制 health 中的信息未成功反应到 Framework 的问题，在分析解决问题的过程中，学习到了一点新知识，所以就在这篇文章里根据解决问题的流程做一个小小的记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：定制 health service 中的一些 health 信息未成功反应到 Framework。&lt;/p&gt;
&lt;p&gt;已知：定制 health 和 Google healthd 进程都运行于设备中，定制 health 主要重写 healthd_board_battery_update 函数，会通过库文件引用原生代码（system/core/healthd/）中的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;初步方案&quot;&gt;初步方案&lt;/h1&gt;&lt;h2 id=&quot;简单介绍&quot;&gt;简单介绍&lt;/h2&gt;&lt;p&gt;服务创建时都编写了一个 x.rc 文件，用来描述 health service 的一些特点，其中就包括其启动时机。如下：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# system/core/healthd/android.hardware.health@2.0-service.rc&amp;#10;/* sevice &amp;#31867;&amp;#22411;&amp;#30340; setction &amp;#34920;&amp;#31034;&amp;#19968;&amp;#20010;&amp;#21487;&amp;#25191;&amp;#34892;&amp;#31243;&amp;#24207;&amp;#65288;&amp;#36827;&amp;#31243;&amp;#65289; */&amp;#10;service health-hal-2-0 /vendor/bin/hw/android.hardware.health@2.0-service or healthd.rc&amp;#10;&amp;#9;class hal &amp;#10;&amp;#9;user system&amp;#10;&amp;#9;group system&amp;#10;&amp;#9;file /dev/kmsg w&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启动顺序： hal-&amp;gt; core-&amp;gt; main -&amp;gt; later&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.github.io/categories/Android/"/>
    
    
      <category term="Bug" scheme="http://huaqianlee.github.io/tags/Bug/"/>
    
      <category term="Qualcomm" scheme="http://huaqianlee.github.io/tags/Qualcomm/"/>
    
  </entry>
  
  <entry>
    <title>pmic voter</title>
    <link href="http://huaqianlee.github.io/2019/05/15/Android/pmic-voter/"/>
    <id>http://huaqianlee.github.io/2019/05/15/Android/pmic-voter/</id>
    <published>2019-05-15T15:48:59.000Z</published>
    <updated>2019-05-16T16:11:30.749Z</updated>
    
    <content type="html"><![CDATA[<p>前不久在高通 SDM450 平台接触了 voter 机制（投票机制）。最近终于得空，结合一个问题简单研究了一下。现将研究流程简单记录一下,由于时间有限，所以是实用为目的，没有做详细的分析，不过结合着这篇分析和源码一起参考，应该能快速地应用 voter 做一些事情。</p>
<h1 id="voter">voter</h1><p>第一步是找到 voter 的实现代码，然后分析 voter 的机制。voter 的实现代码主要是为各种 voter 提供接口，我提炼了两个最关键的接口，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># kernel/msm-4.9/drivers/power/supply/qcom/pmic-voter.c</span></span><br><span class="line"><span class="comment">/*</span><br><span class="line">** vote 函数主要用来给 votable 添加投票选项</span><br><span class="line">** votable: 投票的对象</span><br><span class="line">** client_str: 投票者</span><br><span class="line">** enabled: 投票者的内容（val）是否参与投票</span><br><span class="line">** val: 投票内容</span><br><span class="line">**/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vote</span><span class="params">(<span class="keyword">struct</span> votable *votable, <span class="keyword">const</span> <span class="keyword">char</span> *client_str, <span class="keyword">bool</span> enabled, <span class="keyword">int</span> val)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">switch</span> (votable-&gt;type) &#123; <span class="comment">// type 的值来自于 create_votable()</span></span><br><span class="line">	<span class="keyword">case</span> VOTE_MIN: <span class="comment">// 取投票对象所有内容的最小值</span></span><br><span class="line">		vote_min(votable, client_id, &amp;effective_result, &amp;effective_id);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> VOTE_MAX:</span><br><span class="line">		vote_max(votable, client_id, &amp;effective_result, &amp;effective_id);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> VOTE_SET_ANY:</span><br><span class="line">		vote_set_any(votable, client_id,</span><br><span class="line">				&amp;effective_result, &amp;effective_id);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 投票相关参数，可以在此文件中搜索此结构体的成员找到其值从哪儿来*/</span></span><br><span class="line"><span class="keyword">struct</span> votable &#123;</span><br><span class="line">	<span class="keyword">int</span>			type;</span><br><span class="line">...</span><br><span class="line">	<span class="keyword">int</span>			(*callback)(<span class="keyword">struct</span> votable *votable,</span><br><span class="line">	&#125;</span><br><span class="line">---&gt; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> votable *create_votable(<span class="keyword">const</span> <span class="keyword">char</span> *name,</span><br><span class="line">				<span class="keyword">int</span> votable_type,</span><br><span class="line">				<span class="keyword">int</span> (*callback)(<span class="keyword">struct</span> votable *votable,..)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建 votable, 引入 votable type 和 callback 函数</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* 创建 debugfs*/</span></span><br><span class="line">	debug_root = debugfs_create_dir(<span class="string">"pmic-votable"</span>, NULL);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">eg: 创建流入电池电流的投票对象</span><br><span class="line">chip-&gt;fcc_votable = create_votable(<span class="string">"FCC"</span>, VOTE_MIN,</span><br><span class="line">				pl_fcc_vote_callback,</span><br><span class="line">				chip);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="pmic_voter_debugfs">pmic voter debugfs</h1><p>通过 voter 的文件节点能够比较清晰的看出 voter 结构。如下：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /sys/kernel/debug/pmic-votable/</span></span><br><span class="line">cat status</span><br><span class="line">FCC: HW_LIMIT_VOTER:			<span class="variable">en=</span><span class="number">0</span> <span class="variable">v=</span>-<span class="number">22</span></span><br><span class="line">FCC: BATT_PROFILE_VOTER:			<span class="variable">en=</span><span class="number">1</span> <span class="variable">v=</span><span class="number">1500000</span></span><br><span class="line">FCC: SW_ICL_MAX_VOTER:			<span class="variable">en=</span><span class="number">1</span> <span class="variable">v=</span><span class="number">1500000</span></span><br><span class="line">FCC: THERMAL_DAEMON_VOTER:			<span class="variable">en=</span><span class="number">0</span> <span class="variable">v=</span><span class="number">0</span></span><br><span class="line">FCC: FCC_SOC_VOTER:			<span class="variable">en=</span><span class="number">1</span> <span class="variable">v=</span><span class="number">1000000</span></span><br><span class="line">FCC: JEITA_VOTER:			<span class="variable">en=</span><span class="number">1</span> <span class="variable">v=</span><span class="number">1500000</span></span><br><span class="line">FCC: STEP_CHG_VOTER:			<span class="variable">en=</span><span class="number">0</span> <span class="variable">v=</span><span class="number">0</span></span><br><span class="line">FCC: TAPER_STEPPER_VOTER:			<span class="variable">en=</span><span class="number">0</span> <span class="variable">v=</span><span class="number">0</span></span><br><span class="line">FCC: <span class="variable">effective=</span>FCC_SOC_VOTER <span class="variable">type=</span>Min <span class="variable">v=</span><span class="number">1000000</span></span><br></pre></td></tr></table></figure></p>
<h1 id="一个问题案例">一个问题案例</h1><p><strong>[Description]</strong></p>
<p>设备在不同温度条件下有不同的电流限制，但是在测试设备时发现一个问题：电池温度升温过程中，设备并没有在 cool 零界限改变温度，而是再超过临界线 2~3 ℃ 的时候才做相应动作。</p>
<p><strong>[Root cause]</strong></p>
<p>默认的 jeita 标准相关代码有一个温度临界值保护并延迟改变电流值的设定，当达到临界值时并不马上改变电流限制，继续投票上一阶段的电流值，当温度达到定义的延迟温度时，再投票当前阶段的电流值。</p>
<p><strong>[Solution]</strong><br>如需要修改此问题的话，取消温度临界值保护（即将温度滞后值改为 0）即可。</p>
<p>详细情况如下：</p>
<h2 id="每个阶段温度和电流值的定义">每个阶段温度和电流值的定义</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># kernel<span class="regexp">/msm-4.9/</span>arch<span class="regexp">/arm64/</span>boot<span class="regexp">/dts/</span>qcom<span class="regexp">/vendor/</span>qg-batterydata-xxx.dtsi</span><br><span class="line"></span><br><span class="line">qcom,jeita-fcc-ranges = &lt;<span class="number">50</span>   <span class="number">150</span>  <span class="number">800000</span>  <span class="comment">//阶段一  COOL</span></span><br><span class="line">			<span class="number">151</span>  <span class="number">450</span>  <span class="number">1500000</span> <span class="comment">// 阶段二 GOOD</span></span><br><span class="line">			<span class="number">451</span>  <span class="number">500</span>  <span class="number">1400000</span>&gt;; <span class="comment">// 阶段三 Warm</span></span><br></pre></td></tr></table></figure>
<h2 id="关键源码">关键源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kernel/msm-4.9/drivers/power/supply/qcom/step-chg-jeita.c</span></span><br><span class="line"><span class="comment">/* 定义 jeita 标准延迟设定相关参数 */</span></span><br><span class="line">chip-&gt;jeita_fcc_config-&gt;psy_prop = POWER_SUPPLY_PROP_TEMP;</span><br><span class="line">chip-&gt;jeita_fcc_config-&gt;prop_name = <span class="string">"BATT_TEMP"</span>;</span><br><span class="line">chip-&gt;jeita_fcc_config-&gt;hysteresis = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/* jeita 生效函数 */</span></span><br><span class="line"><span class="keyword">static</span> int handle_jeita(struct step_chg_info *chip)</span><br><span class="line">&#123;</span><br><span class="line">	rc = power_supply_get_property(chip-&gt;batt_psy,</span><br><span class="line">			chip-&gt;jeita_fcc_config-&gt;psy_prop, &amp;pval);</span><br><span class="line">	rc = get_val(chip-&gt;jeita_fcc_config-&gt;fcc_cfg,</span><br><span class="line">		chip-&gt;jeita_fcc_config-&gt;,</span><br><span class="line">		chip-&gt;jeita_fcc_index,</span><br><span class="line">		pval.intval,</span><br><span class="line">		&amp;chip-&gt;jeita_fcc_index,</span><br><span class="line">		&amp;fcc_ua);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">/* 投票获取到的电流值 */</span>	</span><br><span class="line">	vote(chip-&gt;fcc_votable, JEITA_VOTER, fcc_ua ? <span class="keyword">true</span> : <span class="keyword">false</span>, fcc_ua);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取当前应投票的电流值 */</span></span><br><span class="line">get_val(...) 	</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * Check for hysteresis if it in the neighbourhood</span><br><span class="line">	 * of our current index.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (*new_index == current_index + <span class="number">1</span>) &#123;</span><br><span class="line">	    <span class="comment">/* 当温度小于临界值 + 延迟时，继续使用上一阶段的电流值</span><br><span class="line">		if (threshold &lt; range[*new_index].low_threshold + hysteresis) &#123;</span><br><span class="line">			/*</span><br><span class="line">			 * Stay in the current index, threshold is not higher</span><br><span class="line">			 * by hysteresis amount</span><br><span class="line">			 */</span></span><br><span class="line">			*new_index = current_index;</span><br><span class="line">			*val = range[current_index].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (*new_index == current_index - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (threshold &gt; range[*new_index].high_threshold - hysteresis) &#123;</span><br><span class="line">			<span class="comment">/*</span><br><span class="line">			 * stay in the current index, threshold is not lower</span><br><span class="line">			 * by hysteresis amount</span><br><span class="line">			 */</span></span><br><span class="line">			*new_index = current_index;</span><br><span class="line">			*val = range[current_index].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前不久在高通 SDM450 平台接触了 voter 机制（投票机制）。最近终于得空，结合一个问题简单研究了一下。现将研究流程简单记录一下,由于时间有限，所以是实用为目的，没有做详细的分析，不过结合着这篇分析和源码一起参考，应该能快速地应用 voter 做一些事情。&lt;/p&gt;
&lt;h1 id=&quot;voter&quot;&gt;voter&lt;/h1&gt;&lt;p&gt;第一步是找到 voter 的实现代码，然后分析 voter 的机制。voter 的实现代码主要是为各种 voter 提供接口，我提炼了两个最关键的接口，如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# kernel/msm-4.9/drivers/power/supply/qcom/pmic-voter.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** vote 函数主要用来给 votable 添加投票选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** votable: 投票的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** client_str: 投票者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** enabled: 投票者的内容（val）是否参与投票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** val: 投票内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; votable *votable, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *client_str, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; enabled, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (votable-&amp;gt;type) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// type 的值来自于 create_votable()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; VOTE_MIN: &lt;span class=&quot;comment&quot;&gt;// 取投票对象所有内容的最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vote_min(votable, client_id, &amp;amp;effective_result, &amp;amp;effective_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; VOTE_MAX:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vote_max(votable, client_id, &amp;amp;effective_result, &amp;amp;effective_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; VOTE_SET_ANY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vote_set_any(votable, client_id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;amp;effective_result, &amp;amp;effective_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 投票相关参数，可以在此文件中搜索此结构体的成员找到其值从哪儿来*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; votable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;			type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;			(*callback)(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; votable *votable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; votable *create_votable(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; votable_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*callback)(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; votable *votable,..)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建 votable, 引入 votable type 和 callback 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 创建 debugfs*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	debug_root = debugfs_create_dir(&lt;span class=&quot;string&quot;&gt;&quot;pmic-votable&quot;&lt;/span&gt;, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eg: 创建流入电池电流的投票对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chip-&amp;gt;fcc_votable = create_votable(&lt;span class=&quot;string&quot;&gt;&quot;FCC&quot;&lt;/span&gt;, VOTE_MIN,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				pl_fcc_vote_callback,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				chip);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.github.io/categories/Android/"/>
    
    
      <category term="Qualcomm" scheme="http://huaqianlee.github.io/tags/Qualcomm/"/>
    
      <category term="源码分析" scheme="http://huaqianlee.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook + Jenkins + Gitlab 搭建内网自动构建的 Gitbook</title>
    <link href="http://huaqianlee.github.io/2019/05/05/Git/gitlab-jenkins-gitbook-to-create-LAN-gitbook/"/>
    <id>http://huaqianlee.github.io/2019/05/05/Git/gitlab-jenkins-gitbook-to-create-LAN-gitbook/</id>
    <published>2019-05-05T12:04:59.000Z</published>
    <updated>2019-05-05T12:09:57.441Z</updated>
    
    <content type="html"><![CDATA[<p>最近在本地搭建了一个 Gitbook ，用于内网访问。总结一下简单流程形成此文，细节设置可以参考官网。</p>
<h2 id="Gitbook">Gitbook</h2><h3 id="Install_Git">Install Git</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Install_Node-js">Install Node.js</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> Node.js</span><br></pre></td></tr></table></figure>
<h3 id="Install_npm">Install npm</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> npm</span><br></pre></td></tr></table></figure>
<h3 id="Install_gitbook">Install gitbook</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br><span class="line">gitbook -V</span><br></pre></td></tr></table></figure>
<h3 id="Test_gitbook_server-web">Test gitbook server-web</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="keyword">server</span></span><br><span class="line">cd <span class="keyword">server</span></span><br><span class="line">gitbook init</span><br><span class="line">gitbook build .</span><br><span class="line">gitbook serve .</span><br></pre></td></tr></table></figure>
<h2 id="Gitlab">Gitlab</h2><h3 id="Install_and_configure_the_necessary_dependencies">Install and configure the necessary dependencies</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> -y curl openssh-<span class="keyword">server</span> ca-certificates</span></span><br></pre></td></tr></table></figure>
<h3 id="Install_Postfix_to_send_notification_emails-">Install Postfix to send notification emails.</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install -y <span class="keyword">postfix</span></span><br></pre></td></tr></table></figure>
<h3 id="Add_the_GitLab_package_repository_and_install_-">Add the GitLab package repository and install .</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http<span class="variable">s:</span>//packages.gitlab.<span class="keyword">com</span>/install/repositories/gitlab/gitlab-ee/script.<span class="keyword">deb</span>.<span class="keyword">sh</span> | sudo bash</span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"https://gitlab.example.com"</span> apt-<span class="built_in">get</span> install gitlab-ee</span><br></pre></td></tr></table></figure>
<h3 id="Config_gitlab">Config gitlab</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -<span class="keyword">p</span> /etc/gitlab</span><br><span class="line">sudo touch /etc/gitlab/gitlab.rb</span><br><span class="line">sudo chmod <span class="number">600</span> /etc/gitlab/gitlab.rb</span><br><span class="line">sudo <span class="keyword">vim</span> /etc/gitlab/gitlab.rb</span><br><span class="line"># external_url <span class="string">'http://164.69.136.23'</span> , config <span class="keyword">as</span> local ip <span class="built_in">or</span> url.</span><br><span class="line"># Modification <span class="keyword">is</span> suggested. If <span class="string">'502 GitLab is not responding...'</span> error <span class="built_in">exists</span>, modify <span class="string">'unicorn['</span>port<span class="string">']'</span> in gitlab.rb. </span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl reconfigure # reconfigure <span class="built_in">and</span> restart.</span><br><span class="line">sudo gitlab-ctl status</span><br></pre></td></tr></table></figure>
<h2 id="Jenkins">Jenkins</h2><h3 id="Install_Java">Install Java</h3><p>推荐安装 openjdk-7-jre 和 openjdk-7-jdk ，但是其在 Ubuntu 16.04 和更高版本不再有效，可以安装 Java 8 或者 9 代替。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> openjdk-<span class="number">7</span>-jre</span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> openjdk-<span class="number">7</span>-jdk</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Install_Jenkins">Install Jenkins</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -<span class="keyword">q</span> -O - http<span class="variable">s:</span>//pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key <span class="built_in">add</span> -</span><br><span class="line">sudo <span class="keyword">sh</span> -<span class="keyword">c</span> <span class="string">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install jenkins</span><br></pre></td></tr></table></figure>
<h3 id="Upgrade_Jenkins">Upgrade Jenkins</h3><p>Jenkins 更新比较快，如若过期，可以按如下命令更新。<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install jenkins</span><br></pre></td></tr></table></figure></p>
<h3 id="Config_Jenkins">Config Jenkins</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/init.d/jenkins</span><br><span class="line"><span class="preprocessor"># Modify HTTP_PORT is suggested.</span></span><br><span class="line">sudo vi /etc/sudoers</span><br><span class="line"><span class="preprocessor"># jenkins ALL=(ALL) NOPASSWD:ALL ; 赋予 Jenkins sudo 权限和无密权限</span></span><br></pre></td></tr></table></figure>
<h3 id="Install_plugin">Install plugin</h3><p>通过 web(eg:<a href="http://192.168.1.2:8080" target="_blank" rel="external">http://192.168.1.2:8080</a>)  访问Jenkins 并安装插件 Git plugin　和　Gitlab Hook Plugin 。 </p>
<blockquote>
<p>初次登陆时注意 check web 提示的密码地址。</p>
</blockquote>
<h2 id="Nginx">Nginx</h2><h3 id="Install_nginx">Install nginx</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> nginx</span><br><span class="line"># <span class="keyword">upgrade</span></span><br><span class="line">sudo apt-<span class="keyword">add</span>-repository ppa:nginx/stable</span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">upgrade</span> nginx -y</span><br><span class="line"></span><br><span class="line">sudo service nginx <span class="keyword">start</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>nginx 默认使用 80 端口，打开浏览器输入：<a href="http://localhost/" target="_blank" rel="external">http://localhost/</a></p>
</blockquote>
<h3 id="Config_nginx">Config nginx</h3><p>sudo vi /etc/nginx/nginx.conf ， 注释掉不需要的配置文件，并新配 server 。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comment to solve "Welcome to nginx ..." issue.</span></span><br><span class="line"><span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment"># include /etc/nginx/sites-enabled/*;</span></span><br><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">        <span class="title">server_name</span> localhost;</span><br><span class="line">        <span class="title">listen</span> <span class="number">8082</span>; <span class="comment"># config port</span></span><br><span class="line">        <span class="title">location</span> / &#123;</span><br><span class="line">                <span class="title">root</span> /home/lee/gitbook/www/mybook; <span class="comment"># 自定义，用于存放 gitbook 内容</span></span><br><span class="line">                <span class="comment">#index  index.html index.html;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#autoindex</span></span><br><span class="line">                <span class="title">autoindex</span> <span class="built_in">on</span>;</span><br><span class="line">                <span class="title">autoindex_exact_size</span> <span class="built_in">on</span>;</span><br><span class="line">                <span class="title">autoindex_localtime</span> <span class="built_in">on</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">nginx</span> -t <span class="comment"># 检查配置文件是否正常</span></span><br><span class="line">nginx -s reload <span class="comment"># 重启</span></span><br><span class="line">若出现错误：</span><br><span class="line">nginx:[<span class="built_in">error</span>] open() <span class="string">"/run/nginx.pid"</span> failed (<span class="number">2</span>: No such file or directory)</span><br><span class="line"></span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">nginx -s reload</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></p>
<h2 id="Automaticaly_trigger">Automaticaly trigger</h2><h3 id="Config_gitlab-1">Config gitlab</h3><h4 id="Add_access_token">Add access token</h4><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">user</span> <span class="keyword">settings</span> ---&gt; <span class="constant">Access</span> <span class="constant">Tokens</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>记录下 token ，一旦关闭网页，此 token 将不再可见。</em></p>
</blockquote>
<h4 id="Create_mybook">Create mybook</h4><p>新建一个项目 <mybook>， 添加 webhooks.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>. Settings ---&gt; Integrations </span><br><span class="line"><span class="tag">b</span>. add url: http:<span class="comment">//192.168.1.2:8082/gitlab/build_now (jenkins url) .</span></span><br><span class="line">c. Select push event.</span><br><span class="line">d. Add webhook.</span><br></pre></td></tr></table></figure></mybook></p>
<p>在本地项目路径执行 ‘gitbook init’ 生成 README.md 和 SUMMARY.md 两个文件， push 到 gitlab.</p>
<h3 id="Config_Jenkins-1">Config Jenkins</h3><h4 id="Add_tokens">Add tokens</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 系统管理 ---&gt; 系统设置</span></span><br><span class="line"><span class="label">Gitlab:</span></span><br><span class="line">Connection name: gitlab</span><br><span class="line">Gitlab host url: gitlab url</span><br><span class="line"><span class="label">credentials:</span> <span class="keyword">Add</span> token, 填入上面 Access Tokens.</span><br><span class="line">Test connection.</span><br></pre></td></tr></table></figure>
<h4 id="Config_trigger">Config trigger</h4><p>新建任务 <mybook> —-&gt; 构建一个自由风格的软件项目:</mybook></p>
<ol>
<li><p>源码管理: git</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Repository <span class="built_in">URL</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">http</span>://<span class="number">192.168</span>.1.2:<span class="number">8081</span>/root/mybook.git</span><br><span class="line">Credentials <span class="comment">---&gt; Add , 填入 Gitlab 用户名和密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建 —-&gt; 执行 shell</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br><span class="line">sudo rm -rf  <span class="regexp">/home/</span>lee<span class="regexp">/gitbook/</span>www/mybook</span><br><span class="line">sudo cp -a    _book  <span class="regexp">/home/</span>lee<span class="regexp">/gitbook/</span>www/mybook</span><br><span class="line">sudo chmod  <span class="number">777</span>  <span class="regexp">/home/</span>lee<span class="regexp">/gitbook/</span>www/mybook</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>　</p>
<h3 id="Preview">Preview</h3><p>更新本地文件，然后 push 到 Gitlab, 查看 Jenkins 是否会自动触发构建。</p>
<p>如果 OK ， 整个配置流程就完成了，也可以直接预览 Gitbook了。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//192.168.1.2:8082 (nginx port)</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在本地搭建了一个 Gitbook ，用于内网访问。总结一下简单流程形成此文，细节设置可以参考官网。&lt;/p&gt;
&lt;h2 id=&quot;Gitbook&quot;&gt;Gitbook&lt;/h2&gt;&lt;h3 id=&quot;Install_Git&quot;&gt;Install Git&lt;/h3&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://huaqianlee.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Three ways to dump usb register</title>
    <link href="http://huaqianlee.github.io/2018/08/23/Android/Three-ways-to-dump-usb-register/"/>
    <id>http://huaqianlee.github.io/2018/08/23/Android/Three-ways-to-dump-usb-register/</id>
    <published>2018-08-23T14:07:48.000Z</published>
    <updated>2019-05-05T16:08:44.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Add_node">Add node</h3><p>此方法只为一个示例，有些平台不是使用此文件，如 SDM450（MSM8953）使用的 dwc3-qcom.c 。<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># kernel/msm-4.9/drivers/usb/phy/phy-msm-usb.c</span><br><span class="line"><span class="chunk">@@ -51,6 +51,11 @@</span></span><br><span class="line"> </span><br><span class="line"> #include &lt;linux/msm-bus.h&gt;</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#undef dev_dbg</span></span><br><span class="line"><span class="addition">+#define dev_dbg dev_info</span></span><br><span class="line"><span class="addition">+#undef pr_debug</span></span><br><span class="line"><span class="addition">+#define pr_debug pr_info</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> /**</span><br><span class="line">  * Requested USB votes for BUS bandwidth</span><br><span class="line">  *</span><br><span class="line">@@ -3601,6 +3606,53 @@ static int msm_otg_setup_devices(struct</span><br><span class="line"> 	return retval;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#define DUMP_ENTRIES	152</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+static ssize_t usbphy_regs_show(struct device *dev,</span></span><br><span class="line"><span class="addition">+			       struct device_attribute *attr, char *buf)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+	struct msm_otg *motg = the_msm_otg;</span></span><br><span class="line"><span class="addition">+	//struct msm_otg_platform_data *pdata = motg-&gt;pdata;</span></span><br><span class="line"><span class="addition">+	struct usb_phy *phy = &amp;motg-&gt;phy;</span></span><br><span class="line"><span class="addition">+	u32 *dump;</span></span><br><span class="line"><span class="addition">+	unsigned int i,  n = 0;</span></span><br><span class="line"><span class="addition">+	//dbg_trace("[%s] %pK\n", __func__, buf);</span></span><br><span class="line"><span class="addition">+	if (attr == NULL || buf == NULL) &#123;</span></span><br><span class="line"><span class="addition">+		dev_err(dev, "[%s] EINVAL\n", __func__);</span></span><br><span class="line"><span class="addition">+		return 0;</span></span><br><span class="line"><span class="addition">+	&#125;</span></span><br><span class="line"><span class="addition">+	if (atomic_read(&amp;motg-&gt;in_lpm))&#123;</span></span><br><span class="line"><span class="addition">+	        dev_err(dev, "[%s] usb in lpm\n", __func__);</span></span><br><span class="line"><span class="addition">+		return 0;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+	dump = kmalloc(sizeof(u8) * DUMP_ENTRIES, GFP_KERNEL);</span></span><br><span class="line"><span class="addition">+	if (!dump)</span></span><br><span class="line"><span class="addition">+		return 0;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        for(i = 0; i &lt; DUMP_ENTRIES -1; i++)</span></span><br><span class="line"><span class="addition">+        dump[i] = ulpi_read(phy, i);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+	for (i = 0; i &lt; DUMP_ENTRIES -1; i++) &#123;</span></span><br><span class="line"><span class="addition">+		n += scnprintf(buf + n, PAGE_SIZE - n,</span></span><br><span class="line"><span class="addition">+			       "reg[0x%04X] = 0x%04X\n",</span></span><br><span class="line"><span class="addition">+			       i, dump[i]);</span></span><br><span class="line"><span class="addition">+	&#125;</span></span><br><span class="line"><span class="addition">+	kfree(dump);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+	return n;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+static ssize_t usbphy_regs_store(struct device *dev,</span></span><br><span class="line"><span class="addition">+		struct device_attribute *attr, const char</span></span><br><span class="line"><span class="addition">+		*buf, size_t size)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+	return size;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+static DEVICE_ATTR(usbphy_regs, 0644,</span></span><br><span class="line"><span class="addition">+		usbphy_regs_show, usbphy_regs_store);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> static ssize_t dpdm_pulldown_enable_show(struct device *dev,</span><br><span class="line"> 			       struct device_attribute *attr, char *buf)</span><br><span class="line"> &#123;</span><br><span class="line">@@ -4426,6 +4478,7 @@ static int msm_otg_probe(struct platform</span><br><span class="line"> 	motg-&gt;caps |= ALLOW_HOST_PHY_RETENTION;</span><br><span class="line"> </span><br><span class="line"> 	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_dpdm_pulldown_enable);</span><br><span class="line"><span class="addition">+	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_usbphy_regs);</span></span><br><span class="line"> </span><br><span class="line"> 	if (motg-&gt;pdata-&gt;enable_lpm_on_dev_suspend)</span><br><span class="line"> 		motg-&gt;caps |= ALLOW_LPM_ON_DEV_SUSPEND;</span><br><span class="line">@@ -4527,6 +4580,7 @@ otg_remove_devices:</span><br><span class="line"> remove_cdev:</span><br><span class="line"> 	pm_runtime_disable(&amp;pdev-&gt;dev);</span><br><span class="line"> 	device_remove_file(&amp;pdev-&gt;dev, &amp;dev_attr_dpdm_pulldown_enable);</span><br><span class="line"><span class="addition">+	device_remove_file(&amp;pdev-&gt;dev, &amp;dev_attr_usbphy_regs);</span></span><br><span class="line"> 	msm_otg_debugfs_cleanup();</span><br><span class="line"> phy_reg_deinit:</span><br><span class="line"> 	devm_regulator_unregister(motg-&gt;phy.dev, motg-&gt;dpdm_rdev);</span><br><span class="line">@@ -4619,6 +4673,7 @@ static int msm_otg_remove(struct platfor</span><br><span class="line"> 	usb_remove_phy(phy);</span><br><span class="line"> </span><br><span class="line"> 	device_remove_file(&amp;pdev-&gt;dev, &amp;dev_attr_dpdm_pulldown_enable);</span><br><span class="line"><span class="addition">+	device_remove_file(&amp;pdev-&gt;dev, &amp;dev_attr_usbphy_regs);</span></span><br><span class="line"> </span><br><span class="line"> 	/*</span><br><span class="line"> 	 * Put PHY in low power mode.</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="trace">trace</h3><p>通过如下指令去 crash 设备，然后用 trace32 去读取寄存器值。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo c &gt; /<span class="keyword">proc</span>/sysrq-triger</span><br></pre></td></tr></table></figure></p>
<h3 id="busybox">busybox</h3><p>dump usb registers via busybox.<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/data/busybox devmem <span class="variable">&lt;address&gt;</span> 32</span><br><span class="line">or </span><br><span class="line">r <span class="variable">&lt;address&gt;</span>  <span class="comment"># system/core/toolbox/r.c , 比 busybox 轻量化的一个工具</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Add_node&quot;&gt;Add node&lt;/h3&gt;&lt;p&gt;此方法只为一个示例，有些平台不是使用此文件，如 SDM450（MSM8953）使用的 dwc3-qcom.c 。&lt;br&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# kernel/msm-4.9/drivers/usb/phy/phy-msm-usb.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;chunk&quot;&gt;@@ -51,6 +51,11 @@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #include &amp;lt;linux/msm-bus.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+#undef dev_dbg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+#define dev_dbg dev_info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+#undef pr_debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+#define pr_debug pr_info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * Requested USB votes for BUS bandwidth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -3601,6 +3606,53 @@ static int msm_otg_setup_devices(struct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	return retval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+#define DUMP_ENTRIES	152&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+static ssize_t usbphy_regs_show(struct device *dev,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+			       struct device_attribute *attr, char *buf)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	struct msm_otg *motg = the_msm_otg;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	//struct msm_otg_platform_data *pdata = motg-&amp;gt;pdata;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	struct usb_phy *phy = &amp;amp;motg-&amp;gt;phy;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	u32 *dump;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	unsigned int i,  n = 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	//dbg_trace(&quot;[%s] %pK\n&quot;, __func__, buf);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	if (attr == NULL || buf == NULL) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		dev_err(dev, &quot;[%s] EINVAL\n&quot;, __func__);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		return 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	if (atomic_read(&amp;amp;motg-&amp;gt;in_lpm))&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	        dev_err(dev, &quot;[%s] usb in lpm\n&quot;, __func__);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		return 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	dump = kmalloc(sizeof(u8) * DUMP_ENTRIES, GFP_KERNEL);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	if (!dump)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		return 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+        for(i = 0; i &amp;lt; DUMP_ENTRIES -1; i++)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+        dump[i] = ulpi_read(phy, i);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	for (i = 0; i &amp;lt; DUMP_ENTRIES -1; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		n += scnprintf(buf + n, PAGE_SIZE - n,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+			       &quot;reg[0x%04X] = 0x%04X\n&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+			       i, dump[i]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	kfree(dump);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	return n;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+static ssize_t usbphy_regs_store(struct device *dev,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		struct device_attribute *attr, const char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		*buf, size_t size)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	return size;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+static DEVICE_ATTR(usbphy_regs, 0644,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+		usbphy_regs_show, usbphy_regs_store);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; static ssize_t dpdm_pulldown_enable_show(struct device *dev,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 			       struct device_attribute *attr, char *buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -4426,6 +4478,7 @@ static int msm_otg_probe(struct platform&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	motg-&amp;gt;caps |= ALLOW_HOST_PHY_RETENTION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	device_create_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_dpdm_pulldown_enable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	device_create_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_usbphy_regs);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	if (motg-&amp;gt;pdata-&amp;gt;enable_lpm_on_dev_suspend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		motg-&amp;gt;caps |= ALLOW_LPM_ON_DEV_SUSPEND;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -4527,6 +4580,7 @@ otg_remove_devices:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remove_cdev:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	pm_runtime_disable(&amp;amp;pdev-&amp;gt;dev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	device_remove_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_dpdm_pulldown_enable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	device_remove_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_usbphy_regs);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	msm_otg_debugfs_cleanup();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; phy_reg_deinit:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	devm_regulator_unregister(motg-&amp;gt;phy.dev, motg-&amp;gt;dpdm_rdev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -4619,6 +4673,7 @@ static int msm_otg_remove(struct platfor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	usb_remove_phy(phy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	device_remove_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_dpdm_pulldown_enable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+	device_remove_file(&amp;amp;pdev-&amp;gt;dev, &amp;amp;dev_attr_usbphy_regs);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	 * Put PHY in low power mode.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.github.io/categories/Android/"/>
    
    
      <category term="Qualcomm" scheme="http://huaqianlee.github.io/tags/Qualcomm/"/>
    
  </entry>
  
  <entry>
    <title>17 小结，18 计划!</title>
    <link href="http://huaqianlee.github.io/2018/02/12/Life/Bye-2017-Hi-2018/"/>
    <id>http://huaqianlee.github.io/2018/02/12/Life/Bye-2017-Hi-2018/</id>
    <published>2018-02-12T05:17:40.000Z</published>
    <updated>2018-02-14T06:08:13.333Z</updated>
    
    <content type="html"><![CDATA[<p>时光总是匆匆，一转眼 18 年都已经 2 月份了，今天是农历新年前倒数第二天上班了。17 年过得不那么顺畅，自己想做的很多事都没做，很遗憾；18 年自己即将 30 岁，想想还是很惶恐，已到而立之年了。这些时间自己的懒散加上工作上的事情，很久没有写东西了，博客也好久没有更新过了，考虑到今年的状态，和明年一些决定，今天来写个小结，列个计划。</p>
<h2 id="遗憾的_17_年">遗憾的 17 年</h2><p>17 年整体来说对自己是有些失望的，生活上遇到了一件让自己痛心的事情，也完成了人生一件最重要的事情，工作上除了薪资的涨幅，自己没有明显的进步，也没有什么成就感。<br><a id="more"></a></p>
<h3 id="徘徊">徘徊</h3><p>本来17年就有回成都的计划了，但是受一些事情的牵绊，走不了，所以这一年很多时候自己处于比较迷茫，比较徘徊的心理状态。 在前公司最后一段时间，自己很早就觉得上班没意思应该要辞职的，但是受到私事的牵绊，也考虑到 18 年要回家发展了，自己就一直耗在公司没有辞职。到后面有朋友介绍工作，终于下定决心换个环境，阴差阳错进到了现在的公司，过来后换了新平台，到现在这几个月事情相对还是比较多，才没有时间去徘徊了。</p>
<h3 id="小结">小结</h3><p>这一年本来有很多事情要去做的， 最重要的两件：学英语、锻炼。 这两件事没有坚持下来，是对自己失望的主因，业余阅读和写作没坚持下来也比较令人伤心，Android、Python等技术的提升没有坚持下来，考虑到外部环境和自己的时间，尚还能让自己接受。所以总的来说 17 年是有些遗憾和失望的。</p>
<h2 id="而立的_18_年">而立的 18 年</h2><p>18 年是自己的而立之年了， 除了准备回家发展，应该还会是我真正成长的一年。希望今年不让自己失望，也要担负起整个家庭的责任了。</p>
<h3 id="习惯养成">习惯养成</h3><p>按照如下模式培养一下自己的习惯，坚持下去。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span>天 -&gt; <span class="number">100</span>天 -&gt; <span class="number">1</span> 年 -&gt; Until disappear</span><br></pre></td></tr></table></figure></p>
<p>18 年按优先级加入如下任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 背单词</span><br><span class="line">- 锻炼</span><br><span class="line">- 冥想</span><br><span class="line">- 阅读</span><br></pre></td></tr></table></figure></p>
<p>还有如下以周为单位的坚持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 博文（每周至少一篇技术 or 阅读 or 生活）</span><br><span class="line">- 陪老婆周边游散心</span><br><span class="line">-</span><br></pre></td></tr></table></figure></p>
<h3 id="生活">生活</h3><h4 id="回成都">回成都</h4><p>预计4~5月份回成都，开年后首要任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 解决工作问题</span><br><span class="line">- 处理回家相关事宜</span><br></pre></td></tr></table></figure></p>
<p>回家稳定后，首要任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 找一家健身房</span><br><span class="line">- 学习游泳</span><br><span class="line">- 买车</span><br></pre></td></tr></table></figure></p>
<h4 id="生活安排">生活安排</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 节假日多陪陪家人，常回家看看</span><br><span class="line">- 为家人安排体检</span><br><span class="line">- 给自己（老婆）买保险</span><br><span class="line">-</span><br></pre></td></tr></table></figure>
<h4 id="几个着重注意点">几个着重注意点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 睡前阅读、冥想</span><br><span class="line">- 碎片时间利用，阅读或背单词</span><br><span class="line">- 早或晚锻炼，至少简单活动一下筋骨（颈椎和腰部是重点部位），尤其自己现在身体太僵硬</span><br></pre></td></tr></table></figure>
<h3 id="工作">工作</h3><h4 id="新工作">新工作</h4><p>首要任务就是找到一个合适的新工作，得满足：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 自己的工作有意义，有挑战</span><br><span class="line">- 公司有发展有潜力，或者不错的大公司</span><br><span class="line">- 薪酬福利不比深圳差太多</span><br></pre></td></tr></table></figure></p>
<h4 id="工作习惯">工作习惯</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 排除干扰、拆分，复杂问题简单化</span><br><span class="line">- 控制变量法，单独提出问题部分，Demo 复现验证及解决</span><br><span class="line">- 知其然知其所以然，总结</span><br></pre></td></tr></table></figure>
<h4 id="工作计划">工作计划</h4><p>这个得依据工作内容来确定，不过得做到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 每天/周做好工作计划</span><br><span class="line">- 不无谓地浪费时间</span><br></pre></td></tr></table></figure></p>
<h3 id="学习">学习</h3><h4 id="阅读内容">阅读内容</h4><p>需要加入阅读内容的任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 古诗词</span><br><span class="line">- 医疗、法律相关书籍</span><br><span class="line">- 理财、优秀书籍</span><br><span class="line">- 英文原著</span><br><span class="line">- 技术书籍</span><br></pre></td></tr></table></figure></p>
<h4 id="一些计划">一些计划</h4><p>一些需要好好实现的安排计划：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 针对每个时间段拟定合适的计划</span><br><span class="line">- 每周审视自己，做好更新/总结</span><br><span class="line">- 至少完成 <span class="number">20</span> 本书籍的阅读，<span class="number">5</span> 本英文原著 + <span class="number">8</span> 本技术书籍 + <span class="number">7</span> 本其他，技术书籍至少 <span class="number">3</span> 本精读</span><br><span class="line">- 每阅读完成一本书籍，至少形成一片博文</span><br><span class="line">- 技术博客的选题和实现质量</span><br></pre></td></tr></table></figure></p>
<h4 id="学习的内容">学习的内容</h4><h5 id="英语">英语</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 背诵完成<span class="number">4</span>、<span class="number">6</span>级单词，后续再选扩展单词背诵</span><br><span class="line">- 阅读合适的英文原著，培养语感，熟悉单词</span><br><span class="line">- 平时技术上尽量看英文相关</span><br><span class="line">- 精读 <span class="number">2</span> 本英文原著，看一些英文文章</span><br><span class="line">- 不限范围的泛听，每周精听一篇文章</span><br><span class="line">- 已购英文资料</span><br></pre></td></tr></table></figure>
<h5 id="技术学习">技术学习</h5><p>考虑到回成都后我或许会小转行一下，这部分需要依据回成都的工作内容来定制，不过如下部分还是安排好时间：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 已购 Linux 书籍，多看精看</span><br><span class="line">- 分析源码（Android、Linux Kernel）</span><br><span class="line">- Android 应用 、 Python（不作高优先级）</span><br><span class="line">- 已购 Android 相关书籍</span><br></pre></td></tr></table></figure></p>
<p>18 年对于我来说注定会是忙碌的一年，有太多的事情需要处理，希望自己能都处理好并完成自己的计划。当然上面这些都是比较笼统的计划，所以自己还需要制定一个目标明确、详细的计划，这个计划还得根据实际情况反馈更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光总是匆匆，一转眼 18 年都已经 2 月份了，今天是农历新年前倒数第二天上班了。17 年过得不那么顺畅，自己想做的很多事都没做，很遗憾；18 年自己即将 30 岁，想想还是很惶恐，已到而立之年了。这些时间自己的懒散加上工作上的事情，很久没有写东西了，博客也好久没有更新过了，考虑到今年的状态，和明年一些决定，今天来写个小结，列个计划。&lt;/p&gt;
&lt;h2 id=&quot;遗憾的_17_年&quot;&gt;遗憾的 17 年&lt;/h2&gt;&lt;p&gt;17 年整体来说对自己是有些失望的，生活上遇到了一件让自己痛心的事情，也完成了人生一件最重要的事情，工作上除了薪资的涨幅，自己没有明显的进步，也没有什么成就感。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
