<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Andy.Lee's bolg]]></title>
  <subtitle><![CDATA[Good good study, day day up !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://huaqianlee.me/"/>
  <updated>2015-07-17T14:18:18.139Z</updated>
  <id>http://huaqianlee.me/</id>
  
  <author>
    <name><![CDATA[Andy.Lee]]></name>
    <email><![CDATA[huaqianlee@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android编译过程详解之三]]></title>
    <link href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/"/>
    <id>http://huaqianlee.me/2015/07/12/Android编译过程详解之三/</id>
    <published>2015-07-12T08:43:04.000Z</published>
    <updated>2015-07-17T14:18:18.139Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a></p>
<p>　　前两个篇基本完全涉及到了整个编译过程，接下来着重分析一下和公司产品相关的mk文件。有两个路径前面没有怎么提到过，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/target/product <span class="comment"># 当前产品配置的mk文件，如：需要包含哪些apk在此产品中</span></span><br><span class="line">build/target/board  <span class="comment"># 硬件芯片配置的mk文件，如：GPU、是否支持浮点运算等</span></span><br></pre></td></tr></table></figure></p>
<p>　　除以上两个路径外，对产品定义的文件通常位于device目录下，还可以定义在vender目录下（不过Google已不建议如此做了），device目录下根据公司名和产品名分为两级目录，这个上文已经介绍过。通常一个产品定义如下四个文件：</p>
<ul>
<li>AndroidProducts.mk </li>
<li>产品版本定义文件（一般针对不同应用环境存在多个，如：msm8916_32.mk）</li>
<li>BoardConfig.mk</li>
<li>verndorsetup.sh</li>
</ul>
<h2 id="AndroidProducts-mk">AndroidProducts.mk</h2><a id="more"></a>
<p>此文件定义PRODUCT_MAKEFILES ，用来导入产品版本配置文件列表，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. build\target\product\AndroidProducts.mk  ＃定义默认产品配置文件</span><br><span class="line">ifneq ($(TARGET_BUILD_APPS),)　＃根据TARGET_BUILD_APPS确定编译那些APP，TARGET_BUILD_APPS由上文envsetup.sh中的命令指定</span><br><span class="line">PRODUCT_MAKEFILES := \</span><br><span class="line">    $(LOCAL_DIR)/aosp_arm.mk \</span><br><span class="line">    $(LOCAL_DIR)/full.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_armv5.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_mips.mk</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PRODUCT_MAKEFILES := \</span><br><span class="line">    $(LOCAL_DIR)/core.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_arm.mk \</span><br><span class="line">    $(LOCAL_DIR)/full.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/vbox_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/large_emu_hw.mk</span><br><span class="line">endif</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="number">2</span>. device\qcom\msm8916_32\AndroidProducts.mk  <span class="comment"># 自定义产品配置文件，内容如下：</span></span><br><span class="line">　PRODUCT_MAKEFILES := \</span><br><span class="line">	　$(LOCAL_DIR)/msm8916_32.mk</span><br></pre></td></tr></table></figure></p>
<h2 id="产品版本定义文件">产品版本定义文件</h2><p>对于我用到文件则为msm8916_32.mk，主要定义此产品版本要编入哪些东西，主要变量如下：</p>
<h3 id="产品版本定义文件定义变量">产品版本定义文件定义变量</h3><table>
<thead>
<tr>
<th>常量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRODUCT_NAME</td>
<td>最终用户将看到的完整产品名，会出现在“关于手机”信息中</td>
</tr>
<tr>
<td>PRODUCT_MODEL</td>
<td>产品的型号，这也是最终用户将看到的</td>
</tr>
<tr>
<td>PRODUCT_LOCALES</td>
<td>该产品支持的地区，以空格分格，例如：en_GB de_DE es_ES fr_CA</td>
</tr>
<tr>
<td>PRODUCT_PACKAGES</td>
<td>该产品版本中包含的 APK 应用程序，以空格分格，例如：Calendar Contacts</td>
</tr>
<tr>
<td>PRODUCT_DEVICE</td>
<td>该产品的工业设计的名称</td>
</tr>
<tr>
<td>PRODUCT_MANUFACTURER</td>
<td>制造商的名称</td>
</tr>
<tr>
<td>PRODUCT_BRAND</td>
<td>该产品专门定义的商标（如果有的话）</td>
</tr>
<tr>
<td>PRODUCT_PROPERTY_OVERRIDES</td>
<td>对于商品属性的定义</td>
</tr>
<tr>
<td>PRODUCT_COPY_FILES</td>
<td>编译该产品时需要拷贝的文件，以“源路径 : 目标路径”的形式</td>
</tr>
<tr>
<td>PRODUCT_OTA_PUBLIC_KEYS</td>
<td>对于该产品的 OTA 公开 key 的列表</td>
</tr>
<tr>
<td>PRODUCT_POLICY</td>
<td>产品使用的策略</td>
</tr>
<tr>
<td>PRODUCT_PACKAGE_OVERLAYS</td>
<td>指出是否要使用默认的资源或添加产品特定定义来覆盖</td>
</tr>
<tr>
<td>PRODUCT_CONTRIBUTORS_FILE</td>
<td>HTML 文件，其中包含项目的贡献者</td>
</tr>
<tr>
<td>PRODUCT_TAGS</td>
<td>该产品的标签，以空格分格</td>
</tr>
</tbody>
</table>
<h3 id="msm8916_32-mk">msm8916_32.mk</h3><p>此文件除了引入定义以上变量以外，还有如下关键代码：　<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(call inherit-product, device/qcom/common/common.mk) <span class="comment"># 继承common.mk，此文件定义了很多值为配置文件、脚本文件的常量</span></span><br><span class="line"></span><br><span class="line">-include $(QCPATH)/common/config/rendering-engine.mk <span class="comment"># （字体渲染引擎开关）font rendering engine feature switch</span></span><br><span class="line">-include $(TOP)/customer/oem_common.mk <span class="comment"># 自定义，引入一些定制变量</span></span><br></pre></td></tr></table></figure></p>
<h2 id="BoardConfig-mk">BoardConfig.mk</h2><p>　　该文件用来配置硬件主板，它其中定义的都是设备底层的硬件特性。例如：该设备的主板相关信息，Wifi 相关信息，还有 bootloader，内核，radioimage 等信息。对于该文件的示例，请参看 Android 源码树已经有的文件。</p>
<h2 id="vendorsetup-sh">vendorsetup.sh</h2><p>　　该文件中作用是通过 add_lunch_combo 函数在 lunch 函数中添加一个菜单选项。该函数的参数是产品名称加上编译类型，中间以“-”连接，例如：add_lunch_combo full_lt26-userdebug。/build/envsetup.sh 会扫描所有 device 和 vender 二 级目 录下的名称 为”vendorsetup.sh”文件，并根据其中的内容来确定 lunch 函数的 菜单选项。</p>
<h2 id="后记">后记</h2><p>　　只有代码不会说谎，此文可能过时, 不过可以给你一个大致的脉络，然后再跟一下代码，就ok了。另，如需了解模块mk文件，参考我的另一篇博文：<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a>。我写这系列博客，主要参考了Google官网和另外两篇网上Google出来的文章，地址见下References，感谢Google，感谢另两篇文章的作者。
　　　</p>
<h2 id="References">References</h2><p><a href="http://source.android.com/source/initializing.html" target="_blank" rel="external">http://source.android.com/source/initializing.html</a> （需翻墙）<br><a href="http://source.android.com/source/building.html" target="_blank" rel="external">http://source.android.com/source/building.html</a> （需翻墙）<br><a href="http://www.cnblogs.com/mr-raptor/archive/2012/06/07/2540359.html" target="_blank" rel="external">http://www.cnblogs.com/mr-raptor/archive/2012/06/07/2540359.html</a><br><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a></p>
<p>　　前两个篇基本完全涉及到了整个编译过程，接下来着重分析一下和公司产品相关的mk文件。有两个路径前面没有怎么提到过，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/target/product <span class="comment"># 当前产品配置的mk文件，如：需要包含哪些apk在此产品中</span></span><br><span class="line">build/target/board  <span class="comment"># 硬件芯片配置的mk文件，如：GPU、是否支持浮点运算等</span></span><br></pre></td></tr></table></figure></p>
<p>　　除以上两个路径外，对产品定义的文件通常位于device目录下，还可以定义在vender目录下（不过Google已不建议如此做了），device目录下根据公司名和产品名分为两级目录，这个上文已经介绍过。通常一个产品定义如下四个文件：</p>
<ul>
<li>AndroidProducts.mk </li>
<li>产品版本定义文件（一般针对不同应用环境存在多个，如：msm8916_32.mk）</li>
<li>BoardConfig.mk</li>
<li>verndorsetup.sh</li>
</ul>
<h2 id="AndroidProducts-mk">AndroidProducts.mk</h2>]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译过程详解之二]]></title>
    <link href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/"/>
    <id>http://huaqianlee.me/2015/07/12/Android编译过程详解之二/</id>
    <published>2015-07-12T08:43:04.000Z</published>
    <updated>2015-07-16T14:33:55.278Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a><br>　<br>　　配置好环境变量后，接下来要做的就是build了。为了提高编译速度，我们自定义了一个go.sh的脚本文件，详细下面解释。另，编译的时候一般会在后面加一个-j8来实现多线程编译，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　./go.sh -j8 or make -j8／--jobs</span><br></pre></td></tr></table></figure></p>
<p>参数“-j“ 和”—jobs ”指定了同时编译的线程数量，通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将编译默认目标“droid”（下面详解），然后将会编译出完整的 Android 系统镜像。</p>
<h2 id="build系统分类">build系统分类</h2><p>　　整个build系统的Make文件可以分为三类：</p>
<ol>
<li>build系统核心文件：定义整个build系统的框架，其他所有make文件都是在这个框架的基础上写出来的。</li>
<li>产品的make文件：位于device目录，通常以公司名和产品名分为两级目录，如：\device\qcom\msm8916_32。</li>
<li>模块的make文件：每个模块专用的make文件，kernel中统一名字为Makefile，其他为Android.mk。　</li>
</ol>
<h2 id="build结果">build结果</h2><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：</p>
<ul>
<li>/out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。</li>
<li>/out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。</li>
<li>/out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。</product_name></product_name></li>
<li>/out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。<a id="more"></a>
Build 的产物中最重要的是几个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。</product_name></li>
<li>system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载到根分区，描述的是设备上的system分区，即/system目录。</li>
<li>ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像、文件系统，并启动 init 进程。</li>
<li>userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。</li>
<li>boot.img：包含有Kernel及其启动参数、Ramdisk，以及可选的BootLoader第二阶段。</li>
<li>recovery.img：设备进入recovery模式时所加载的镜像，相当于除正常启动系统的第二系统，此系统用来更新正常系统，即刷机。</li>
</ul>
<h2 id="go-sh">go.sh</h2><p>先来分析一下go.sh文件，其代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"OEM_PROJECT_NAME=<span class="variable">$OEM_PROJECT_NAME</span>"</span></span><br><span class="line">start_time=`date +%s`</span><br><span class="line"><span class="built_in">source</span> customer/oem_define.sh <span class="comment"># 导入OEM厂商配置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_ccache</span></span>() &#123;　＃设置ccache，提高编译速度</span><br><span class="line">    <span class="built_in">export</span> CCACHE_DIR=../.ccache</span><br><span class="line">    <span class="built_in">export</span> USE_CCACHE=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="operator">-d</span> <span class="variable">$CCACHE_DIR</span> ];<span class="keyword">then</span> </span><br><span class="line">    	prebuilts/misc/linux-x86/ccache/ccache -M <span class="number">10</span>G　　＃设置编译文件缓存大小为<span class="number">10</span>G</span><br><span class="line">    <span class="keyword">fi</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">delete_ccache</span></span>() &#123; <span class="comment"># 删除缓存</span></span><br><span class="line">    prebuilts/misc/linux-x86/ccache/ccache -C</span><br><span class="line">    rm -rf <span class="variable">$CCACHE_DIR</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup_ccache <span class="comment"># 调用setup_ccache()</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"clean"</span> ];<span class="keyword">then</span>  <span class="comment">#如果第一个参数为clean，清除ccache缓存</span></span><br><span class="line">	delete_ccache</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">oemtools/copy_mp.sh  <span class="comment"># copy modem bin文件</span></span><br><span class="line">make <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span> <span class="variable">$5</span>  <span class="comment"># 调用Makefile编译，下面详解 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_time=`date +%s`</span><br><span class="line"><span class="built_in">let</span> min=(<span class="variable">$end_time</span>-<span class="variable">$start_time</span>)/<span class="number">60</span></span><br><span class="line"><span class="built_in">let</span> sec=(<span class="variable">$end_time</span>-<span class="variable">$start_time</span>)%<span class="number">60</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"build_time <span class="variable">$min</span> mins <span class="variable">$sec</span> seconds"</span>  <span class="comment">#打印编译时间</span></span><br></pre></td></tr></table></figure></p>
<h2 id="make">make</h2><p>　　执行make命令的时候会执行当前路径的Makefile文件，内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### DO NOT EDIT THIS FILE ###</span></span><br><span class="line">include build/core/main.mk 　　</span><br><span class="line"><span class="comment">### DO NOT EDIT THIS FILE ###</span></span><br></pre></td></tr></table></figure></p>
<p>　　相信上面的文件大家都能看懂，接下来就解析一下main.mk，此文件中定义了整个Android的编译关系，主要文件（黄色背景除$开头的文件皆位于build\core\目录下）关系如下：<br><img src="http://7xjdax.com1.z0.glb.clouddn.com/20150711Makemain_mk.png" alt="make"></p>
<h3 id="main-mk">main.mk</h3><p>　　此文件首先对编译环境进行检查，然后引入其他相关mk文件，另，还将定义几个主要的make目标，如droid，sdk等，关键代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要引入了如下mk文件</span></span><br><span class="line">include $(BUILD_SYSTEM)/help.mk <span class="comment"># Targets that provide quick help on the build system.</span></span><br><span class="line">-include $(OEM_RESOURCE_DIR)/CustomerSpec.mk <span class="comment"># 自定义，引入项目配置文件</span></span><br><span class="line">-include $(TOP)/customer/oem_define.mk <span class="comment"># 导入OEM厂商配置</span></span><br><span class="line">-include $(BUILD_SYSTEM)/config.mk <span class="comment">#整个build系统的配置文件</span></span><br><span class="line">-include $(BUILD_SYSTEM)/cleanbuild.mk <span class="comment"># 允许强制清除编译文件</span></span><br><span class="line">-include vendor/google/build/config.mk <span class="comment">#Google特性配置</span></span><br><span class="line">-include $(BUILD_SYSTEM)/definitions.mk <span class="comment"># 引入Build 系统其他文件将用到的函数和全局变量定义。例如：</span></span><br><span class="line">    my-dir : 当前路径</span><br><span class="line">    all-subdir-makefiles ：当前目录及子目录Makefile文件</span><br><span class="line">    all-subdir-java-files：当前目录及子目录java文件</span><br><span class="line">    all-java-files-under： 指定目录及子目录java文件</span><br><span class="line">    sign-package ： 对package签名</span><br><span class="line">    include $(BUILD_SYSTEM)/distdir.mk <span class="comment"># 定义dist目标，dist目标用来拷贝文件到指定路径</span></span><br><span class="line">-include $(BUILD_SYSTEM)/dex_preopt.mk <span class="comment"># 针对启动jar包的预优化</span></span><br><span class="line">-include build/core/pdk_config.mk <span class="comment"># pdk（Platform Development Kit）的配置包</span></span><br><span class="line">-include $(BUILD_SYSTEM)/post_clean.mk  <span class="comment"># 在前一次 Build 的基础上检查当前 Build 的配置，并执行必要清理工作</span></span><br><span class="line">-include $(BUILD_SYSTEM)/legacy_prebuilts.mk <span class="comment"># 定义GRANDFATHERED_ALL_PREBUILT </span></span><br><span class="line">-include $(BUILD_SYSTEM)/Makefile <span class="comment"># main.mk的辅助文件</span></span><br><span class="line">-include $(BUILD_SYSTEM)/help.mk <span class="comment"># 列出主要的make目标及其说明</span></span><br><span class="line">-include $(ONE_SHOT_MAKEFILE) <span class="comment"># 一个变量，当使用“mm”编译时，值为当前指定路径下的mk文件路径</span></span><br><span class="line">...</span><br><span class="line">DEFAULT_GOAL := droid <span class="comment"># 定义默认make目标</span></span><br><span class="line"><span class="comment"># 依据不同编译条件，包含不同目录</span></span><br><span class="line">subdirs += build/tools/acp</span><br><span class="line">subdirs := $(TOP)</span><br><span class="line"><span class="comment"># 导入所有Android.mk,顶层Android.mk下详解</span></span><br><span class="line">subdir_makefiles := \</span><br><span class="line">	$(shell build/tools/findleaves.py --prune=$(OUT_DIR)  --prune=.repo --prune=.git --prune=kernel --prune=prj_out --prune=links --prune=.svn $(subdirs) Android.mk)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>编译器平台相关的mk文件在build\core\combo路径下，如：javac.mk、select.mk等　</p>
</blockquote>
<p>另，因定义了DEFAULT_GOAL := droid，当在根目录输入“Make”时，实际上就等同于我们执行“make droid”。加载include的所有文件，完成对所有mk文件的解析以后就会寻找生成droid的规则，依次生成它的依赖，直到所有满足的模块被编译好，然后使用相应的工具打包成相应的img。　</p>
<p>　droid目标依赖于很多其他目标，这些目标相互配合实现了整个系统的编译，droid依赖的其他make目标关系如下图：<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogdroid.png" alt="droid依赖目标关系图">　</p>
<p>　build系统中的一些make目标如下：</p>
<h3 id="droid的依赖目标">droid的依赖目标</h3><table>
<thead>
<tr>
<th>目标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(modules_to_install)</td>
<td>modules_to_install 变量包含了当前配置下所有会被安装的模块（一个模块是否会被安装依赖于该产品的配置文件，模块的标签等信息），因此该目标将导致所有会被安装的模块的编译</td>
</tr>
<tr>
<td>$(modules_to_check)</td>
<td>该目标用来确保我们定义的构建模块是没有冗余的</td>
</tr>
<tr>
<td>$(INSTALLED_ANDROID_INFO_TXT_TARGET)</td>
<td>该目标会生成一个关于当前 Build 配置的设备信息的文件，该文件的生成路径是：out/target/product/<product_name>/android-info.txt</product_name></td>
</tr>
<tr>
<td>systemimage</td>
<td>生成 system.img</td>
</tr>
<tr>
<td>$(INSTALLED_BOOTIMAGE_TARGET)</td>
<td>生成 boot.img</td>
</tr>
<tr>
<td>$(INSTALLED_RECOVERYIMAGE_TARGET)</td>
<td>生成 recovery.img</td>
</tr>
<tr>
<td>$(INSTALLED_USERDATAIMAGE_TARGET)</td>
<td>生成 userdata.img</td>
</tr>
<tr>
<td>$(INSTALLED_CACHEIMAGE_TARGET)</td>
<td>生成 cache.img</td>
</tr>
<tr>
<td>$(INSTALLED_FILES_FILE)</td>
<td>该目标会生成 out/target/product/<product_name>/ installed-files.txt 文件，该文件中内容是当前系统镜像中已经安装的文件列表</product_name></td>
</tr>
</tbody>
</table>
<h3 id="其他主要目标">其他主要目标</h3><table>
<thead>
<tr>
<th>目标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>make clean</td>
<td>执行清理，等同于：rm -rf out/</td>
</tr>
<tr>
<td>make sdk</td>
<td>编译出 Android 的 SDK</td>
</tr>
<tr>
<td>make clean-sdk</td>
<td>清理 SDK 的编译产物</td>
</tr>
<tr>
<td>make update-api</td>
<td>更新 API。在 framework API 改动之后，需要首先执行该命令来更新 API，公开的 API 记录在 frameworks/base/api 目录下</td>
</tr>
<tr>
<td>make dist</td>
<td>执行 Build，并将 MAKECMDGOALS 变量定义的输出文件拷贝到 /out/dist 目录</td>
</tr>
<tr>
<td>make all</td>
<td>编译所有内容，不管当前产品的定义中是否会包含</td>
</tr>
<tr>
<td>make help</td>
<td>帮助信息，显示主要的 make 目标</td>
</tr>
<tr>
<td>make snod</td>
<td>从已经编译出的包快速重建系统镜像</td>
</tr>
<tr>
<td>make libandroid_runtime</td>
<td>编译所有 JNI framework 内容</td>
</tr>
<tr>
<td>make framework</td>
<td>编译所有 Java framework 内容</td>
</tr>
<tr>
<td>make services</td>
<td>编译系统服务和相关内容</td>
</tr>
<tr>
<td>make <local_target></local_target></td>
<td>编译一个指定的模块，local_target 为模块的名称</td>
</tr>
<tr>
<td>make clean-<local_target></local_target></td>
<td>清理一个指定模块的编译结果</td>
</tr>
<tr>
<td>make dump-products</td>
<td>显示所有产品的编译配置信息，例如：产品名，产品支持的地区语言，产品中会包含的模块等信息</td>
</tr>
<tr>
<td>make PRODUCT-xxx-yyy</td>
<td>编译某个指定的产品</td>
</tr>
<tr>
<td>make bootimage</td>
<td>生成 boot.img</td>
</tr>
<tr>
<td>make recoveryimage</td>
<td>生成 recovery.img</td>
</tr>
<tr>
<td>make userdataimage</td>
<td>生成 userdata.img</td>
</tr>
<tr>
<td>make cacheimage</td>
<td>生成 cache.img</td>
</tr>
</tbody>
</table>
<h3 id="build\core\config-mk">build\core\config.mk</h3><p>　　此文件是最重要的mk文件之一，主要定义不同模块的编译常量、编译参数及常见文件后缀（如.zip,.jar,.apk）；根据BoardConfig.mk配置产品相关参数；设置常用工具的路径。其主要源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义标准源文件路径等的环境变量</span></span><br><span class="line">SRC_HEADERS := \</span><br><span class="line">	$(TOPDIR)system/core/include \</span><br><span class="line">	$(TOPDIR)hardware/libhardware/include \</span><br><span class="line">	$(TOPDIR)hardware/libhardware_legacy/include \</span><br><span class="line">	$(TOPDIR)hardware/ril/include \</span><br><span class="line">	$(TOPDIR)libnativehelper/include \</span><br><span class="line">	$(TOPDIR)frameworks/native/include \</span><br><span class="line">	$(TOPDIR)frameworks/native/opengl/include \</span><br><span class="line">	$(TOPDIR)frameworks/av/include \</span><br><span class="line">	$(TOPDIR)frameworks/base/include \</span><br><span class="line">	$(TOPDIR)external/skia/include</span><br><span class="line">SRC_HOST_HEADERS:=$(TOPDIR)tools/include  </span><br><span class="line">SRC_LIBRARIES:= $(TOPDIR)libs</span><br><span class="line">SRC_SERVERS:= $(TOPDIR)servers</span><br><span class="line">SRC_TARGET_DIR := $(TOPDIR)build/target</span><br><span class="line">SRC_API_DIR := $(TOPDIR)prebuilts/sdk/api</span><br><span class="line">...</span><br><span class="line">include $(BUILD_SYSTEM)/dumpvar.mk  <span class="comment"># build之前显示此次build的配置信息</span></span><br><span class="line">include $(BUILD_SYSTEM)/pathmap.mk <span class="comment"># 将许多头文件的路径通过名值对的方式定义为映射表，并提供 include-path-for 函数来获取。如，通过$(call include-path-for, frameworks-native)便可以获取到 framework 本地代码需要的头文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编译命令常量，对应相关mk文件，每个常量描述一种类型模块的编译方式</span></span><br><span class="line">BUILD_COMBOS:= $(BUILD_SYSTEM)/combo <span class="comment"># 编译器平台相关mk文件</span></span><br><span class="line">CLEAR_VARS:= $(BUILD_SYSTEM)/clear_vars.mk <span class="comment"># 清除之前定义环境变量</span></span><br><span class="line">BUILD_HOST_STATIC_LIBRARY:= $(BUILD_SYSTEM)/host_static_library.mk  <span class="comment"># 编译主机静态库，指编译此系统的主机，即PC</span></span><br><span class="line">BUILD_HOST_SHARED_LIBRARY:= $(BUILD_SYSTEM)/host_shared_library.mk <span class="comment"># 编译主机动态库</span></span><br><span class="line">BUILD_STATIC_LIBRARY:= $(BUILD_SYSTEM)/static_library.mk <span class="comment"># 编译设备静态库</span></span><br><span class="line">BUILD_RAW_STATIC_LIBRARY := $(BUILD_SYSTEM)/raw_static_library.mk <span class="comment"># 编译原生静态库</span></span><br><span class="line">BUILD_SHARED_LIBRARY:= $(BUILD_SYSTEM)/shared_library.mk <span class="comment"># 编译设备动态库</span></span><br><span class="line">BUILD_EXECUTABLE:= $(BUILD_SYSTEM)/executable.mk <span class="comment"># 编译设备可执行文件</span></span><br><span class="line">BUILD_RAW_EXECUTABLE:= $(BUILD_SYSTEM)/raw_executable.mk <span class="comment"># 编译原生可执行文件</span></span><br><span class="line">BUILD_HOST_EXECUTABLE:= $(BUILD_SYSTEM)/host_executable.mk <span class="comment"># 编译主机可执行文件</span></span><br><span class="line">BUILD_PACKAGE:= $(BUILD_SYSTEM)/package.mk <span class="comment"># 编译apk文件</span></span><br><span class="line">BUILD_PHONY_PACKAGE:= $(BUILD_SYSTEM)/phony_package.mk <span class="comment"># </span></span><br><span class="line">BUILD_HOST_PREBUILT:= $(BUILD_SYSTEM)/host_prebuilt.mk <span class="comment"># 处理一个或多个主机使用的已编译文件，依赖multi_prebuilt.mk</span></span><br><span class="line">BUILD_PREBUILT:= $(BUILD_SYSTEM)/prebuilt.mk <span class="comment"># 处理一个已经编译好的文件，如：jar包</span></span><br><span class="line">BUILD_MULTI_PREBUILT:= $(BUILD_SYSTEM)/multi_prebuilt.mk <span class="comment"># 处理一个或多个已编译文件，依赖prebuilt.mk</span></span><br><span class="line">BUILD_JAVA_LIBRARY:= $(BUILD_SYSTEM)/java_library.mk <span class="comment"># 编译设备动态java库</span></span><br><span class="line">BUILD_STATIC_JAVA_LIBRARY:= $(BUILD_SYSTEM)/static_java_library.mk <span class="comment"># 编译设备静态java库 </span></span><br><span class="line">BUILD_HOST_JAVA_LIBRARY:= $(BUILD_SYSTEM)/host_java_library.mk  <span class="comment"># 编译主机动态java库</span></span><br><span class="line">BUILD_DROIDDOC:= $(BUILD_SYSTEM)/droiddoc.mk</span><br><span class="line">BUILD_COPY_HEADERS := $(BUILD_SYSTEM)/copy_headers.mk</span><br><span class="line">BUILD_NATIVE_TEST := $(BUILD_SYSTEM)/native_test.mk</span><br><span class="line">BUILD_HOST_NATIVE_TEST := $(BUILD_SYSTEM)/host_native_test.mk</span><br><span class="line">BUILD_NOTICE_FILE := $(BUILD_SYSTEM)/notice_files.mk</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">include $(BUILD_SYSTEM)/envsetup.mk <span class="comment">#定义全局变量、用户特殊编译配置等 ，下详解</span></span><br><span class="line"><span class="comment"># Boards may be defined under $(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)</span></span><br><span class="line"><span class="comment"># or under vendor/*/$(TARGET_DEVICE).  Search in both places, but</span></span><br><span class="line"><span class="comment"># make sure only one exists.</span></span><br><span class="line"><span class="comment"># Real boards should always be associated with an OEM vendor.</span></span><br><span class="line"><span class="comment">#在$(SRC_TARGET_DIR)/board/$(TARGET_DEVICE) 或vendor/*/$(TARGET_DEVICE)中搜索BoardConfig.mk文件，但两个路径中只能存在一个mk文件</span></span><br><span class="line">board_config_mk := \</span><br><span class="line">	$(strip $(wildcard \</span><br><span class="line">		$(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)/BoardConfig.mk \</span><br><span class="line">		$(shell <span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">4</span> -path <span class="string">'*/$(TARGET_DEVICE)/BoardConfig.mk'</span>) \</span><br><span class="line">		$(shell <span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">4</span> -path <span class="string">'*/$(TARGET_DEVICE)/BoardConfig.mk'</span>) \</span><br><span class="line">	))</span><br><span class="line">ifeq ($(board_config_mk),)</span><br><span class="line">  $(error No config file found <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(words $(board_config_mk)),<span class="number">1</span>)</span><br><span class="line">  $(error Multiple board config files <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE): $(board_config_mk))</span><br><span class="line">endif</span><br><span class="line">include $(board_config_mk)</span><br><span class="line">ifeq ($(TARGET_ARCH),)</span><br><span class="line">  $(error TARGET_ARCH not defined by board config: $(board_config_mk))</span><br><span class="line">endif</span><br><span class="line">TARGET_DEVICE_DIR := $(patsubst %/,%,$(dir $(board_config_mk)))</span><br><span class="line">board_config_mk :=</span><br></pre></td></tr></table></figure></p>
<p>　　不同类型的模块的编译过程会有一些相同的步骤，例如：编译一个 Java 库和编译一个 APK 文件都需要定义如何编译 Java 文件。因此，config.mk中导入的mk 文件的定义中会包含一些共同的代码逻辑。为了减少代码冗余，将共同的代码复用起来，将共同代码放到专门的文件中，然后在其他文件中包含这些文件的方式来实现的。这些包含关系如下图所示：<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogmk.png" alt="模块mk文件的关系"></p>
<h3 id="build\core\_envsetup-mk">build\core\ envsetup.mk</h3><p>此文件主要包括product_config.mk文件，配置build系统需要的环境变量，确定当前编译的主机平台信息，然后指定编译时输出文件的OUT目录。部分关键代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The product defaults to generic on hardware</span></span><br><span class="line"><span class="comment"># NOTE: This will be overridden in product_config.mk if make</span></span><br><span class="line"><span class="comment"># was invoked with a PRODUCT-xxx-yyy goal.</span></span><br><span class="line">ifeq ($(TARGET_PRODUCT),)</span><br><span class="line">TARGET_PRODUCT := full</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># the variant -- the set of files that are included for a build</span></span><br><span class="line">ifeq ($(strip $(TARGET_BUILD_VARIANT)),)</span><br><span class="line">TARGET_BUILD_VARIANT := eng</span><br><span class="line">endif</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Read the product specs so we an get TARGET_DEVICE and other</span></span><br><span class="line"><span class="comment"># variables that we need in order to locate the output files.</span></span><br><span class="line">include $(BUILD_SYSTEM)/product_config.mk</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 指定编译文件输出路径</span></span><br><span class="line">ifeq (,$(strip $(OUT_DIR)))</span><br><span class="line">ifeq (,$(strip $(OUT_DIR_COMMON_BASE)))</span><br><span class="line">OUT_DIR := $(TOPDIR)out</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">OUT_DIR := $(OUT_DIR_COMMON_BASE)/$(notdir $(PWD))</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line">DEBUG_OUT_DIR := $(OUT_DIR)/debug </span><br><span class="line">PRODUCT_OUT := $(TARGET_PRODUCT_OUT_ROOT)/$(TARGET_DEVICE)</span><br><span class="line">TARGET_OUT_JAVA_LIBRARIES:= $(TARGET_OUT)/framework</span><br><span class="line">TARGET_OUT_INTERMEDIATES := $(PRODUCT_OUT)/obj</span><br><span class="line">TARGET_OUT := $(PRODUCT_OUT)/$(TARGET_COPY_OUT_SYSTEM)</span><br><span class="line">TARGET_OUT_CACHE := $(PRODUCT_OUT)/cache</span><br><span class="line">```　</span><br><span class="line"><span class="comment">## build\core\ product_config.mk</span></span><br><span class="line">此文件主要根据lunch选择的编译项读取device目录或vendor目录下不同厂商自己定义的AndroidProducts.mk文件，内包含目标产品配置文件，如：msm8916_32.mk；</span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">include $(BUILD_SYSTEM)/node_fns.mk</span><br><span class="line">include $(BUILD_SYSTEM)/product.mk</span><br><span class="line">include $(BUILD_SYSTEM)/device.mk </span><br><span class="line">...</span><br><span class="line"><span class="comment"># Import all product makefiles.</span></span><br><span class="line">$(call import-products, $(all_product_makefiles)) <span class="comment"># 找到并导入所有Makefile</span></span><br><span class="line"> <span class="comment"># Import all or just the current product makefile</span></span><br><span class="line">$(call import-products, $(current_product_makefile)) <span class="comment"># 找到并导入当前产品的Makefile</span></span><br><span class="line">$(check-all-products) <span class="comment"># 完整性检查</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 调用resolve-short-product-name函数，返回TARGET_PRODUCT的配置文件目录</span></span><br><span class="line">INTERNAL_PRODUCT := $(call resolve-short-product-name, $(TARGET_PRODUCT))</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Find the device that this product maps to.</span></span><br><span class="line">TARGET_DEVICE := $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEVICE) <span class="comment"># 获得目标设备名</span></span><br><span class="line"><span class="comment">#如：INTERNAL_PRODUCT = device\qcom\msm8916_32\msm8916_32.mk</span></span><br><span class="line">    TARGET_DEVICE  = msm8916_32</span><br></pre></td></tr></table></figure></p>
<h3 id="build\core\_product-mk">build\core\ product.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取所有AndroidProducts.mk文件</span></span><br><span class="line">define _find-android-products-files</span><br><span class="line">$(shell <span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">6</span> -name AndroidProducts.mk) \</span><br><span class="line">  $(shell <span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">6</span> -name AndroidProducts.mk) \</span><br><span class="line">  $(SRC_TARGET_DIR)/product/AndroidProducts.mk</span><br><span class="line">endef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取AndroidProducts.mk文件中设置的所有PRODUCT_MAKEFILES变量序列（其实为产品配置文件路径）</span></span><br><span class="line">define get-all-product-makefiles</span><br><span class="line">$(call get-product-makefiles,$(_find-android-products-files))</span><br><span class="line">endef</span><br></pre></td></tr></table></figure>
<h3 id="build\core\_device-mk">build\core\ device.mk</h3><p>这个文件没怎么看懂， 大致就是定义变量、根据device名字获得mk文件路径、检查device的必须变量是否被定义之类的，以后有闲功夫再研究。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_device_var_list := \</span><br><span class="line">    DEVICE_NAME \</span><br><span class="line">    DEVICE_BOARD \</span><br><span class="line">    DEVICE_REGION</span><br><span class="line"></span><br><span class="line">define dump-device</span><br><span class="line">$(info ==== $(<span class="number">1</span>) ====)\</span><br><span class="line">$(foreach v,$(_device_var_list),\</span><br><span class="line">$(info DEVICES.$(<span class="number">1</span>).$(v) := $(DEVICES.$(<span class="number">1</span>).$(v))))\</span><br><span class="line">$(info --------)</span><br><span class="line"></span><br><span class="line">endefdefine import-devices</span><br><span class="line">$(call import-nodes,DEVICES,$(<span class="number">1</span>),$(_device_var_list))</span><br><span class="line"></span><br><span class="line">define _resolve-short-device-name</span><br></pre></td></tr></table></figure></p>
<h3 id="build\core\_node_fns-mk">build\core\ node_fns.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define clear-var-list $(foreach v,$(<span class="number">1</span>),$(<span class="built_in">eval</span> $(v):=)) <span class="comment"># 清除用“:=”的变量名</span></span><br><span class="line">define copy-var-list $(foreach v,$(<span class="number">2</span>),$(<span class="built_in">eval</span> $(strip $(<span class="number">1</span>)).$(v):=$($(v)))) <span class="comment"># 拷贝变量名</span></span><br><span class="line">define move-var-list </span><br><span class="line"></span><br><span class="line">define import-nodes  $(<span class="number">1</span>) $(<span class="number">2</span>) $(<span class="number">3</span>) <span class="comment"># 导入变量，此定义需要三个入口参数：</span></span><br><span class="line">$(<span class="number">1</span>)是一个字串，是输出变量的主干名。例如”PRODUCTS<span class="string">"和”DEVICES“</span><br><span class="line"><span class="variable">$(2)</span>是一个makefile文件列表，这些文件中应该含有对<span class="variable">$(3)</span>中变量的定义</span><br><span class="line"><span class="variable">$(3)</span>是一个变量列表</span><br><span class="line">  import-nodes会创建这样形式的变量，例如：<span class="variable">$(1)</span>="</span>PRODUCTS<span class="string">",<span class="variable">$(2)</span>中含有"</span>build/target/product/core.mk<span class="string">", <span class="variable">$(3)</span>中含有"</span>PRODUCT_NAME<span class="string">",而core.mk中定义了PRODUCT_NAME:=core，则变量为：PRODUCT.build/target/product/core.mk.PRODUCT_NAME:=core。</span><br><span class="line">  import-nodes中还考虑了inherit（即继承）的问题，如果某个PRODUCT.xxx.xxx变量的值中有‘@inherit:&lt;mk文件&gt;’标识，则会把那个mk文件中相应的变量的属性添加到PRODUCT.xxx.xxx中。'@inherit:&lt;mk文件&gt;'是通过inherit-product命令添加的。这个函数定义在product.mk里面。 </span><br><span class="line">... </span><br><span class="line"># 定义其他对变量等的处理，没去细看，也不一一列出了</span></span><br></pre></td></tr></table></figure>
<h3 id="device\qcom\msm8916_32\Android-mk">device\qcom\msm8916_32\Android.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include $(CLEAR_VARS)</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE       := wpa_supplicant.conf</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_TAGS  := optional # 默认在所有版本下都编译</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_CLASS := ETC</span></span><br><span class="line"><span class="comment">#LOCAL_SRC_FILES    := $(LOCAL_MODULE)</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_PATH  := $(TARGET_OUT_ETC)/wifi</span></span><br><span class="line"><span class="comment">#include $(BUILD_PREBUILT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include $(call all-makefiles-under,$(LOCAL_PATH)) # 导入所有mk文件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模块mk文件详见Android.mk解析：<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/#more" target="_blank" rel="external">Android.mk解析</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a><br>　<br>　　配置好环境变量后，接下来要做的就是build了。为了提高编译速度，我们自定义了一个go.sh的脚本文件，详细下面解释。另，编译的时候一般会在后面加一个-j8来实现多线程编译，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　./go.sh -j8 or make -j8／--jobs</span><br></pre></td></tr></table></figure></p>
<p>参数“-j“ 和”—jobs ”指定了同时编译的线程数量，通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将编译默认目标“droid”（下面详解），然后将会编译出完整的 Android 系统镜像。</p>
<h2 id="build系统分类">build系统分类</h2><p>　　整个build系统的Make文件可以分为三类：</p>
<ol>
<li>build系统核心文件：定义整个build系统的框架，其他所有make文件都是在这个框架的基础上写出来的。</li>
<li>产品的make文件：位于device目录，通常以公司名和产品名分为两级目录，如：\device\qcom\msm8916_32。</li>
<li>模块的make文件：每个模块专用的make文件，kernel中统一名字为Makefile，其他为Android.mk。　</li>
</ol>
<h2 id="build结果">build结果</h2><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：</p>
<ul>
<li>/out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。</li>
<li>/out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。</li>
<li>/out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。</li>
<li>/out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About ActivityNotFoundException Unable to find explicit activity class && Android.mk解析]]></title>
    <link href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/"/>
    <id>http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk解析/</id>
    <published>2015-07-12T06:06:35.000Z</published>
    <updated>2015-07-16T14:30:01.854Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a></p>
<h2 id="ActivityNotFoundException">ActivityNotFoundException 　</h2><p>　　最近将Android从4.4移植到5.1时，添加一个从拨号界面输入*#360*#进入battery info查看界面的功能时（如感兴趣，详情见<a href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/" target="_blank" rel="external">Android电池监控系统(bms)之一电池系统架构</a>），activity跳转部分代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(input.equals(BATTERY_INFO)</span>)</span><br><span class="line"></span>&#123;<span class="comment">//added by lihuaqian</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ComponentName Component = <span class="keyword">new</span> ComponentName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.BatteryOemInfo"</span>); </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setComponent(Component);</span><br><span class="line">        intent.setAction(Intent.ACTION_VIEW);   </span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"no activity to battery cmd."</span>); </span><br><span class="line">        <span class="comment">//e.printStackTrace();   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　遇到如下问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　ActivityNotFoundException : Unable to find explicit activity class; have you declared this activity <span class="keyword">in</span> your AndroidManifest.xml?</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　　我将流程检查了一遍又一遍，都完全没有问题，Google了很久也无结果。后灵光一现：是否Setting这个apk根本就没有安装成功，所以才导致找不到Activity。<br>　<br><strong>于是，我首先通过命令 adb install -r Setting.apk 手动安装，但总是提示安装失败，这时已有些小小兴奋，因为感觉自己快找到原因了。</strong><br>　<br><strong>然后，我将apk push进手机相应文件系统路径，重启，通过logcat打印log，后发现关键信息，如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to parse /system/priv-app/Settings: Signature mismatch <span class="keyword">for</span> shared user : SharedUserSetting&#123;<span class="number">2</span>a5b4702 android.uid.system/<span class="number">1000</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过此log信息可知：系统没有能成功安装此apk，原因是app签名不匹配。 这样就找到了问题的根源。 向应用软件部同事了解情况后得知，是因为此项目客户指定Signature。<br>　<br><strong>所以，接下来我就有两种选择：</strong></p>
<ul>
<li>自己整编整个系统，然后刷机，但是整编时间太长，所以放弃。</li>
<li>将修改代码给出软件同事，让其帮忙编一apk。（我选择了此方式，然后测试OK了）　</li>
</ul>
<p><strong>当然，这种问题主要是做系统级APP，需要用到root权限或运行于系统进程时时才会遇到，其他一般都是如下几个情况：</strong></p>
<ol>
<li>如log中提示，没有在AndroidManifest.xml中定义此Activity。</li>
<li>包名或者类名书写错误，不统一。</li>
<li>自己定义的包名或者类名与系统自带类重复。</li>
</ol>
<h2 id="Android-mk解析">Android.mk解析</h2><p>　　因为上面问题时由签名引起的，所以就深入看了一下什么地方指定签名，后发现在APP目录中的Android.mk中制定。Android.mk将source打包为如下几种modules：<br>　　　1. APK程序<br>  　　　　一般的Android程序，编译打包生成apk文件<br>　　　2. JAVA库<br>  　　　　java类库，编译打包生成jar文件<br>　　　3. C\C++应用程序<br> 　　　　可执行的C\C++应用程序<br>　　　4. C\C++静态库<br>　　　　编译生成C\C++静态库，并打包成.a文件，静态库则可被链接到动态库。<br>　　　5. C\C++动态库　　<br>　　　　编译生成共享库（动态链接库），并打包成.so文， 只有动态库才能被install or copy到apk。<br>　<br>　　在 Android Build 系统中，编译以模块（而不是文件）作为单位，每个模块都有一个唯一的名称，一个模块的依赖对象只能是另外一个模块，而不能是其他类型的对象。对于已经编译好的二进制库，如果要用来被当作是依赖对象，那么应当将这些已经编译好的库作为单独的模块。对于这些已经编译好的库使用 BUILD_PREBUILT 或 BUILD_MULTI_PREBUILT。例如：当编译某个 Java 库需要依赖一些 Jar 包时，并不能直接指定 Jar 包的路径作为依赖，而必须首先将这些 Jar 包定义为一个模块，然后在编译 Java 库的时候通过模块的名称来依赖这些 Jar 包。</p>
<p> 下面为Qualcomm Settings中的Android.mk （带“Lee:”为我自己加入以详解Android.mk）:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">//通常以如下两行开头</span><br><span class="line">LOCAL_PATH:= $(call my-dir)   // 用于定位源码路径，my-dir即当前路径</span><br><span class="line"> /*CLEAR_VARS-清理除LOCAL_PATH外的很多LOCAL_XX变量,因变量皆为全局变量，清理后避免相互影响。*/</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">/*链接外部JAVA包*/</span><br><span class="line">LOCAL_JAVA_LIBRARIES := bouncycastle conscrypt telephony-common ims-common // 当前模块依赖的 Java 共享库</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := android-support-v4 android-support-v13 jsr305 // 当前模块依赖的 Java 静态库</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *user:       该模块只在user版本下才编译</span><br><span class="line">  *eng:        该模块只在eng版本下才编译</span><br><span class="line">  *debug:    该模块只在debug版本下才编译</span><br><span class="line">  *optional:  该模块在所有版本下都编译,默认标签</span><br><span class="line">  * development:  该模块在development版本下编译</span><br><span class="line"> **/</span><br><span class="line">LOCAL_MODULE_TAGS := optional //定义该模块什么情况被编译</span><br><span class="line"></span><br><span class="line">Lee: LOCAL_MODULE    :=    //名字唯一不含空格，编译的目标对象，即名字</span><br><span class="line">Lee: LOCAL_C_INCLUDES         //包含c/c++需要的头文件路径</span><br><span class="line">Lee: LOCAL_SRC_FILES：当前模块包含的所有源代码文件。</span><br><span class="line">Lee: LOCAL_STATIC_LIBRARIES：当前模块在静态链接时需要的库的名称。</span><br><span class="line">Lee: LOCAL_SHARED_LIBRARIES：当前模块在运行时依赖的动态库的名称。</span><br><span class="line">Lee: LOCAL_CFLAGS：提供给 C/C++ 编译器的额外编译参数。</span><br><span class="line">Lee: LOCAL_PACKAGE_NAME：当前 APK 应用的名称。</span><br><span class="line">Lee: LOCAL_CERTIFICATE：签署当前应用的证书名称。</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *编译模块的源码</span><br><span class="line"> **/</span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">        $(call all-java-files-under, src) \</span><br><span class="line">        src/com/android/settings/EventLogTags.logtags \</span><br><span class="line">        src/com/android/cabl/ICABLService.aidl</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *编译模块的资源路径</span><br><span class="line"> **/</span><br><span class="line">LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">        src/com/android/location/XT/IXTSrv.aidl \</span><br><span class="line">        src/com/android/location/XT/IXTSrvCb.aidl \</span><br><span class="line">        src/com/android/display/IPPService.aidl</span><br><span class="line">LOCAL_PACKAGE_NAME := Settings //apk名</span><br><span class="line">LOCAL_CERTIFICATE := platform  // 此处定义签名</span><br><span class="line">LOCAL_PRIVILEGED_MODULE := <span class="literal">true</span>//声明apk放到system/priv-app</span><br><span class="line"></span><br><span class="line">Lee:LOCAL_CFLAGS +=$(OEM_CFLAGS)  // 声明customer（客户文件）中定义的相关宏，以便c/c++中<span class="comment">#if defined </span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * external/proguard - 抑制apk反编译的，对class混淆处理的代码路径</span><br><span class="line">  * proguard.flags 指定不需要混淆处理的native方法和变量</span><br><span class="line"> **/</span><br><span class="line">LOCAL_PROGUARD_FLAG_FILES := proguard.flags//加载当前路径proguard.flags文件</span><br><span class="line"></span><br><span class="line">include frameworks/opt/setupwizard/navigationbar/common.mk //包含指定</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *BUILD_STATIC_LIBRARY:  编译为静态库</span><br><span class="line">  *BUILD_SHARED_LIBRARY : 编译为动态库 </span><br><span class="line">  *BUILD_EXECUTABLE:    编译为Native C可执行程序</span><br><span class="line">  * BUILD_PACKAGE:  编译为apk</span><br><span class="line"> **/</span><br><span class="line">include $(BUILD_PACKAGE) //编译为apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following include to make our test apk.</span></span><br><span class="line">ifeq (,$(ONE_SHOT_MAKEFILE))</span><br><span class="line">include $(call all-makefiles-under,$(LOCAL_PATH)) <span class="comment">#表示需要编译该目录下文件，系统在当前路径查找Android.mk来编译</span></span><br><span class="line">endif</span><br><span class="line">Lee:还有很多其他定义和语法，这里就不一一分析，不过从变量名就能窥知一二</span><br></pre></td></tr></table></figure>
<h3 id="编译类型的说明">编译类型的说明</h3><h4 id="eng">eng</h4><ul>
<li>默认类型，该编译类型适用于开发阶段。</li>
<li>安装包含 eng, debug, user，development 标签的模块</li>
<li>安装所有没有标签的非APK模块</li>
<li>安装所有产品定义文件中指定的APK模块</li>
</ul>
<h4 id="user">user</h4><ul>
<li>该编译类型适合用于最终发布阶段。</li>
<li>安装所有带有 user 标签的模块</li>
<li>安装所有没有标签的非 APK 模块</li>
<li>安装所有产品定义文件中指定的 APK 模块，APK 模块的标签将被忽略　<h4 id="userdebug">userdebug</h4>该编译类型适合用于debug阶段。该类型和user一样，另：</li>
<li>会安装包含debug标签的模块</li>
<li>编译出的系统具有root访问权限</li>
</ul>
<p>　　build/core/config.mk中已经定义好了各种类型模块的编译方式。所以要执行编译，只需通过常量的方式引入对应的 Make 文件即可。详见<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a>，例如，要编译一个 APK 文件，只需要在 Android.mk 文件中，加入“include $(BUILD_PACKAGE)。<br>　<br>　　除此以外，Build 系统中还定义了一些便捷的函数以便在 Android.mk 中使用，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\$(call my-dir)：获取当前文件夹路径。</span><br><span class="line">\$(call all-java-files-under, &lt;src&gt;)：获取指定目录下的所有 Java 文件。</span><br><span class="line">\$(call all-c-files-under, &lt;src&gt;)：获取指定目录下的所有 C 语言文件。</span><br><span class="line">\$(call all-Iaidl-files-under, &lt;src&gt;) ：获取指定目录下的所有 AIDL 文件。</span><br><span class="line">\$(call all-makefiles-under, &lt;folder&gt;)：获取指定目录下的所有 Make 文件。</span><br><span class="line">\$(call intermediates-dir-for, &lt;class&gt;, &lt;app_name&gt;, &lt;host or target&gt;, &lt;common?&gt; )：获取 Build 输出的目标文件夹路径。</span><br></pre></td></tr></table></figure></p>
<h3 id="LOCAL_CERTIFICATE">LOCAL_CERTIFICATE</h3><p>　　分析了Android.mk,再来详细说说我之前问题相关的一个属性：LOCAL_CERTIFICATE ，用于指定签名是使用的key，如不指定默认testkey。<br>　<br>分析这个属性就先得谈谈此apkAndroidManifest.xm了中的sharedUserId属性说起，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        package=<span class="string">"com.android.settings"</span></span><br><span class="line">        coreApp=<span class="string">"true"</span></span><br><span class="line">        android:sharedUserId=<span class="string">"android.uid.system"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　通过将sharedUserId配置为”android.uid.system”，即让程序运行在系统进程，而运行在系统进程则需要目标系统的platform key，Android.mk中的 LOCAL_CERTIFICATE := platform  即是声明相应签名key文件。key文件的源码路径在 build\target\product\security。通过这样处理的apk则只能在自己编译的系统里面才能使用，如若装到其他Android系统会提示：”Package … has no signatures that match those in shared user android.uid.system”。<br>　<br>　　另，android:sharedUserId属性不仅仅可以把apk放到系统进程中，也可以配置多个APK运行在一个进程中，这样可以共享数据，就会很有用处。就像我上面的Settings.apk。</p>
<p>在Android.mk中,LOCAL_CERTIFICATE可设置的值如下：</p>
<ul>
<li>LOCAL_CERTIFICATE := platform</li>
<li>LOCAL_CERTIFICATE := shared</li>
<li>LOCAL_CERTIFICATE := media　<br>然后，需要在APK源码的AndroidManifest.xml文件中的manifest节点添加如下内容：</li>
<li>android:sharedUserId=”android.uid.system”</li>
<li>android:sharedUserId=”android.uid.shared”</li>
<li>android:sharedUserId=”android.media”　<br>在Android源码的build/target/product/security/目录下有如下的4对KEY：<ol>
<li>media.pk8与media.x509.pem；</li>
<li>platform.pk8与platform.x509.pem；</li>
<li>shared.pk8与shared.x509.pem；</li>
<li>testkey.pk8与testkey.x509.pem；　</li>
</ol>
</li>
</ul>
<p>其中，”<em>.pk8”文件为私钥，”</em>.x509.pem”文件为公钥，这需要了解非对称加密方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a></p>
<h2 id="ActivityNotFoundException">ActivityNotFoundException 　</h2><p>　　最近将Android从4.4移植到5.1时，添加一个从拨号界面输入*#360*#进入battery info查看界面的功能时（如感兴趣，详情见<a href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/">Android电池监控系统(bms)之一电池系统架构</a>），activity跳转部分代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(input.equals(BATTERY_INFO)</span>)</span><br><span class="line"></span>&#123;<span class="comment">//added by lihuaqian</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ComponentName Component = <span class="keyword">new</span> ComponentName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.BatteryOemInfo"</span>); </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setComponent(Component);</span><br><span class="line">        intent.setAction(Intent.ACTION_VIEW);   </span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"no activity to battery cmd."</span>); </span><br><span class="line">        <span class="comment">//e.printStackTrace();   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　遇到如下问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　ActivityNotFoundException : Unable to find explicit activity class; have you declared this activity <span class="keyword">in</span> your AndroidManifest.xml?</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Bug" scheme="http://huaqianlee.me/tags/Bug/"/>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译过程详解之一]]></title>
    <link href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/"/>
    <id>http://huaqianlee.me/2015/07/11/Android编译过程详解之一/</id>
    <published>2015-07-11T11:43:04.000Z</published>
    <updated>2015-07-16T14:12:28.608Z</updated>
    <content type="html"><![CDATA[<p><strong>　　Platform Information :<br>　　　System:    Ａndroid4.4.4<br>　　　Platform:  Qualcomm msm8916<br>　　　Author:     Andy Lee<br>　　　Email:        huaqianlee@gmail.com</strong></p>
<p><strong>欢迎指出错误，共同学习，共同进步</strong></p>
<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a><br>　<br>　　Google给出的编译环境和构建方法见：<a href="http://source.android.com/source/initializing.html" target="_blank" rel="external">http://source.android.com/source/initializing.html</a>，过程见：<a href="http://source.android.com/source/building.html" target="_blank" rel="external">http://source.android.com/source/building.html</a>，不过这是解释怎么编译一个通用的系统，没有详细描述细节，而且需要翻墙。接下来我就准备跟着高通平台的编译过程来详细了解一下。</p>
<p>我平时的编译步骤如下：<br>　1. source setup.sh project-name debug/release　加载命令配置环境　<br>　2. ./go.sh  [target] or make  [target]　编译<br><a id="more"></a>　<br>接下来就按照步骤来详细分析一下流程：</p>
<h2 id="source_setup-sh_project-name_debug">source setup.sh project-name debug</h2><p>　　setup.sh是自定义的一个脚本文件，用来配置环境变量，其主要内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*配置用到的jdk、jre*/</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/workspace/bin/jdk1.<span class="number">6.0</span>_37</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin:<span class="variable">$PATH</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh // 官网的第一步，加载命令，待会儿再详细解释</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> /workspace/bin/eric-PAY4/links-<span class="number">8916</span> ];<span class="keyword">then</span></span><br><span class="line">    cp <span class="operator">-a</span> /workspace/bin/eric-PAY4/links-<span class="number">8916</span> links</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="operator">-lt</span> <span class="number">2</span> ];<span class="keyword">then</span> <span class="comment"># 如命令行参数输入错误，打印提示信息</span></span><br><span class="line">    <span class="built_in">echo</span> You can input like <span class="string">"source setup.sh s5_common [debug|release]"</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> product=<span class="variable">$1</span> var=<span class="variable">$2</span> //打印输入选择 project-name  debug/release</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">"debug"</span> ];<span class="keyword">then</span>　// 根据参数选择编译项</span><br><span class="line">    choosecombo <span class="number">2</span> msm8916_32 <span class="number">3</span> <span class="variable">$1</span> </span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">"release"</span> ];<span class="keyword">then</span></span><br><span class="line">    choosecombo <span class="number">1</span> msm8916_32 <span class="number">1</span> <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your input is wrong please check again"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="source_build/envsetup-sh">source build/envsetup.sh</h3><p>　　此命令是将envsetup.sh中的命令加载到环境变量，build位于Android源码路径根目录（本文提到所有路径都是以 Android 源码树作为背景的，“/”或顶层路径指的是源码树的根目录，与文件系统无关），主要命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- lunch:   指定编译项，即编译目标和编译类型（lunch &lt;product_name&gt;-&lt;build_variant&gt;）</span><br><span class="line">- tapas:   同choosecombo，设置编译参数（tapas [&lt;App1&gt; &lt;App2&gt; ...] [arm|x86|mips|armv5] [eng|userdebug|user]）</span><br><span class="line">- croot:   切换到根目录（Changes directory to the top of the tree.）</span><br><span class="line">- m:       从源码树根目录开始make（Makes from the top of the tree.）</span><br><span class="line">- mm:      编译当前目录下所有模块，但不包括依赖文件（Builds all of the modules <span class="keyword">in</span> the current directory, but not their dependencies.）</span><br><span class="line">- mmm:    编译指定目录下的所有模块，但不包括依赖文件（Builds all of the modules <span class="keyword">in</span> the supplied directories, but not their dependencies.）</span><br><span class="line">- mma:     编译当前目录下所有模块，包括依赖文件（Builds all of the modules <span class="keyword">in</span> the current directory, and their dependencies.）</span><br><span class="line">- mmma:    编译指定目录下的所有模块，包括依赖文件（Builds all of the modules <span class="keyword">in</span> the supplied directories, and their dependencies.）</span><br><span class="line">- cgrep:   在所有c/c++文件中查找（Greps on all <span class="built_in">local</span> C/C++ files.）</span><br><span class="line">- jgrep:   在所有java文件中查找（Greps on all <span class="built_in">local</span> Java files.）</span><br><span class="line">- resgrep: 在所有res/*.xml中查找（Greps on all <span class="built_in">local</span> res/*.xml files.）</span><br><span class="line">- godir:   跳转到包含某个文件的路径（Go to the directory containing a file.）</span><br><span class="line">- printconfig：显示当前Build的配置信息</span><br></pre></td></tr></table></figure></p>
<p>　　完整命令和关键源码如下：(英文为源码注释，中文部分是原本没有，自己根据理解添加的注释)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> get_abs_build_var()   <span class="comment"># Get the value of a build variable as an absolute path.</span></span><br><span class="line"><span class="keyword">function</span> get_build_var()   <span class="comment"># Get the exact value of a build variable.</span></span><br><span class="line"><span class="keyword">function</span> check_product()  <span class="comment"># check to see if the supplied product is one we can build</span></span><br><span class="line"><span class="keyword">function</span> check_variant()  <span class="comment"># check to see if the supplied variant is valid (variant：user userdebug eng)</span></span><br><span class="line"><span class="keyword">function</span> setpaths()   <span class="comment"># sets ANDROID_BUILD_PATHS</span></span><br><span class="line"><span class="keyword">function</span> printconfig()   <span class="comment"># 打印配置</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_stuff_<span class="keyword">for</span>_environment()   <span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_sequence_number()     <span class="comment"># 设置序列号</span></span><br><span class="line"><span class="keyword">function</span> settitle()   <span class="comment"># 设置标题</span></span><br><span class="line"><span class="keyword">function</span> addcompletions()    <span class="comment"># 添加sdk/bash_completion中bash</span></span><br><span class="line"><span class="keyword">function</span> choosetype()    <span class="comment"># 选择type （debug/release）</span></span><br><span class="line"><span class="keyword">function</span> chooseoemprj()    <span class="comment"># 自定义，设置TARGET_PRODUCT，即project-name</span></span><br><span class="line"><span class="keyword">function</span> chooseproduct()    <span class="comment">#  官方自带的设置TARGET_PRODUCT</span></span><br><span class="line"><span class="keyword">function</span> choosevariant()    <span class="comment"># 设置variant (user userdebug eng)</span></span><br><span class="line"><span class="keyword">function</span> choosecombo()    <span class="comment"># 设置并打印编译参数（choosetype、chooseproduct、choosevariant、chooseoemprj、set_stuff_for_environment）</span></span><br><span class="line"><span class="keyword">function</span> add_lunch_combo()    <span class="comment"># 添加lunch项，多次调用，用来添加Android编译选项</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">print</span>_lunch_menu()    <span class="comment"># 打印lunch列表</span></span><br><span class="line"><span class="keyword">function</span> lunch()    <span class="comment"># 配置lunch</span></span><br><span class="line"><span class="keyword">function</span> _lunch()      <span class="comment"># Tab completion for lunch.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the build to build unbundled apps.</span></span><br><span class="line"><span class="comment"># Run tapas with one ore more app names (from LOCAL_PACKAGE_NAME)</span></span><br><span class="line"><span class="keyword">function</span> tapas()     <span class="comment"># 同choosecombo</span></span><br><span class="line"><span class="keyword">function</span> gettop    <span class="comment"># 获取顶层路径</span></span><br><span class="line"><span class="keyword">function</span> m()    <span class="comment"># 从顶层树开始编译</span></span><br><span class="line"><span class="keyword">function</span> findmakefile()    <span class="comment"># 找到Makefile （Android.mk）</span></span><br><span class="line"><span class="keyword">function</span> mm()    <span class="comment"># 从当前路径开始编译，不加依赖</span></span><br><span class="line"><span class="keyword">function</span> mmm()     <span class="comment"># 从指定路径开始编译，不加依赖</span></span><br><span class="line"><span class="keyword">function</span> mma()    <span class="comment"># 从当前路径看是编译，包括依赖</span></span><br><span class="line"><span class="keyword">function</span> mmma()     <span class="comment"># 从指定路径开始编译，包括依赖</span></span><br><span class="line"><span class="keyword">function</span> croot()      <span class="comment"># 切换到顶层路径</span></span><br><span class="line"><span class="keyword">function</span> cproj()     <span class="comment"># 没看懂，切换到某一路径</span></span><br><span class="line"><span class="keyword">function</span> qpid()    <span class="comment"># 输出进程号和名字 （simplified version of ps; output in the form &lt;pid&gt; &lt;procname&gt;）</span></span><br><span class="line"><span class="keyword">function</span> pid()     <span class="comment"># 输出进程号和名字 </span></span><br><span class="line"><span class="keyword">function</span> systemstack()    <span class="comment"># systemstack - dump the current stack trace of all threads in the system process to the usual ANR traces file</span></span><br><span class="line"><span class="keyword">function</span> stacks()</span><br><span class="line"><span class="keyword">function</span> gdbwrapper()</span><br><span class="line"><span class="keyword">function</span> gdbclient()</span><br><span class="line"><span class="keyword">function</span> sgrep()     <span class="comment"># 查找c/h/cpp/S/java/xml/sh/mk文件</span></span><br><span class="line"><span class="keyword">function</span> gettargetarch    <span class="comment"># 获取TARGET_ARCH</span></span><br><span class="line"><span class="keyword">function</span> jgrep()    <span class="comment"># 查找java文件</span></span><br><span class="line"><span class="keyword">function</span> cgrep()    <span class="comment"># 查找c/c++文件</span></span><br><span class="line"><span class="keyword">function</span> resgrep()    <span class="comment"># 查找xml文件</span></span><br><span class="line"><span class="keyword">function</span> mangrep()     <span class="comment"># 查找out目录中AndroidManifest.xml文件</span></span><br><span class="line"><span class="keyword">function</span> sepgrep()    <span class="comment"># 查找out目录中sepolicy</span></span><br><span class="line"><span class="keyword">function</span> treegrep()                                </span><br><span class="line"><span class="keyword">function</span> mgrep()</span><br><span class="line"><span class="keyword">function</span> getprebuilt    <span class="comment"># 获取ANDROID_PREBUILTS（编译工具）</span></span><br><span class="line"><span class="keyword">function</span> tracedmdump()</span><br><span class="line"><span class="keyword">function</span> runhat()     <span class="comment"># communicate with a running device or emulator, set up necessary state, and run the hat command.</span></span><br><span class="line"><span class="keyword">function</span> getbugreports()</span><br><span class="line"><span class="keyword">function</span> getsdcardpath()</span><br><span class="line"><span class="keyword">function</span> getscreenshotpath()</span><br><span class="line"><span class="keyword">function</span> getlastscreenshot()</span><br><span class="line"><span class="keyword">function</span> startviewserver()</span><br><span class="line"><span class="keyword">function</span> stopviewserver()</span><br><span class="line"><span class="keyword">function</span> isviewserverstarted()</span><br><span class="line"><span class="keyword">function</span> key_home()</span><br><span class="line"><span class="keyword">function</span> key_back()</span><br><span class="line"><span class="keyword">function</span> key_menu()</span><br><span class="line"><span class="keyword">function</span> smoketest()</span><br><span class="line"><span class="keyword">function</span> runtest()    <span class="comment"># simple shortcut to the runtest command</span></span><br><span class="line"><span class="keyword">function</span> godir ()    <span class="comment"># 跳到指定目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_java_home()    <span class="comment"># Force JAVA_HOME to point to java 1.6 if it isn't already set</span></span><br><span class="line"><span class="keyword">function</span> pez     <span class="comment"># Print colored exit condition</span></span><br><span class="line"></span><br><span class="line">关键源码：</span><br><span class="line"><span class="comment"># Clear this variable.  It will be built up again when the vendorsetup.sh files are included at the end of this file.</span></span><br><span class="line"><span class="built_in">unset</span> LUNCH_MENU_CHOICES</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add_lunch_combo</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> new_combo=<span class="variable">$1</span>   <span class="comment"># 获取add_lunch_combo被调用时的参数</span></span><br><span class="line">    <span class="built_in">local</span> c</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable">$&#123;LUNCH_MENU_CHOICES[@]&#125;</span> ; <span class="keyword">do</span>   <span class="comment">#遍历LUNCH_MENU_CHOICES，第一次调用时为空</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$new_combo</span>"</span> = <span class="string">"<span class="variable">$c</span>"</span> ] ; <span class="keyword">then</span>    <span class="comment"># 如果参数存在，则返回</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> <span class="comment"># 如果参数不存在，则添加</span></span><br><span class="line">    LUNCH_MENU_CHOICES=(<span class="variable">$&#123;LUNCH_MENU_CHOICES[@]&#125;</span> <span class="variable">$new_combo</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the default one here  # 系统自动添加的默认编译项</span></span><br><span class="line">add_lunch_combo aosp_arm-eng  <span class="comment"># 调用add_lunch_combo()，传入参数</span></span><br><span class="line">add_lunch_combo aosp_x86-eng</span><br><span class="line">add_lunch_combo aosp_mips-eng</span><br><span class="line">add_lunch_combo vbox_x86-eng</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这段代码十分重要，主要在device目录查找vendorsetup.sh并加载，此文件主要添加自定义编译项，如：add_lunch_combo msm8916_32-userdebug </span></span><br><span class="line"><span class="comment"># Execute the contents of any vendorsetup.sh files we can find.</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `<span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">4</span> -name <span class="string">'vendorsetup.sh'</span> <span class="number">2</span>&gt; /dev/null` \</span><br><span class="line">         `<span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">4</span> -name <span class="string">'vendorsetup.sh'</span> <span class="number">2</span>&gt; /dev/null`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"including <span class="variable">$f</span>"</span></span><br><span class="line">    . <span class="variable">$f</span>  <span class="comment"># 执行找到的脚本</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">unset</span> f</span><br><span class="line"></span><br><span class="line">addcompletions  调用 addcompletions()</span><br></pre></td></tr></table></figure></p>
<p>因此可知，envsetup.sh主要有如下作用：<br>　1. 加载编译时需要的相应命令，如：help，lunch ，m，mm等。<br>　2. 添加系统默认编译项。<br>　3. 查找vendorsetup.sh文件，加载自定义编译项。</p>
<blockquote>
<p>注：有些Android版本中vendorsetup.sh文件在vendor目录　</p>
</blockquote>
<p>　　如要添加自己的产品，需要在device目录下新建一个自己公司名，新建一个vendorsetup.sh，加入自己的编译项。了解了这一条指令，再来看一下执行结果，将会更有体会，因为我所有命令都写到开始的setup.sh文件中了，所以不用想官方那样多步配置编译，如下：<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/20150711MakeAndroid.png" alt="Make"></p>
<h2 id="lunch">lunch</h2><p>　　lunch是在envsetup.sh中定义的一个命令，让用户选择编译项，用来定义product和编译过程中用到的全局变量。关于编译项，前面只是列出，并未详解，如msm8916_32-userdebug，msm8916_32为产品名，userdebug为编译类型，详细如下：</p>
<ul>
<li><p>eng: 工程机，</p>
</li>
<li><p>user:最终用户机</p>
</li>
<li><p>userdebug:调试测试机</p>
</li>
<li><p>tests:测试机 。</p>
</li>
</ul>
<p>　　在build\core\main.mk中有说明，Android源码中，每一个目标目录都有一个Android.mk，此文件中LOCAL_MODULE_TAGS就是来指定当前目标编译到哪个分类或者要不要编译。配置好后，可以通过lunch xxx 重选编译项，如：lunch msm8916_32-userdebug。</p>
<p>ok，接下来分析一下lunch function：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">lunch</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> answer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> ] ; <span class="keyword">then</span> <span class="comment"># lunch 后带参数</span></span><br><span class="line">        answer=<span class="variable">$1</span>   </span><br><span class="line">    <span class="keyword">else</span>  <span class="comment"># lunch后若不带参数，则打印所以target_product and variant 供用户选择</span></span><br><span class="line">        <span class="built_in">print</span>_lunch_menu</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Which would you like? [aosp_arm-eng] "</span></span><br><span class="line">        <span class="built_in">read</span> answer</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> selection=</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$answer</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">        selection=aosp_arm-eng <span class="comment"># 如果用户在菜单中没有选择，直接回车，则为系统缺省的aosp_arm-eng</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">echo</span> -n <span class="variable">$answer</span> | grep -q <span class="operator">-e</span> <span class="string">"^[0-9][0-9]*$"</span>) </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$answer</span> -le <span class="variable">$&#123;#LUNCH_MENU_CHOICES[@]&#125;</span> ] <span class="comment"># 如果answer是选择菜单的数字，则获取该数字对应的字符串</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            selection=<span class="variable">$&#123;LUNCH_MENU_CHOICES[$(($answer-1))]&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">echo</span> -n <span class="variable">$answer</span> | grep -q <span class="operator">-e</span> <span class="string">"^[^\-][^\-]*-[^\-][^\-]*$"</span>)  <span class="comment"># 如果 answer字符串匹配 *-*模式(*的开头不能为-)</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        selection=<span class="variable">$answer</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$selection</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Invalid lunch combo: <span class="variable">$answer</span>"</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_APPS=</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> product=$(<span class="built_in">echo</span> -n <span class="variable">$selection</span> | sed <span class="operator">-e</span> <span class="string">"s/-.*$//"</span>)  <span class="comment"># 将 product-variant模式中的product分离出来</span></span><br><span class="line">    check_product <span class="variable">$product</span>  <span class="comment"># 检查，调用关系 check_product()-&gt;get_build_var()-&gt;build/core/config.mk</span></span><br><span class="line">    <span class="keyword">if</span> [ $? <span class="operator">-ne</span> <span class="number">0</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Don't have a product spec for: '<span class="variable">$product</span>'"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Do you have the right repo manifest?"</span></span><br><span class="line">        product=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> variant=$(<span class="built_in">echo</span> -n <span class="variable">$selection</span> | sed <span class="operator">-e</span> <span class="string">"s/^[^\-]*-//"</span>) <span class="comment"># 将 product-variant模式中的variant分离出来</span></span><br><span class="line">    check_variant <span class="variable">$variant</span> <span class="comment"># 检查，看看是否在 (user userdebug eng) 范围内</span></span><br><span class="line">    <span class="keyword">if</span> [ $? <span class="operator">-ne</span> <span class="number">0</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Invalid variant: '<span class="variable">$variant</span>'"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Must be one of <span class="variable">$&#123;VARIANT_CHOICES[@]&#125;</span>"</span></span><br><span class="line">        variant=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$product</span>"</span> -o -z <span class="string">"<span class="variable">$variant</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  导出环境变量，这很重要，因为后面的编译系统都依赖于这里定义的几个变量</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_PRODUCT=<span class="variable">$product</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_VARIANT=<span class="variable">$variant</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_TYPE=release</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>_stuff_<span class="keyword">for</span>_environment  <span class="comment"># 设置环境变量， 在shell输入set可查看</span></span><br><span class="line">    printconfig <span class="comment"># 打印部分变量，调用关系printconfig()-&gt;get_build_var()-&gt;build/core/config.mk-&gt;build/core/envsetup.mk</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab completion for lunch.</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">_lunch</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> cur prev opts</span><br><span class="line">    COMPREPLY=()</span><br><span class="line">    cur=<span class="string">"<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>"</span></span><br><span class="line">    prev=<span class="string">"<span class="variable">$&#123;COMP_WORDS[COMP_CWORD-1]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    COMPREPLY=( $(compgen -W <span class="string">"<span class="variable">$&#123;LUNCH_MENU_CHOICES[*]&#125;</span>"</span> -- <span class="variable">$&#123;cur&#125;</span>) )</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>　　Platform Information :<br>　　　System:    Ａndroid4.4.4<br>　　　Platform:  Qualcomm msm8916<br>　　　Author:     Andy Lee<br>　　　Email:        huaqianlee@gmail.com</strong></p>
<p><strong>欢迎指出错误，共同学习，共同进步</strong></p>
<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a><br>　<br>　　Google给出的编译环境和构建方法见：<a href="http://source.android.com/source/initializing.html">http://source.android.com/source/initializing.html</a>，过程见：<a href="http://source.android.com/source/building.html">http://source.android.com/source/building.html</a>，不过这是解释怎么编译一个通用的系统，没有详细描述细节，而且需要翻墙。接下来我就准备跟着高通平台的编译过程来详细了解一下。</p>
<p>我平时的编译步骤如下：<br>　1. source setup.sh project-name debug/release　加载命令配置环境　<br>　2. ./go.sh  [target] or make  [target]　编译<br>]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git常用及进阶命令总结]]></title>
    <link href="http://huaqianlee.me/2015/06/11/git%E5%B8%B8%E7%94%A8%E5%8F%8A%E8%BF%9B%E9%98%B6%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://huaqianlee.me/2015/06/11/git常用及进阶命令总结/</id>
    <published>2015-06-11T14:10:41.000Z</published>
    <updated>2015-07-17T15:28:40.369Z</updated>
    <content type="html"><![CDATA[<p>　　Git是Linux撞始人Linus Towards花一周写出来的分布式版本控制系统，大神终究是大神，这么牛逼的东西只需要一周。之前花了一百多刀买了Linus的原版自传《Just for fun》，基本上是他自己写的，很幽默，有兴趣可以看看。Linus很傲，但是傲得有资本，唯一能无视Jobs的现实扭曲力场，对Jobs的盛情邀请say no转身而去的人。　<br>　<br>　　言归正传，Git十分好用，现在大多数公司或者个人都在使用，但要熟练使用还是要花一些苦功夫的，我现在也还是只会基本的应用，更深层次的使用还不熟悉。为了方便自己以后使用，将自己常用的一些命令加以总结，并Google了一些常用及进阶命令，一并列出，方便查询使用。</p>
<a id="more"></a>
<h2 id="Git配置">Git配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"huaqianlee"</span>   </span><br><span class="line">git config --global user.email <span class="string">"huaqianlee@gmail.com"</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global alias.co checkout <span class="comment"># 配置别名，co 配为checkout 别名， 不过我没用</span></span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global core.editor <span class="string">"mate -w"</span>    <span class="comment"># 设置Editor使用textmate</span></span><br><span class="line">git config <span class="operator">-l</span>  <span class="comment"># 列举所有配置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户的git配置文件~/.gitconfig</p>
</blockquote>
<h2 id="Git常用及进阶命令">Git常用及进阶命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用命令</span></span><br><span class="line">git <span class="built_in">help</span>  <span class="comment">#查看帮助，命令忘记了就靠它</span></span><br><span class="line">git init    <span class="comment">#初始化话目录为git仓库</span></span><br><span class="line">git clean -fd  <span class="comment"># 删除无用目录及文件</span></span><br><span class="line">git clean <span class="operator">-f</span>X  <span class="comment"># 删除无用文件</span></span><br><span class="line">git clean <span class="comment"># 删除所有untracked文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">git add file   <span class="comment">#添加文件到暂存区</span></span><br><span class="line">git add .        <span class="comment">#将所有修改或者新加文件添加到暂存区   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">git rm file         <span class="comment">#删除文件</span></span><br><span class="line">git rm &lt;file&gt; --cached  <span class="comment"># 从版本库中删除文件，但不删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#撤销回退</span></span><br><span class="line">git checkout — xx  <span class="comment">#撤销xx文件修改</span></span><br><span class="line">git checkout .     <span class="comment">#撤销工作区修改</span></span><br><span class="line">git revert &lt;<span class="variable">$id</span>&gt;    <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></span><br><span class="line">git revert HEAD     <span class="comment"># 恢复最后一次提交的状态</span></span><br><span class="line">git reset &lt;file&gt;    <span class="comment"># 从暂存区恢复某一文件</span></span><br><span class="line">git reset -- .      <span class="comment"># 从暂存区恢复所有文件</span></span><br><span class="line">git reset  –hard HEAD^/HEAD~  <span class="comment">#回退到上一版本</span></span><br><span class="line">git reset  –hard &lt;commit_id&gt;    <span class="comment">#回退到指定版本</span></span><br><span class="line">git reset HEAD file  <span class="comment">#取消add文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line">git commit  &lt;file&gt; <span class="comment">#提交单个文件</span></span><br><span class="line">git commit –m “description”   <span class="comment">#提交暂存区到服务器</span></span><br><span class="line">git commit <span class="operator">-a</span>           <span class="comment"># 等同执行git add、 git rm及git commit</span></span><br><span class="line">git commit -am <span class="string">"some comments"</span></span><br><span class="line">git commit --amend      <span class="comment"># 修改最后一次提交记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态记录</span></span><br><span class="line">git status        <span class="comment">#查看仓库状态</span></span><br><span class="line">git show (<span class="variable">$id</span>)  <span class="comment"># 显示某次提交的内容</span></span><br><span class="line">git <span class="built_in">log</span>   (file)       <span class="comment">#查看（文件）提交记录</span></span><br><span class="line">git <span class="built_in">log</span> -p &lt;file&gt;   <span class="comment"># 查看每次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> -p -<span class="number">2</span>       <span class="comment"># 查看最近两次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> --stat      <span class="comment"># 查看提交统计信息</span></span><br><span class="line">git reflog       <span class="comment">#查看历史版本号</span></span><br><span class="line">git <span class="built_in">log</span> -g <span class="comment">#同上，用'log'格式输出</span></span><br><span class="line">git <span class="built_in">log</span> -- grep <span class="string">"name"</span> <span class="comment"># 搜索包含name的log </span></span><br><span class="line">git <span class="built_in">log</span> record-ID  <span class="operator">-l</span> -p <span class="comment">#查看指定ID记录，-l:显示一行，-p:显示详细修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看差异</span></span><br><span class="line">git diff &lt;file&gt;     <span class="comment"># 比较当前文件和暂存区文件差异</span></span><br><span class="line">git diff   <span class="comment">#比较所有文件</span></span><br><span class="line">git diff master..Andylee-Github/master <span class="comment">#比较本地和远端仓库</span></span><br><span class="line">git diff &lt;<span class="variable">$id1</span>&gt; &lt;<span class="variable">$id2</span>&gt;   <span class="comment"># 比较两次提交之间的差异</span></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="comment">#比较分支</span></span><br><span class="line">git diff --staged   <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git diff --cached   <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git diff --stat     <span class="comment"># 仅仅比较统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分支管理  </span></span><br><span class="line">git branch  <span class="comment">#查看本地分支</span></span><br><span class="line">git branch  -r    <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch  <span class="operator">-a</span>     <span class="comment">#查看包括远程文件在内的所有分支 </span></span><br><span class="line">git branch   &lt;new_branch&gt; <span class="comment"># 创建新分支</span></span><br><span class="line">git branch   -v           <span class="comment"># 查看各个分支最后提交信息</span></span><br><span class="line">git branch   --merged     <span class="comment"># 查看已经被合并到当前分支的分支</span></span><br><span class="line">git branch   --no-merged  <span class="comment"># 查看尚未被合并到当前分支的分支</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;branch&gt;  <span class="comment">#切换分支</span></span><br><span class="line">git checkout –b &lt;new_branch&gt;<span class="comment">#创建新分支，并切换到新分支</span></span><br><span class="line">git merge dev    <span class="comment">#在当前的分支上合并dev分支</span></span><br><span class="line">git checkout -b &lt;new_branch&gt; &lt;branch&gt;  <span class="comment"># 基于branch创建新的new_branch</span></span><br><span class="line">git checkout  <span class="variable">$id</span>          <span class="comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></span><br><span class="line">git checkout  <span class="variable">$id</span> -b &lt;new_branch&gt;  <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></span><br><span class="line"></span><br><span class="line">git branch<span class="operator">-d</span> &lt;branch&gt;  <span class="comment"># 删除分支</span></span><br><span class="line">git branch-D &lt;branch&gt;  <span class="comment"># 强制删除分支 (未被合并的分支被删除的时需要强制)</span></span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;               <span class="comment"># 将branch分支合并到当前分支</span></span><br><span class="line">git merge origin/master --no-ff  <span class="comment"># 不要Fast-Foward合并，这样可以生成merge提交</span></span><br><span class="line">git rebase master &lt;branch&gt;       <span class="comment"># 将master rebase到branch，等同于：</span></span><br><span class="line"><span class="comment">#git checkout   &lt;branch&gt; + git rebase master + git checkout  master + git merge &lt;branch&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#补丁应用</span></span><br><span class="line">git diff &gt; ../sync.patch         <span class="comment"># 生成补丁</span></span><br><span class="line">git apply ../sync.patch          <span class="comment"># 打补丁</span></span><br><span class="line">git apply --check ../sync.patch  <span class="comment"># 测试补丁能否成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暂存管理</span></span><br><span class="line">git stash  <span class="comment">#暂存当前工作，恢复现场后可继续工作</span></span><br><span class="line">git stash list  <span class="comment">#查看暂存文件列表</span></span><br><span class="line">git stash apply  <span class="comment">#恢复暂存内容，暂存区不删除</span></span><br><span class="line">git stash drop  <span class="comment">#删除暂存文件</span></span><br><span class="line">git stash pop  <span class="comment">#恢复并删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远程分支管理</span></span><br><span class="line">git pull                         <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span></span><br><span class="line">git pull --no-ff                 <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></span><br><span class="line">git fetch origin                 <span class="comment"># 抓取远程仓库更新，加下一条指令等同于git pull</span></span><br><span class="line">git merge origin/master          <span class="comment"># 将远程主分支合并到本地当前分支</span></span><br><span class="line">git checkout   --track origin/branch     <span class="comment"># 跟踪某个远程分支创建相应的本地分支</span></span><br><span class="line">git checkout   -b &lt;<span class="built_in">local</span>_branch&gt; origin/&lt;remote_branch&gt;  <span class="comment"># 基于远程分支创建本地分支，功能同上</span></span><br><span class="line"></span><br><span class="line">git push                         <span class="comment"># push所有分支</span></span><br><span class="line">git push origin branch   <span class="comment"># 将本地分支推到远程分支</span></span><br><span class="line">git push –u origin branch   <span class="comment">#推送本地分支到远程仓库，首次提交需要加-u </span></span><br><span class="line">git push origin &lt;<span class="built_in">local</span>_branch&gt;   <span class="comment"># 创建远程分支， origin是远程仓库名</span></span><br><span class="line">git push origin &lt;<span class="built_in">local</span>_branch&gt;:&lt;remote_branch&gt;  <span class="comment"># 创建远程分支</span></span><br><span class="line">git push origin :&lt;remote_branch&gt;  <span class="comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远程仓库管理</span></span><br><span class="line">git remote  <span class="comment">#查看远程库的信息</span></span><br><span class="line">git remote –v  <span class="comment">#查看远程库的详细信息</span></span><br><span class="line">git remote show origin           <span class="comment"># 查看远程服务器仓库状态</span></span><br><span class="line">git remote add origin git@github:robbin/robbin_site.git         <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:robbin/robbin_site.git <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span></span><br><span class="line">git remote rm &lt;repository&gt;       <span class="comment"># 删除远程仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/AndyLee-Github/cartboon.git   <span class="comment">#从远程仓库中克隆</span></span><br><span class="line">git <span class="built_in">clone</span> --bare robbin_site robbin_site.git  <span class="comment"># 用带版本的项目创建纯版本仓库</span></span><br><span class="line">scp -r my_project.git git@git.csdn.net:~      <span class="comment"># 将纯仓库上传到服务器上</span></span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git + <span class="built_in">cd</span> robbin_site.git + git --bare init <span class="comment"># 在服务器创建纯仓库</span></span><br><span class="line">git remote add origin git@github.com:robbin/robbin_site.git    <span class="comment"># 设置远程仓库地址</span></span><br><span class="line">git push -u origin master                                      <span class="comment"># 客户端首次提交</span></span><br><span class="line">git push -u origin develop  <span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span></span><br><span class="line">git remote <span class="built_in">set</span>-head origin master   <span class="comment"># 设置远程仓库的HEAD指向master分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令设置跟踪远程库和本地库</span></span><br><span class="line">git branch --set-upstream master origin/master</span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目前先这么多，后续再补充更高级的命令， 也可参考：<a href="http://www.imooc.com/article/1089" target="_blank" rel="external">git进阶</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Git是Linux撞始人Linus Towards花一周写出来的分布式版本控制系统，大神终究是大神，这么牛逼的东西只需要一周。之前花了一百多刀买了Linus的原版自传《Just for fun》，基本上是他自己写的，很幽默，有兴趣可以看看。Linus很傲，但是傲得有资本，唯一能无视Jobs的现实扭曲力场，对Jobs的盛情邀请say no转身而去的人。　<br>　<br>　　言归正传，Git十分好用，现在大多数公司或者个人都在使用，但要熟练使用还是要花一些苦功夫的，我现在也还是只会基本的应用，更深层次的使用还不熟悉。为了方便自己以后使用，将自己常用的一些命令加以总结，并Google了一些常用及进阶命令，一并列出，方便查询使用。</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://huaqianlee.me/tags/git/"/>
    
      <category term="tools" scheme="http://huaqianlee.me/categories/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android电池监控系统(BMS)之一电池系统架构]]></title>
    <link href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2015/06/06/Android电池监控系统-BMS-之电池系统架构/</id>
    <published>2015-06-06T14:17:36.000Z</published>
    <updated>2015-07-12T06:17:38.391Z</updated>
    <content type="html"><![CDATA[<p><em>Platform Information :<br>　System:    Ａndroid4.4.4<br>　Platform:  Qualcomm msm8916<br>　Author:     Andy Lee<br>　Email:        huaqianlee@gmail.com</em></p>
<p><strong>如有错误欢迎指出，共同学习，共同进步</strong><br>　<br>　　电池对移动设备的重要性不言而喻，所以电池监控系统也是Android的重中之重。今天就结合工作中的内容来分析一下电池监控系统。</p>
<h2 id="电池系统架构">电池系统架构</h2><p>　　Android中的电池使用方式包括AC（即电源适配器）、Wireless（无线充电）、USB、Battery 等不同的模式。在APP层，通常包括电池状态显示等功能。在framework层 ，主要包括从底层获取电池信息、电池管理、LED控制、绘制更新充电图标等功能。因此，bms主要负责电池状态信息读取和更新相应状态。其架构如下：　<br>　<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566Android-bms-arch.png" alt="电池系统架构"></p>
<p>自上而下，Android电池监控系统分为如下几个部分：</p>
<h3 id="电池信息查看APP">电池信息查看APP</h3><p>　　此部分主要是指查看电池信息的APP，比如电池医生、手机内置的电池信息查看APP等。这里就用工作的为例，在拨号状态下输入*#360*#，则会打开电池信息查看APP。如下所示：<br><a id="more"></a>　<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566battery-info.png" alt="电池信息"></p>
<p>　　代码主要路径：</p>
<ul>
<li>packages\apps\Settings\src\com\android\settings\BatteryOemInfo.java  //APP</li>
<li>packages\apps\Dialer\src\com\android\dialer\SpecialCharSequenceMgr.java   // 命令 配置</li>
</ul>
<p>　　在手机 /sys/class/power_supply/bms/、/sys/class/power_supply/battery/文件夹中保存了电池的所有相关信息节点，这些节点是由Linux内核创建，待会儿驱动部分将讲到此内容。此APP比较简单，主要就是读取这些文件节点、接收电池信息广播（后面将讲到此广播由BatteryService.java中发出Intent.ACTION_BATTERY_CHANGED），电池信息包括充电设备等信息，然后将这些内容更新到UI界面加以显示，SpecialCharSequenceMgr.Java中主要实现通过判断拨号命令掉用此APP。</p>
<h3 id="Java框架及本地框架">Java框架及本地框架</h3><p>　　此部分的核心文件是BatteryService.java，作为电池、充电相关的服务，其监听Uevent、读取sysfs 中的状态 、广播Intent.ACTION_BATTERY_CHANGED。此部分代码路径如下：</p>
<p><strong>frameworks\base\services\java\com\android\server</strong></p>
<ul>
<li>frameworks\base\services\java\com\android\server\BatteryService.java   // 电池管理，开机充电led控制</li>
<li>frameworks\base\services\java\com\android\server\am\BatteryStatsService.java // 影响电池的所有信息及操作，如：关机，屏幕亮度、wakelock、GPS等。</li>
</ul>
<p><strong>frameworks\base\core\java\android\os</strong></p>
<ul>
<li>frameworks\base\core\java\android\os\BatteryManager.java // 电池信息广播Intent（ACTION_BATTERY_CHANGED）用到的字符串和常量</li>
<li>frameworks\base\core\java\android\os\BatteryStats.java  // 存取电池使用情况统计，包括wakelocks, processes, packages, and services等</li>
<li><p>frameworks\base\core\java\android\os\BatteryProperties.java  // 打包电池信息读写代码，与下BatteryProperties.cpp同步</p>
</li>
<li><p>frameworks\base\core\java\com\android\internal\os\BatteryStatsImpl.java // 影响电池的所有信息及操作，时间以ms为单位</p>
</li>
<li>frameworks\base\core\java\com\android\internal\app\IBatteryStats.aidl    // .aidl为接口定义文件， 定义电池状态信息及相关操作方法。</li>
</ul>
<p><strong>frameworks\base\packages\SystemUI\src\com\android\systemui</strong></p>
<ul>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\BatteryMeterView.java // 创建系统广播接收器，接收电池信息广播，绘制电池状态图标</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\statusbar\policy\BatteryController.java // 定义一个广播接收器并在构造器里注册接收电池信息广播，收到自己广播后回调修改pluged、level</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\statusbar\policy\BatteryLevel.java // 定义电量百分比显示TextView类</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\power\PowerUI.java // 创建系统广播接收器，接收电池信息广播，弹出低电警告等</li>
</ul>
<p><strong>frameworks\native\services</strong></p>
<ul>
<li>frameworks\native\services\sensorservice\BatteryService.cpp // 定义BatteryService.h中创建的BatteryService类的成员函数</li>
<li>frameworks\native\services\batteryservice\BatteryProperties.cpp // 打包电池信息读写代码,与上BatteryProperties.java同步</li>
<li>frameworks\native\services\batteryservice\IBatteryPropertiesListener.cpp // 监听电池信息  ，和下文件一起为BatteryService.java中的update(BatteryProperties)服务</li>
<li>frameworks\native\services\batteryservice\IBatteryPropertiesRegistrar.cpp  // 注册电池监听</li>
</ul>
<p><strong>system\core\healthd</strong></p>
<ul>
<li>system\core\healthd\BatteryMonitor.cpp // 从/sys/class/power_supply中获取电池信息，并update BatteryProperties</li>
<li>system\core\healthd\BatteryPropertiesRegistrar.cpp // 好像系统没有用到，暂时还不知道此文件的用处</li>
<li>system\core\healthd\healthd.cpp // 监听底层上报事件，调用BatteryMonitor.cpp中的update</li>
</ul>
<p>// BatteryService.java<br>processValuesLocked   connect /dis/ led   广播<br>sendIntentLocked() 电池状态改变，广播</p>
<p>mBatteryPropertiesRegistrar = IBatteryPropertiesRegistrar.Stub.asInterface(b); 注册<br>    BatteryService.this.update(props)<br>      update()<br>        processValuesLocked(); </p>
<p> mBatteryPropertiesRegistrar.registerListener(mBatteryPropertiesListener);<br>frameworks\native\services\batteryservice\IBatteryPropertiesRegistrar.cpp<br>frameworks\native\services\batteryservice\IBatteryPropertiesListener.cpp</p>
<p>　<br>未完待续….</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>Platform Information :<br>　System:    Ａndroid4.4.4<br>　Platform:  Qualcomm msm8916<br>　Author:     Andy Lee<br>　Email:        huaqianlee@gmail.com</em></p>
<p><strong>如有错误欢迎指出，共同学习，共同进步</strong><br>　<br>　　电池对移动设备的重要性不言而喻，所以电池监控系统也是Android的重中之重。今天就结合工作中的内容来分析一下电池监控系统。</p>
<h2 id="电池系统架构">电池系统架构</h2><p>　　Android中的电池使用方式包括AC（即电源适配器）、Wireless（无线充电）、USB、Battery 等不同的模式。在APP层，通常包括电池状态显示等功能。在framework层 ，主要包括从底层获取电池信息、电池管理、LED控制、绘制更新充电图标等功能。因此，bms主要负责电池状态信息读取和更新相应状态。其架构如下：　<br>　<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566Android-bms-arch.png" alt="电池系统架构"></p>
<p>自上而下，Android电池监控系统分为如下几个部分：</p>
<h3 id="电池信息查看APP">电池信息查看APP</h3><p>　　此部分主要是指查看电池信息的APP，比如电池医生、手机内置的电池信息查看APP等。这里就用工作的为例，在拨号状态下输入*#360*#，则会打开电池信息查看APP。如下所示：<br>]]>
    
    </summary>
    
      <category term="电源管理" scheme="http://huaqianlee.me/tags/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 电源管理架构]]></title>
    <link href="http://huaqianlee.me/2015/05/30/Android%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2015/05/30/Android电源管理架构/</id>
    <published>2015-05-30T08:04:45.000Z</published>
    <updated>2015-07-12T06:16:12.720Z</updated>
    <content type="html"><![CDATA[<p>　　对于移动设备，电源管理是相当重要的一部分，因为现在在公司主要负责电源管理部分，所以借用Google对其研究了一下，再结合自己的工作经验，准备接下来写一系列相关的文章。因为现在还研究得不够，所以最初的文章会不够深入。不过我会慢慢研究，然后写一些比较详细的解读。</p>
<h2 id="高通的引导体系结构">高通的引导体系结构</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155304921b788-8a63-472f-be7c-2220a98cf428.jpg" alt="boot"><br><strong>SBL- Second BootLoader</strong><br><a id="more"></a></p>
<h2 id="电源管理框图">电源管理框图</h2><p>　　这里先借用网上一张老版本的图片，后面再自己绘制一张详细的框图补上来。<br><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155305061d93f-df42-46c4-ae36-bd18648583b1.jpg" alt="power"></p>
<h2 id="主要文件及路径">主要文件及路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kernel\kernel\power\*</span><br><span class="line">   arch\arm\match-xxx\pm.c</span><br><span class="line">   driver\power\*</span><br><span class="line">   system\core\charger\charger.c   - 关机充电信息，显示充电<span class="built_in">log</span>等</span><br><span class="line">   上层文件太分散，待后期文件详解再一一列出</span><br></pre></td></tr></table></figure>
<h2 id="Android结构">Android结构</h2><p>　　Android的电源管理主要通过锁和定时器来切换系统的状态(即三种低功耗状态)，使系统功耗降到最低。 电源管理架构分为四大部分： APP，Framework，Hal，Kernel。</p>
<h3 id="应用层(APP)">应用层(APP)</h3><p>　　应用层主要指应用程序及其他使用电源管理的service。</p>
<h3 id="架构层(Framework)">架构层(Framework)</h3><p>　　Framework层为APP提供API接口及协调电源的管理工作，主要包含：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PowerManager.java  // 提供给应用层调用</span><br><span class="line">PowerManagerService.java  // 核心文件</span><br><span class="line">com_android_server_PowerManagerService.cpp、</span><br><span class="line">Power.java  // 提供底层的函数接口,与JNI交互</span><br><span class="line">android_os_Power.cpp  //jni交互文件</span><br></pre></td></tr></table></figure></p>
<p>　　这一层的功能相对比较复杂,比如系统状态的切换，背光的调节及开关，Wake Lock的申请和释放等等，但这一层跟硬件平台无关。</p>
<h3 id="Hal层">Hal层</h3><p>　　Hal层为一个Power.c文件，该文件通过sysfs的方式与kernel进行通信。主要功能有申请wake_lock，释放wake_lock，设置屏幕状态等。所有对电源管理的调用应通过Android的PowerManager API来完成。</p>
<h3 id="Kernel层">Kernel层</h3><p>　　Kernel层的电源管理方案实现主要包含三部分：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kernel\power\：实现了系统电源管理框架机制</span><br><span class="line">Arch\arm(or mips or powerpc)\mach-XXX\pm.c:实现对特定板的处理器电源管理</span><br><span class="line">drivers\power:是设备电源管理的基础框架，为驱动提供了电源管理接口. 实现了针对所有设备的sysfs操作函数.</span><br></pre></td></tr></table></figure></p>
<p>　　android提供了三种低功耗状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">earlysuspend //让某些设备选择进入某种功耗较低的状态，如LCD灭掉</span><br><span class="line"><span class="built_in">suspend</span> // 除电源模块以外的外围模块和CPU均不工作，只有内存保持自刷新的一个工作状态</span><br><span class="line">hibernation// 所有内存镜像都被写入到磁盘中，然后系统关机，重启后系统将恢复到关机之前的状态</span><br></pre></td></tr></table></figure></p>
<h2 id="">　</h2><p>　</p>
<h3 id="电源管理机制">电源管理机制</h3><p>　　Android的电源管理主要通过锁和定时器来切换系统的状态(如上述三种低功耗状态),使系统功耗降到最低.
　</p>
<h4 id="实现流程">实现流程</h4><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/2015530390bc951-ede6-47dd-83ce-c1a6aced6e82.png" alt="framework">
　</p>
<h4 id="状态切换流程">状态切换流程</h4><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/201553020e46e8e-7570-483b-9ea2-375cf4ae59d2.png" alt="state"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　对于移动设备，电源管理是相当重要的一部分，因为现在在公司主要负责电源管理部分，所以借用Google对其研究了一下，再结合自己的工作经验，准备接下来写一系列相关的文章。因为现在还研究得不够，所以最初的文章会不够深入。不过我会慢慢研究，然后写一些比较详细的解读。</p>
<h2 id="高通的引导体系结构">高通的引导体系结构</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155304921b788-8a63-472f-be7c-2220a98cf428.jpg" alt="boot"><br><strong>SBL- Second BootLoader</strong><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Stdudio Linux/windows/mac常用快捷键]]></title>
    <link href="http://huaqianlee.me/2015/05/29/Android-Stdudio-Linux-windows-mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://huaqianlee.me/2015/05/29/Android-Stdudio-Linux-windows-mac常用快捷键/</id>
    <published>2015-05-29T12:10:41.000Z</published>
    <updated>2015-07-17T16:29:02.271Z</updated>
    <content type="html"><![CDATA[<p>　　前些时间把Android Studio的环境折腾好，典型的geek风一下子完全吸引了我，比eclipse好用太多了，有很多意外的功能,快捷键可以自定义，但我基本都用的默认的。本来用Macbook Pro做Android开发是最好的选择，但自己平时要搞Linux/Android底层相关的东西，thinkpad就成为最好的选择，所以就入手了thinkpad，用着Ubuntu和Windows，先总结我使用环境下的快捷键，等入手Mac后再添加Mac的快捷键。<br>　<br><a id="more"></a>　　</p>
<h2 id="AS快捷键">AS快捷键</h2><table>
<thead>
<tr>
<th>Action</th>
<th>Win/Linux</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Common：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>编译工程</td>
<td>Ctrl+F9</td>
<td></td>
</tr>
<tr>
<td>运行</td>
<td>Alt+Shift+X</td>
<td></td>
</tr>
<tr>
<td>调试运行</td>
<td>Alt+Shift+D</td>
<td></td>
</tr>
<tr>
<td>git push</td>
<td>Ctrl+Shift+K</td>
<td></td>
</tr>
<tr>
<td>打开Project Structure</td>
<td>Ctrl+Alt+Shift+S</td>
<td></td>
</tr>
<tr>
<td>打开settings</td>
<td>Ctrl+Alt+S</td>
<td></td>
</tr>
<tr>
<td>重命名</td>
<td>Shift +F６</td>
<td></td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl+F</td>
<td></td>
</tr>
<tr>
<td>全局查找</td>
<td>Ctrl+Shift+F</td>
<td></td>
</tr>
<tr>
<td>文件查找</td>
<td>双击Shift</td>
<td></td>
</tr>
<tr>
<td>最近文件</td>
<td>Ctrl+E</td>
<td></td>
</tr>
<tr>
<td>最近编辑文件</td>
<td>Ctrl+Shift+E</td>
<td></td>
</tr>
<tr>
<td>查看继承类</td>
<td>F4</td>
<td></td>
</tr>
<tr>
<td><strong>Code：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>导入包</td>
<td>Alt+Enter</td>
<td></td>
</tr>
<tr>
<td>注释代码(//)</td>
<td>Ctrl + /</td>
<td></td>
</tr>
<tr>
<td>注释代码(/**/)</td>
<td>Ctrl + Shift + /</td>
<td></td>
</tr>
<tr>
<td>格式化代码</td>
<td>Ctrl + Alt + L</td>
<td></td>
</tr>
<tr>
<td>清除无效包引用</td>
<td>Alt + Ctrl + O</td>
<td></td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl + F</td>
<td></td>
</tr>
<tr>
<td>查找+替换</td>
<td>Ctrl + R</td>
<td></td>
</tr>
<tr>
<td>上下移动代码</td>
<td>Alt + Shift + Up/Down</td>
<td></td>
</tr>
<tr>
<td>删除行</td>
<td>Ctrl + Y</td>
<td></td>
</tr>
<tr>
<td>重命名</td>
<td>Ctrl+Shift+R</td>
<td></td>
</tr>
<tr>
<td>以代码块单位移动光标</td>
<td>Alt+Up/Down</td>
<td></td>
</tr>
<tr>
<td>扩大缩小选中范围</td>
<td>Ctrl + W/Ctrl + Shift + W</td>
<td></td>
</tr>
<tr>
<td>快捷生成结构体</td>
<td>Ctrl + Alt + T</td>
<td></td>
</tr>
<tr>
<td>快捷覆写方法</td>
<td>Ctrl + O</td>
<td></td>
</tr>
<tr>
<td>快捷定位到行首/尾</td>
<td>Ctrl + Left/Right</td>
<td></td>
</tr>
<tr>
<td>快速切换到上/下一视图</td>
<td>Alt+ Left/Right</td>
<td></td>
</tr>
<tr>
<td>折叠展开代码块</td>
<td>Ctrl + Plus/Minus(+/-)</td>
<td></td>
</tr>
<tr>
<td>折叠展开全部代码块</td>
<td>Ctrl + Shift + Plus/Minus</td>
<td></td>
</tr>
<tr>
<td>文件方法结构</td>
<td>Ctrl + F12</td>
<td></td>
</tr>
<tr>
<td>查找调用的位置</td>
<td>Ctrl + Alt + H</td>
<td></td>
</tr>
<tr>
<td>大小写转换</td>
<td>Ctrl + Shift + U</td>
<td></td>
</tr>
<tr>
<td><strong>Debug：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>单步调试，进入函数</td>
<td>F5</td>
<td></td>
</tr>
<tr>
<td>单步调试，不进入函数</td>
<td>F6</td>
<td></td>
</tr>
<tr>
<td>跳出函数</td>
<td>F7</td>
<td></td>
</tr>
<tr>
<td>执行到下一断点</td>
<td>F8</td>
<td></td>
<td>　</td>
</tr>
</tbody>
</table>
<blockquote>
<p>计划过些时间入手一台MacBook Pro， 到时候再将Mac的快捷方式加进来，并在使用中不断完善此表格.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　前些时间把Android Studio的环境折腾好，典型的geek风一下子完全吸引了我，比eclipse好用太多了，有很多意外的功能,快捷键可以自定义，但我基本都用的默认的。本来用Macbook Pro做Android开发是最好的选择，但自己平时要搞Linux/Android底层相关的东西，thinkpad就成为最好的选择，所以就入手了thinkpad，用着Ubuntu和Windows，先总结我使用环境下的快捷键，等入手Mac后再添加Mac的快捷键。<br>　<br>]]>
    
    </summary>
    
      <category term="Android Studio" scheme="http://huaqianlee.me/tags/Android-Studio/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重新起航+暴力学习计划]]></title>
    <link href="http://huaqianlee.me/2015/05/27/%E9%87%8D%E6%96%B0%E8%B5%B7%E8%88%AA/"/>
    <id>http://huaqianlee.me/2015/05/27/重新起航/</id>
    <published>2015-05-27T14:23:58.000Z</published>
    <updated>2015-07-13T15:36:08.696Z</updated>
    <content type="html"><![CDATA[<p>　　几个月前，在网上看到了一篇<a href="http://www.cnblogs.com/jesse2013/p/how-to-learn-english.html" target="_blank" rel="external">Jesse Liu写的学习英语的文章</a>，受到Jesse的启发，制定了学习计划和任务监控时间表，也按照计划执行了很长一段时间，可惜一个多月前生病后因为种种原因就落下了，后面虽然有断断续续地学习，但仍造成学习进度严重滞后了。</p>
<p>　　按照计划来学习来工作很有帮助，能帮我克服懒惰等坏习惯，让自己每天知道应该干什么，养成好的学习习惯。所以今天重新拟定计划，然后按照计划来学习提升自己。就目前来看自己主要有英语\Linux\Android\Java四个大部分需要花几乎所有时间来学习。</p>
<p>　　执行计划的最大阻碍是时间和身体，由于工作性质的原因，很多时候会加班。因此需要随时关注自己的计划，将琐碎时间完全利用起来，<strong>若什么时候未能完成当天的任务，就协调时间将其补起来</strong>，如此就好。男人就是得逼自己一把，才能知道自己有多优秀，何况自己已经27了，时间不等人,能让自己拼的时间已不多。</p>
<p>　　所以，接下来就对自己接下来的学习工作做一个大的规划，很暴力的计划，详细计划就在为知笔记的每日代办中记录。</p>
<blockquote>
<p>注:计划中的内容并不都是全新学习，很多都是断断续续看过，所以对自己时间定得比较紧比较死，对其他人不完全具有参考性</p>
</blockquote>
<h2 id="英语学习">英语学习</h2><p>　　在开始再次学习英语之前，自己仅仅因为工作经常接触英语的原因，看到大篇英文不会恐惧，能基本看懂，但是词汇量估计就高中水平吧，听说写就更凄惨，对语法几乎忘得一干二净，能写出通顺的话语都很困难，听说就不用说了。<br>　　<br>　　工作几年后越来越意识到英语的重要性，尤其是在学习Android等技术的时候。自己慢慢地也对英语产生了兴趣，所以就下定了学习英语的决心。一开始，找了英文原著来看，结果每页都有一大半不认识;找了美剧和TED演讲之类的来听，结果能听懂的少得可怜。如此坚持了一段时间，说实话严重打击了我的积极性。<br>　<br>　　直到某天，无意之中看到Jesse的文章，大受鼓舞，在心里呐喊:我就应该这样来学习。所以当天就参考Jesse的方式制定了一个学习计划，也就是上一份流产的学习计划。现在重新拟定一份计划，自己接下来需要做的就是严格按照此计划来学习。</p>
<h3 id="英语学习时间监控">英语学习时间监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CET-4词汇</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/1</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">NEC2</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">53天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">NEC1 + 音标Review</td>
<td style="text-align:center">2015/5/31</td>
<td style="text-align:center">2015/6/7</td>
<td style="text-align:center">8天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">NEC3</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">NEC4</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">专项阅读训练</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">63天</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">CET-6词汇</td>
<td style="text-align:center">2015/10/2</td>
<td style="text-align:center">2015/11/1</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">口语900句</td>
<td style="text-align:center">2015/10/1</td>
<td style="text-align:center">2015/12/12</td>
<td style="text-align:center">73天</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">专项写作训练</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">14天</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">听说训练</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">2017/1/1</td>
<td style="text-align:center">N天</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">商务英语</td>
<td style="text-align:center">2015/12/7</td>
<td style="text-align:center">2015/12/30</td>
<td style="text-align:center">23天</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">51Talk对话训练</td>
<td style="text-align:center">2015/10/1</td>
<td style="text-align:center">2016/6/30</td>
<td style="text-align:center">N天</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>　</p>
<h4 id="CET-4词汇背诵计划">CET-4词汇背诵计划</h4><p><em>2015/5/28~2015/7/1</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">List4</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">List5</td>
<td style="text-align:center">List6</td>
<td style="text-align:center">List7</td>
<td style="text-align:center">List8</td>
<td style="text-align:center">List9</td>
<td style="text-align:center">List10</td>
<td style="text-align:center">List11</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">List12</td>
<td style="text-align:center">List13</td>
<td style="text-align:center">List14</td>
<td style="text-align:center">List15</td>
<td style="text-align:center">List16</td>
<td style="text-align:center">List17</td>
<td style="text-align:center">List18</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">List19</td>
<td style="text-align:center">List20</td>
<td style="text-align:center">List21</td>
<td style="text-align:center">List22</td>
<td style="text-align:center">List23</td>
<td style="text-align:center">List24</td>
<td style="text-align:center">List25</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">List26</td>
<td style="text-align:center">List27</td>
<td style="text-align:center">List28</td>
<td style="text-align:center">List29</td>
<td style="text-align:center">List30</td>
<td style="text-align:center">List31</td>
<td style="text-align:center">List32</td>
</tr>
<tr>
<td style="text-align:center">第六周</td>
<td style="text-align:center">List33</td>
<td style="text-align:center">List34</td>
<td style="text-align:center">List35</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="NEC2学习计划">NEC2学习计划</h4><p><em>2015/5/28~2015/7/19</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">v1</td>
<td style="text-align:center">v2</td>
<td style="text-align:center">v3/4</td>
<td style="text-align:center">v5/6/7</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">v8</td>
<td style="text-align:center">v9/10</td>
<td style="text-align:center">v11/12</td>
<td style="text-align:center">v13/14</td>
<td style="text-align:center">v15/16</td>
<td style="text-align:center">v17/18</td>
<td style="text-align:center">v19/22</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">v23/24</td>
<td style="text-align:center">v25/26</td>
<td style="text-align:center">v27/28</td>
<td style="text-align:center">v29/30</td>
<td style="text-align:center">v31/32</td>
<td style="text-align:center">v33/34</td>
<td style="text-align:center">v35/38</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">v39/40</td>
<td style="text-align:center">v41/42</td>
<td style="text-align:center">v43/44</td>
<td style="text-align:center">v45/46</td>
<td style="text-align:center">v47/48</td>
<td style="text-align:center">v49/50</td>
<td style="text-align:center">v51/54</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">v55/58</td>
<td style="text-align:center">v59/60</td>
<td style="text-align:center">v61/62</td>
<td style="text-align:center">v63/64</td>
<td style="text-align:center">v65/66</td>
<td style="text-align:center">v67/68</td>
<td style="text-align:center">v69/72</td>
</tr>
<tr>
<td style="text-align:center">第六周</td>
<td style="text-align:center">v73/74</td>
<td style="text-align:center">v75/76</td>
<td style="text-align:center">v77/78</td>
<td style="text-align:center">v79/80</td>
<td style="text-align:center">v81</td>
<td style="text-align:center">69/70</td>
<td style="text-align:center">71/72</td>
</tr>
<tr>
<td style="text-align:center">第七周</td>
<td style="text-align:center">73/74</td>
<td style="text-align:center">75/76</td>
<td style="text-align:center">77/78</td>
<td style="text-align:center">79/80</td>
<td style="text-align:center">81/82</td>
<td style="text-align:center">83/84</td>
<td style="text-align:center">85/86</td>
</tr>
<tr>
<td style="text-align:center">第八周</td>
<td style="text-align:center">87/88</td>
<td style="text-align:center">89/90</td>
<td style="text-align:center">91/92</td>
<td style="text-align:center">93/94</td>
<td style="text-align:center">95/96</td>
<td style="text-align:center">null</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h5 id="NEC1+音标review计划">NEC1+音标review计划</h5><p><em>2015/5/31~2015/6/7</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/30/音</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">1/50</td>
<td style="text-align:center">31/70</td>
<td style="text-align:center">51/90/音</td>
<td style="text-align:center">71/110</td>
<td style="text-align:center">91/130</td>
<td style="text-align:center">111/144</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<blockquote>
<p>重复表示第二天复习</p>
</blockquote>
<h2 id="Linux学习">Linux学习</h2><p>　　关于Linux，断断续续也搞了这么些日子了，但是也还只学了皮毛，所以很有必要继续深入学习，对Linux内核有更深入的了解，这样也有助于打通Android的任督二脉， 所以今年就看一些以前看过却没能看完看懂的经典书籍。</p>
<h3 id="Linux相关书籍阅读监控">Linux相关书籍阅读监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Linux内核完全注释</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/14</td>
<td style="text-align:center">16天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Linux设备驱动详解</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">2015/7/26</td>
<td style="text-align:center">28天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">深入理解Linux内核</td>
<td style="text-align:center">2015/7/26</td>
<td style="text-align:center">2015/8/15</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Linux内核情景分析</td>
<td style="text-align:center">2015/8/16</td>
<td style="text-align:center">2015/9/5</td>
<td style="text-align:center">51天</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="Linux内核完全注释阅读计划">Linux内核完全注释阅读计划</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center"></td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/60</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">60/92</td>
<td style="text-align:center">92/117</td>
<td style="text-align:center">122/132</td>
<td style="text-align:center">133/170</td>
<td style="text-align:center">171/213</td>
<td style="text-align:center">213/230</td>
<td style="text-align:center">231/326</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">328/346</td>
<td style="text-align:center">347/363</td>
<td style="text-align:center">363/389</td>
<td style="text-align:center">389/409</td>
<td style="text-align:center">409/415</td>
<td style="text-align:center">417/437</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h2 id="Java学习">Java学习</h2><p>　　关于Java的学习，主要让自己对一门语言能精通掌握，提升自己的编程思维。然后，每次看到别人搞出酷酷的博客和网页，就是各种羡慕嫉妒恨，所以JavaWeb部分也是接下来学习的重点。</p>
<h3 id="Java学习监控">Java学习监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Think in Java</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/28</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Java EE</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">？</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Effective Java</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">？</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="Think_in_Java阅读计划">Think in Java阅读计划</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/63</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">64/107</td>
<td style="text-align:center">109/147</td>
<td style="text-align:center">148/168</td>
<td style="text-align:center">169/215</td>
<td style="text-align:center">216/245</td>
<td style="text-align:center">248/281</td>
<td style="text-align:center">283/312</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">313/334</td>
<td style="text-align:center">334/350</td>
<td style="text-align:center">352/371</td>
<td style="text-align:center">372/400</td>
<td style="text-align:center">400/420</td>
<td style="text-align:center">420/432</td>
<td style="text-align:center">433/457</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">459/483</td>
<td style="text-align:center">483/512</td>
<td style="text-align:center">512/524</td>
<td style="text-align:center">525/539</td>
<td style="text-align:center">539/568</td>
<td style="text-align:center">568/590</td>
<td style="text-align:center">590/619</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">620/649</td>
<td style="text-align:center">650/674</td>
<td style="text-align:center">674/702</td>
<td style="text-align:center">702/722</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<p>　</p>
<h2 id="Android学习">Android学习</h2><p>　　Android不用说，绝对是接下来几年的大趋势，自己又对Android超感兴趣，所以Android的学习是今年接下来日子的重中之重。我要从最底层到APP完全了解，所以要走的路很长。</p>
<h3 id="Android学习监控">Android学习监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">第一行代码(remaining)+developer</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/28</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Android Programing</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">2015/8/1</td>
<td style="text-align:center">33天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">stormzhang+Open source</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">?</td>
<td style="text-align:center">N天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Android源码分析</td>
<td style="text-align:center">2015/7/20</td>
<td style="text-align:center">2015/10/31</td>
<td style="text-align:center">103天</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="第一行代码(remaining)+developer">第一行代码(remaining)+developer</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">7-1/2</td>
<td style="text-align:center">7-3/4</td>
<td style="text-align:center">8-1/2</td>
<td style="text-align:center">8-3/5</td>
<td style="text-align:center">9-1/3</td>
<td style="text-align:center">9-4/7</td>
<td style="text-align:center">10-1/3</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">10-4/6</td>
<td style="text-align:center">11-1/3</td>
<td style="text-align:center">11-4/6</td>
<td style="text-align:center">12</td>
<td style="text-align:center">13</td>
<td style="text-align:center">14-1/4</td>
<td style="text-align:center">14-5/9</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">d1</td>
<td style="text-align:center">d2</td>
<td style="text-align:center">d3</td>
<td style="text-align:center">d4</td>
<td style="text-align:center">d5</td>
<td style="text-align:center">d6</td>
<td style="text-align:center">d7</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">d8</td>
<td style="text-align:center">d9</td>
<td style="text-align:center">d10</td>
<td style="text-align:center">d11</td>
<td style="text-align:center">d12</td>
<td style="text-align:center">d13</td>
<td style="text-align:center">d15/16</td>
</tr>
</tbody>
</table>
<h4 id="Android_Programing">Android Programing</h4><p><em>2015/6/29~2015/8/1</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">c1</td>
<td style="text-align:center">c2</td>
<td style="text-align:center">c3/c4</td>
<td style="text-align:center">c5</td>
<td style="text-align:center">c6</td>
<td style="text-align:center">c7</td>
<td style="text-align:center">c8</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">c9</td>
<td style="text-align:center">c10</td>
<td style="text-align:center">c11</td>
<td style="text-align:center">c12</td>
<td style="text-align:center">c13</td>
<td style="text-align:center">c14</td>
<td style="text-align:center">c15</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">c16</td>
<td style="text-align:center">c17</td>
<td style="text-align:center">c18</td>
<td style="text-align:center">c19</td>
<td style="text-align:center">c20</td>
<td style="text-align:center">c21</td>
<td style="text-align:center">c22</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">c23</td>
<td style="text-align:center">c24</td>
<td style="text-align:center">c25</td>
<td style="text-align:center">c26</td>
<td style="text-align:center">c27</td>
<td style="text-align:center">c28</td>
<td style="text-align:center">c29</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">c30</td>
<td style="text-align:center">c31</td>
<td style="text-align:center">c32</td>
<td style="text-align:center">c33</td>
<td style="text-align:center">c34</td>
<td style="text-align:center">c35</td>
<td style="text-align:center">c36</td>
</tr>
</tbody>
</table>
<h2 id="时间拆解">时间拆解</h2><p>　　一天24小时,10小时上班,6小时睡觉,2小时吃饭休息,剩下6小时学习.睡觉前看自控力,冥想.</p>
<h3 id="每日监控">每日监控</h3><table>
<thead>
<tr>
<th style="text-align:center">Time</th>
<th style="text-align:center">工作日</th>
<th style="text-align:center">休息日</th>
<th style="text-align:center">Sum-Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7.20/8:45</td>
<td style="text-align:center">英语复习预习</td>
<td style="text-align:center">英语复习预习</td>
<td style="text-align:center">1h25m</td>
</tr>
<tr>
<td style="text-align:center">8:40/19:40</td>
<td style="text-align:center">琐碎时间=English+Android</td>
<td style="text-align:center">English+Android+Review</td>
<td style="text-align:center">11h</td>
</tr>
<tr>
<td style="text-align:center">20:30/22:00</td>
<td style="text-align:center">英语</td>
<td style="text-align:center">英语</td>
<td style="text-align:center">1h30m</td>
</tr>
<tr>
<td style="text-align:center">22:00/22:40</td>
<td style="text-align:center">锻炼+洗澡</td>
<td style="text-align:center">锻炼+洗澡</td>
<td style="text-align:center">40m</td>
</tr>
<tr>
<td style="text-align:center">22:40/23:40</td>
<td style="text-align:center">英语+Java</td>
<td style="text-align:center">英语+Java</td>
<td style="text-align:center">1h</td>
</tr>
<tr>
<td style="text-align:center">23:40/00:50</td>
<td style="text-align:center">Linux/Android</td>
<td style="text-align:center">Linux/Android</td>
<td style="text-align:center">1h10m</td>
</tr>
<tr>
<td style="text-align:center">00:50/01:10</td>
<td style="text-align:center">自控力+冥想</td>
<td style="text-align:center">自控力+冥想</td>
<td style="text-align:center">20m</td>
</tr>
</tbody>
</table>
<blockquote>
<p>学习情况改变,则调整每日监控　</p>
</blockquote>
<p>　　不仅仅需要按照上面计划来完成，学无止境，还需要不断的阅读,不断的练习。</p>
<p>　　从大四实习以来，做单片机、做FPGA、做Linux，一路曲折到现在进入Android驱动行业，另通过自己业余时间的不断折腾，自己总算知道自己想做什么，喜欢做什么。只是现在因为工作的原因，时间并不充裕，所以这条路显得更加长更加艰难。有时候，我也在想我有必要学这么多东西吗，可是人生不是就在于折腾吗，自己既然喜欢这些东西，为什么不折腾下去，让生命更有意义呢？</p>
<p>　　此博随时更新,直到完成此计划.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　几个月前，在网上看到了一篇<a href="http://www.cnblogs.com/jesse2013/p/how-to-learn-english.html">Jesse Liu写的学习英语的文章</a>，受到Jesse的启发，制定了学习计划和任务监控时间表，也按照计划执行了很长一段时间，可惜一个多月前生病后因为种种原因就落下了，后面虽然有断断续续地学习，但仍造成学习进度严重滞后了。</p>
<p>　　按照计划来学习来工作很有帮助，能帮我克服懒惰等坏习惯，让自己每天知道应该干什么，养成好的学习习惯。所以今天重新拟定计划，然后按照计划来学习提升自己。就目前来看自己主要有英语\Linux\Android\Java四个大部分需要花几乎所有时间来学习。</p>
<p>　　执行计划的最大阻碍是时间和身体，由于工作性质的原因，很多时候会加班。因此需要随时关注自己的计划，将琐碎时间完全利用起来，<strong>若什么时候未能完成当天的任务，就协调时间将其补起来</strong>，如此就好。男人就是得逼自己一把，才能知道自己有多优秀，何况自己已经27了，时间不等人,能让自己拼的时间已不多。</p>
<p>　　所以，接下来就对自己接下来的学习工作做一个大的规划，很暴力的计划，详细计划就在为知笔记的每日代办中记录。</p>
<blockquote>
<p>注:计划中的内容并不都是全新学习，很多都是断断续续看过，所以对自己时间定得比较紧比较死，对其他人不完全具有参考性</p>
</blockquote>
<h2 id="英语学习">英语学习</h2><p>　　在开始再次学习英语之前，自己仅仅因为工作经常接触英语的原因，看到大篇英文不会恐惧，能基本看懂，但是词汇量估计就高中水平吧，听说写就更凄惨，对语法几乎忘得一干二净，能写出通顺的话语都很困难，听说就不用说了。<br>　　<br>　　工作几年后越来越意识到英语的重要性，尤其是在学习Android等技术的时候。自己慢慢地也对英语产生了兴趣，所以就下定了学习英语的决心。一开始，找了英文原著来看，结果每页都有一大半不认识;找了美剧和TED演讲之类的来听，结果能听懂的少得可怜。如此坚持了一段时间，说实话严重打击了我的积极性。<br>　<br>　　直到某天，无意之中看到Jesse的文章，大受鼓舞，在心里呐喊:我就应该这样来学习。所以当天就参考Jesse的方式制定了一个学习计划，也就是上一份流产的学习计划。现在重新拟定一份计划，自己接下来需要做的就是严格按照此计划来学习。</p>
<h3 id="英语学习时间监控">英语学习时间监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CET-4词汇</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/1</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">NEC2</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">53天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">NEC1 + 音标Review</td>
<td style="text-align:center">2015/5/31</td>
<td style="text-align:center">2015/6/7</td>
<td style="text-align:center">8天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">NEC3</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">NEC4</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">专项阅读训练</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">63天</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">CET-6词汇</td>
<td style="text-align:center">2015/10/2</td>
<td style="text-align:center">2015/11/1</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">口语900句</td>
<td style="text-align:center">2015/10/1</td>
<td style="text-align:center">2015/12/12</td>
<td style="text-align:center">73天</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">专项写作训练</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">14天</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">听说训练</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">2017/1/1</td>
<td style="text-align:center">N天</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">商务英语</td>
<td style="text-align:center">2015/12/7</td>
<td style="text-align:center">2015/12/30</td>
<td style="text-align:center">23天</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">51Talk对话训练</td>
<td style="text-align:center">2015/10/1</td>
<td style="text-align:center">2016/6/30</td>
<td style="text-align:center">N天</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="Life" scheme="http://huaqianlee.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在内核里操作文件(create/open/read/write)]]></title>
    <link href="http://huaqianlee.me/2015/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E6%A0%B8%E9%87%8C%E6%93%8D%E4%BD%9C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6-create-open-read-write/"/>
    <id>http://huaqianlee.me/2015/03/17/如何在内核里操作读写文件-create-open-read-write/</id>
    <published>2015-03-17T14:15:42.000Z</published>
    <updated>2015-07-17T14:52:06.230Z</updated>
    <content type="html"><![CDATA[<p>　　因之前工作需要在kernel里存取数据到文件中，特意研究了一下怎么做，我们应尽可能避免直接操作文件I/O，选择通过调用VFS（虚拟文件系统）的函数来实现，我的实现demo如下：</p>
<h2 id="Includes">Includes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/fs.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/segment.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/uaccess.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/buffer_head.h&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Opening_a_file">Opening a file</h2><a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> file* file_open(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">int</span> flags, <span class="keyword">int</span> rights) &#123;</span><br><span class="line">    <span class="keyword">struct</span> file* filp = NULL;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 内核中进行系统调用（如文件操作）时，必须调用下面两句，对其进行保护，其作用是让内核能访问用户空间 */</span></span><br><span class="line">    oldfs = get_fs();  <span class="comment">// 备份当前进程地址空间</span></span><br><span class="line">    set_fs(get_ds()); <span class="comment">// 设置进程地址空间为虚拟地址空间上限，#define get_ds() (KERNEL_DS) ,</span></span><br><span class="line">    filp = filp_open(path, flags, rights); <span class="comment">// 调用文件打开函数</span></span><br><span class="line">    set_fs(oldfs); <span class="comment">//恢复进程地址空间</span></span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(filp)) &#123;</span><br><span class="line">        err = PTR_ERR(filp);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Close_a_file">Close a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">file_close</span><span class="params">(<span class="keyword">struct</span> file* file)</span> </span>&#123;</span><br><span class="line">    filp_close(file, NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reading_from_a_file">Reading from a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_read</span><span class="params">(<span class="keyword">struct</span> file* file, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> offset, <span class="keyword">unsigned</span> <span class="keyword">char</span>* data, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    oldfs = get_fs();</span><br><span class="line">    set_fs(get_ds());</span><br><span class="line"></span><br><span class="line">    ret = vfs_read(file, data, size, &amp;offset);  <span class="comment">// 读取文件，文件存在用户空间</span></span><br><span class="line"></span><br><span class="line">    set_fs(oldfs);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Writing_to_a_file">Writing to a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_write</span><span class="params">(<span class="keyword">struct</span> file* file, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> offset, <span class="keyword">unsigned</span> <span class="keyword">char</span>* data, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    oldfs = get_fs();</span><br><span class="line">    set_fs(get_ds());</span><br><span class="line"></span><br><span class="line">    ret = vfs_write(file, data, size, &amp;offset); <span class="comment">// 写文件</span></span><br><span class="line"></span><br><span class="line">    set_fs(oldfs);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Syncing_changes_a_file">Syncing changes a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_sync</span><span class="params">(<span class="keyword">struct</span> file* file)</span> </span>&#123;</span><br><span class="line">    vfs_fsync(file, <span class="number">0</span>); <span class="comment">// 同步文件，确定文件写到硬盘</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　因之前工作需要在kernel里存取数据到文件中，特意研究了一下怎么做，我们应尽可能避免直接操作文件I/O，选择通过调用VFS（虚拟文件系统）的函数来实现，我的实现demo如下：</p>
<h2 id="Includes">Includes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/fs.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/segment.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/uaccess.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/buffer_head.h&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Opening_a_file">Opening a file</h2>]]>
    
    </summary>
    
      <category term="kernel" scheme="http://huaqianlee.me/tags/kernel/"/>
    
      <category term="文件IO" scheme="http://huaqianlee.me/tags/%E6%96%87%E4%BB%B6IO/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android不带电量计的电量计算]]></title>
    <link href="http://huaqianlee.me/2015/01/21/%E9%AB%98%E9%80%9AAndroid%E4%B8%8D%E5%B8%A6%E7%94%B5%E9%87%8F%E8%AE%A1%E7%9A%84%E7%94%B5%E9%87%8F%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/"/>
    <id>http://huaqianlee.me/2015/01/21/高通Android不带电量计的电量计算方式/</id>
    <published>2015-01-21T12:10:01.000Z</published>
    <updated>2015-07-17T16:43:26.060Z</updated>
    <content type="html"><![CDATA[<p>　　一直比较好奇，Android的电量是怎么计算出来的，今天就借用qualcomm平台的8916芯片研究了一下，因为其不带电量计，所以是通过一个bms系统计算出来的，下面就来详细分析一下计算方法。</p>
<h2 id="SOC（state_of_charge_荷电状态_-_电量）">SOC（state of charge 荷电状态 - 电量）</h2><p>英文缩写:<br>FCC　　Full-charge capacity<br>RC 　　Remaining capacity (剩余电量)<br>CC 　　Coulumb counter<br>UUC　　Unusable capacity<br>RUC　　Remaining usable capacity<br>SoC　　State of charge<br>OCV　　Open circuit voltage<br><a id="more"></a><br>SOC=(RC-CC-UUC)/(FCC-UUC)<br>RUC=RC-CC-UUC</p>
<h2 id="电池电量决定因素">电池电量决定因素</h2><p>　　电池电量百分比主要有电池dtsi文件中百分比参数计算而得，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">	qcom,pc-temp-ocv-lut &#123;</span><br><span class="line">		qcom,lut-col-legend = &lt;(-<span class="number">10</span>) <span class="number">0</span> <span class="number">25</span> <span class="number">50</span>&gt;;  // Temperature      lut-data（电池OCV ）的column</span><br><span class="line">		qcom,lut-row-legend =  &lt;<span class="number">100</span> <span class="number">89</span> <span class="number">78</span>&gt;,     // Capacity Percent        row</span><br><span class="line">				&lt;<span class="number">67</span> <span class="number">56</span> <span class="number">45</span>&gt;,</span><br><span class="line">				&lt;<span class="number">34</span> <span class="number">23</span> <span class="number">14</span>&gt;,</span><br><span class="line">				&lt;<span class="number">8</span> <span class="number">4</span> <span class="number">0</span>&gt;;</span><br><span class="line">...				</span><br><span class="line">		qcom,lut-data = </span><br><span class="line">		&lt;<span class="number">4290</span>	<span class="number">4285</span>	<span class="number">4327</span>	<span class="number">4328</span>&gt;,</span><br><span class="line">		&lt;<span class="number">4151</span>	<span class="number">4162</span>	<span class="number">4193</span>	<span class="number">4208</span>&gt;,</span><br><span class="line">		&lt;<span class="number">4064</span>	<span class="number">4072</span>	<span class="number">4080</span>	<span class="number">4016</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3928</span>	<span class="number">3943</span>	<span class="number">3963</span>	<span class="number">3980</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3874</span>	<span class="number">3881</span>	<span class="number">3881</span>	<span class="number">3894</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3809</span>	<span class="number">3834</span>	<span class="number">3823</span>	<span class="number">3820</span>&gt;,</span><br><span class="line"></span><br><span class="line">		&lt;<span class="number">3768</span>	<span class="number">3785</span>	<span class="number">3793</span>	<span class="number">3792</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3733</span>	<span class="number">3756</span>	<span class="number">3784</span>	<span class="number">3785</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3701</span>	<span class="number">3723</span>	<span class="number">3762</span>	<span class="number">3761</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3624</span>	<span class="number">3643</span>	<span class="number">3739</span>	<span class="number">3738</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3614</span>	<span class="number">3623</span>	<span class="number">3689</span>	<span class="number">3688</span>&gt;, 	</span><br><span class="line">		&lt;<span class="number">3510</span>	<span class="number">3499</span>	<span class="number">3455</span>	<span class="number">3458</span>&gt;; </span><br><span class="line">	</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="关键结构">关键结构</h2><h3 id="dts_table_structure：">dts table structure：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * struct pc_temp_ocv_lut -</span><br><span class="line"> * @rows:	number of percent charge entries should be &lt;= PC_TEMP_ROWS</span><br><span class="line"> * @cols:	number of temperature entries should be &lt;= PC_TEMP_COLS</span><br><span class="line"> * @temp:	the temperatures at <span class="built_in">which</span> ocv data is available <span class="keyword">in</span> the table</span><br><span class="line"> *		The temperatures must be <span class="keyword">in</span> increasing order from <span class="number">0</span> to rows.</span><br><span class="line"> * @percent:	the percent charge at <span class="built_in">which</span> ocv data is available <span class="keyword">in</span> the table</span><br><span class="line"> *		The  percentcharge must be <span class="keyword">in</span> decreasing order from <span class="number">0</span> to cols.</span><br><span class="line"> * @ocv:	the open circuit voltage</span><br><span class="line"> */</span><br><span class="line">struct pc_temp_ocv_lut &#123;</span><br><span class="line">	int rows;</span><br><span class="line">	int cols;</span><br><span class="line">	int temp[PC_TEMP_COLS];</span><br><span class="line">	int percent[PC_TEMP_ROWS];</span><br><span class="line">	int ocv[PC_TEMP_ROWS][PC_TEMP_COLS];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="calculate_percentcharge_function">calculate percentcharge  function</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int linear_interpolate(int y0, int x0, int y1, int x1, int x)</span><br><span class="line">	<span class="keyword">if</span> (y0 == y1 || x == x0)	<span class="built_in">return</span> y0;</span><br><span class="line">	<span class="keyword">if</span> (x1 == x0 || x == x1)	<span class="built_in">return</span> y1;</span><br><span class="line">	<span class="built_in">return</span> y0 + ((y1 - y0) * (x - x0) / (x1 - x0));</span><br></pre></td></tr></table></figure>
<h2 id="驱动分析">驱动分析</h2><h3 id="关键函数：">关键函数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// File:  qpnp-vm-bms.c</span><br><span class="line">    lookup_soc_ocv(struct qpnp_bms_chip *chip, int ocv_uv, int batt_temp)、</span><br><span class="line">soc_ocv = interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, ocv_uv / <span class="number">1000</span>);  //calculate the  capacity percent</span><br><span class="line">soc_cutoff = interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, chip-&gt;dt.cfg_v_cutoff_uv / <span class="number">1000</span>);</span><br><span class="line">soc_final = DIV_ROUND_CLOSEST(<span class="number">100</span> * (soc_ocv - soc_cutoff),(<span class="number">100</span> - soc_cutoff));</span><br><span class="line">      DIV_ROUND_CLOSEST(x,y)    ---&gt;    (x-<span class="number">1</span>&gt;<span class="number">0</span>) || (y-<span class="number">1</span>&gt;<span class="number">0</span>) || x&gt;<span class="number">0</span>  ? (x+y/<span class="number">2</span>)/y : (x-y/<span class="number">2</span>)/y</span><br><span class="line"><span class="keyword">if</span> (!is_battery_charging(chip) &amp;&amp; chip-&gt;current_now &gt; <span class="number">0</span>) // 没有充电 重新计算电量</span><br><span class="line">        iavg_ma = calculate_uuc_iavg(chip);</span><br><span class="line">        fcc = interpolate_fcc(chip-&gt;batt_data-&gt;fcc_temp_lut,batt_temp);</span><br><span class="line">        acc = interpolate_acc(chip-&gt;batt_data-&gt;ibat_acc_lut,	batt_temp, iavg_ma);</span><br><span class="line">    both call ：</span><br><span class="line">linear_interpolate(int y0, int x0, int y1, int x1, int x)</span><br><span class="line">        soc_uuc = ((fcc - acc) * <span class="number">100</span>) / fcc;</span><br><span class="line">	soc_uuc = adjust_uuc(chip, soc_uuc);</span><br><span class="line">	soc_acc = DIV_ROUND_CLOSEST(<span class="number">100</span> * (soc_ocv - soc_uuc),(<span class="number">100</span> - soc_uuc));</span><br><span class="line">        soc_final = soc_acc;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ... // charging - reset all the counters</span><br><span class="line">soc_final = bound_soc(soc_final) // 最终电量</span><br></pre></td></tr></table></figure>
<h3 id="百分比计算函数：">百分比计算函数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, ocv_uv / <span class="number">1000</span>);  //calculate the  capacity percent</span><br><span class="line"><span class="keyword">if</span> (batt_temp == pc_temp_ocv-&gt;temp[j] * DEGC_SCALE) &#123;  /* found an exact match <span class="keyword">for</span> temp <span class="keyword">in</span> the table */</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++)    // i: rows- Capacity Percent  j: columns-Temperature</span><br><span class="line">                   ...</span><br><span class="line">	    pc = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;percent[i - <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i - <span class="number">1</span>][j],ocv); // calculate 不匹配dts表格的percentcharge </span><br><span class="line">                   转换为公式见下公式一;                                </span><br><span class="line"></span><br><span class="line">  /* batt_temp is within temperature <span class="keyword">for</span> column j-<span class="number">1</span> and j */</span><br><span class="line"> is_between(pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j], ocv)   // caculate temp1 percentcharge</span><br><span class="line">        pcj = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;percent[i + <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j],	ocv);</span><br><span class="line">                  转换为公式见下公式二;                         </span><br><span class="line">           is_between(pc_temp_ocv-&gt;ocv[i][j-<span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j-<span class="number">1</span>], ocv)) // caculate temp2 percentcharge</span><br><span class="line">	    pcj_minus_one = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j-<span class="number">1</span>],pc_temp_ocv-&gt;percent[i + <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j-<span class="number">1</span>],ocv);</span><br><span class="line">                   转换为公式见下公式三;                       </span><br><span class="line">          <span class="keyword">if</span> (pcj &amp;&amp; pcj_minus_one) // temp1 and temp2 都存在，calculate percentcharge </span><br><span class="line">                   pc = linear_interpolate(pcj_minus_one,pc_temp_ocv-&gt;temp[j-<span class="number">1</span>] * DEGC_SCALE,	pcj,pc_temp_ocv-&gt;temp[j] * DEGC_SCALE,batt_temp);</span><br><span class="line">                   转换为公式见下公式四;                      </span><br><span class="line">           否则：<span class="built_in">return</span> pcj 、pcj_minus_one、其他临界值</span><br></pre></td></tr></table></figure>
<h3 id="公式一">公式一</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式1.png" alt="公式一"></p>
<h3 id="公式二">公式二</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式2.png" alt="公式二"></p>
<h3 id="公式三">公式三</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式3.png" alt="公式三"></p>
<h3 id="公式四">公式四</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式4.png" alt="公式四"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　一直比较好奇，Android的电量是怎么计算出来的，今天就借用qualcomm平台的8916芯片研究了一下，因为其不带电量计，所以是通过一个bms系统计算出来的，下面就来详细分析一下计算方法。</p>
<h2 id="SOC（state_of_charge_荷电状态_-_电量）">SOC（state of charge 荷电状态 - 电量）</h2><p>英文缩写:<br>FCC　　Full-charge capacity<br>RC 　　Remaining capacity (剩余电量)<br>CC 　　Coulumb counter<br>UUC　　Unusable capacity<br>RUC　　Remaining usable capacity<br>SoC　　State of charge<br>OCV　　Open circuit voltage<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux常用快捷键及命令总结]]></title>
    <link href="http://huaqianlee.me/2014/12/21/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://huaqianlee.me/2014/12/21/Linux常用快捷键及命令总结/</id>
    <published>2014-12-21T12:10:01.000Z</published>
    <updated>2015-07-17T15:28:19.215Z</updated>
    <content type="html"><![CDATA[<p>　　或许我是一个geek范的人，又或许是想显得很有逼格， whatever， 反正我就喜欢Linux的命令行，喜欢黑黑的geek风，这样完全体现出了技术的酷炫。现将一些自己觉得很有用能让自己显得很牛的装X快捷键和指令总结如下，其中有一部分相当有用，使用后逼格瞬间提升。</p>
<h2 id="Shell终端常用快捷键">Shell终端常用快捷键</h2><p>　　当进行命令行操作时，使用快捷键将极大提高工作效率，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + U – 剪切光标前的内容</span><br><span class="line">Ctrl + K – 剪切光标至行末的内容</span><br><span class="line">Ctrl + Y – 粘贴</span><br><span class="line">Ctrl + E – 移动光标到行末</span><br><span class="line">Ctrl + A – 移动光标到行首</span><br><span class="line">ALT + F – 跳向下一个空格</span><br><span class="line">ALT + B – 跳回上一个空格</span><br><span class="line">ALT + Backspace – 删除前一个单词</span><br><span class="line">Ctrl + W – 剪切光标前一个单词</span><br><span class="line">Ctrl + Insert – 复制</span><br><span class="line">Shift + Insert – 粘贴</span><br><span class="line"><span class="comment"># 下面两个命令的用法，如： 在shell终端输入vi main.c进入vi界面后，想切换到命令行，可以通过Ctrl+Z</span></span><br><span class="line">Ctrl + Z – 暂停应用程序</span><br><span class="line"><span class="built_in">fg</span> – 重新将程序唤到前台</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="常用Shell命令">常用Shell命令</h2><p>　　使用Linux，最酷炫的就是命令行操作，所以熟悉命令是必须，现将常用的Shell命令总结如下：</p>
<h3 id="硬件相关命令">硬件相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lscpu                   <span class="comment">#查看的是cpu信息.</span></span><br><span class="line">cat /proc/cpuinfo       <span class="comment">#查看CPU信息详细信息</span></span><br><span class="line">free -m                 <span class="comment">#概要查看内存情况，单位MB</span></span><br><span class="line">cat /proc/meminfo       <span class="comment">#查看内存详细信息</span></span><br><span class="line">lsblk                   <span class="comment">#查看硬盘和分区分布</span></span><br><span class="line">df -h                   <span class="comment">#查看各分区使用情况</span></span><br><span class="line">cat /proc/partitions    <span class="comment">#查看硬盘和分区</span></span><br><span class="line">mount | column -t       <span class="comment">#查看挂接的分区状态</span></span><br><span class="line">lspci | grep -i <span class="string">'eth'</span>   <span class="comment">#查看网卡硬件信息</span></span><br><span class="line">ifconfig <span class="operator">-a</span>             <span class="comment">#查看系统的所有网络接口</span></span><br><span class="line">ethtool eth0            <span class="comment">#如果要查看某个网络接口的详细信息，例如eth0的详细参数和指标</span></span><br></pre></td></tr></table></figure>
<h3 id="系统相关命令">系统相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内核相关命令</span></span><br><span class="line">uname <span class="operator">-a</span>                <span class="comment">#查看版本当前操作系统内核信息）</span></span><br><span class="line">cat /proc/version       <span class="comment">#查看当前操作系统版本信息</span></span><br><span class="line">cat /etc/issue          <span class="comment">#查看版本当前操作系统发行版信息</span></span><br><span class="line">cat /etc/redhat-release <span class="comment">#同上</span></span><br><span class="line">cat /etc/SuSE-release   <span class="comment">#suse系统下才可使用</span></span><br><span class="line">lsb_release <span class="operator">-a</span>          <span class="comment">#用来查看linux兼容性的发行版信息</span></span><br><span class="line">lsmod                   <span class="comment">#列出加载的内核模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网络常用命令</span></span><br><span class="line">ifconfig                <span class="comment">#查看所有网络接口的属性</span></span><br><span class="line">iptables -L             <span class="comment">#查看防火墙设置</span></span><br><span class="line">service iptables status <span class="comment">#查看防火墙状态</span></span><br><span class="line">service iptables stop   <span class="comment">#关闭防火墙</span></span><br><span class="line">route -n                <span class="comment">#查看路由表</span></span><br><span class="line">netstat -lntp           <span class="comment">#查看所有监听端口</span></span><br><span class="line">netstat -antp           <span class="comment">#查看所有已经建立的连接</span></span><br><span class="line">netstat <span class="operator">-s</span>              <span class="comment">#查看网络统计信息进程</span></span><br><span class="line">netstat -at             <span class="comment">#列出所有tcp端口</span></span><br><span class="line">netstat -au             <span class="comment">#列出所有udp端口</span></span><br><span class="line">netstat <span class="operator">-lt</span>             <span class="comment">#只列出所有监听tcp端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#管理常用命令</span></span><br><span class="line">top                     <span class="comment">#查看系统所有进程的详细信息，比如CPU、内存等,信息很多！</span></span><br><span class="line">df -lh                  <span class="comment">#查看硬盘大小及使用率</span></span><br><span class="line">mount                   <span class="comment">#挂接远程目录、NFS、本地共享目录到linux下</span></span><br><span class="line">hostname                <span class="comment">#查看/修改计算机名</span></span><br><span class="line">w                       <span class="comment">#查看活动用户</span></span><br><span class="line">id                      <span class="comment">#查看指定用户信息</span></span><br><span class="line">last                    <span class="comment">#查看用户登录日志</span></span><br><span class="line">cut <span class="operator">-d</span>: <span class="operator">-f</span>1 /etc/passwd <span class="comment">#查看系统所有用户</span></span><br><span class="line">cut <span class="operator">-d</span>: <span class="operator">-f</span>1 /etc/group  <span class="comment">#查看系统所有组</span></span><br><span class="line">crontab <span class="operator">-l</span>              <span class="comment">#查看当前用户的计划任务服务</span></span><br><span class="line">chkconfig –list         <span class="comment">#列出所有系统服务</span></span><br><span class="line">chkconfig –list | grep on <span class="comment">#列出所有启动的系统服务程序</span></span><br><span class="line">rpm -qa                 <span class="comment">#查看所有安装的软件包</span></span><br><span class="line">uptime                  <span class="comment">#查看系统运行时间、用户数、负载    </span></span><br><span class="line">/sbin/chkconfig --list  <span class="comment">#查看系统自动启动列表</span></span><br><span class="line">/sbin/chkconfig　–add　mysql <span class="comment">#把MySQL添加到系统的启动服务组里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件操作常用命令</span></span><br><span class="line">ranger               <span class="comment">#文件浏览系统，需要先安装ranger，超级方便，用了就知道</span></span><br><span class="line">ls -lht                 <span class="comment">#列出一个文件夹下所有文件及大小、访问权限</span></span><br><span class="line">du -sh &lt;dir&gt;            <span class="comment">#查看指定目录的大小 </span></span><br><span class="line">du -lh &lt;dir&gt;            <span class="comment">#查看指定目录及各文件的大小 </span></span><br><span class="line">ln <span class="operator">-s</span>                   <span class="comment">#建立软链接</span></span><br><span class="line">ls -lh                  <span class="comment">#以M为单位显示文件大小，去掉h，则单位为k</span></span><br><span class="line">du -skh  file        <span class="comment">#以M为单位显示文件大小 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程相关命令</span></span><br><span class="line">htop                      <span class="comment">#在终端以列表形式查看进程，需要安装htop，比ps好看好用太多了</span></span><br><span class="line">pstree -p pid           <span class="comment">#查看一个进程下的所有线程</span></span><br><span class="line">pstree  <span class="operator">-a</span>              <span class="comment">#显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。</span></span><br><span class="line">ps -ef                  <span class="comment">#查看所有进程</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> pid             <span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> all <span class="built_in">test</span>           <span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> `pgrep <span class="built_in">test</span>`    <span class="comment">#杀死进程</span></span><br><span class="line">./test.sh &amp;             <span class="comment">#使程序在后台运行</span></span><br><span class="line">nohup ./test.sh &amp;       <span class="comment">#使程序在后台运行</span></span><br><span class="line"></span><br><span class="line">压缩解压缩 </span><br><span class="line">zip -r dir.zip dir file  <span class="comment">#将目录dir、文件file等压缩到zip包,</span></span><br><span class="line">zip -re dir.zip dir file <span class="comment">#创建zip包，且加密</span></span><br><span class="line">unzip dir.zip            <span class="comment">#解压</span></span><br><span class="line">tar -zcvf dir.tar.gz dir file    <span class="comment">#将目录dir、文件file等压缩到tar包</span></span><br><span class="line">tar -xf dir.tar.gz       <span class="comment">#解压</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#screen命令，screen命令运行的服务不受shell终端影响，即使shell终端关闭仍存在</span></span><br><span class="line">screen -S <span class="built_in">test</span>          <span class="comment">#创建一个名字为test的screen</span></span><br><span class="line">screen -r <span class="built_in">test</span>          <span class="comment">#打开名字为test的screen</span></span><br><span class="line">screen -r pid           <span class="comment">#打开进程号为pid的screen</span></span><br><span class="line">screen -ls              <span class="comment">#列出所有的screen</span></span><br><span class="line">ctrl + a,d              <span class="comment">#当在一个screen时，退出screen</span></span><br><span class="line">ctrl + a,n              <span class="comment">#当在一个screen时，切换到下一个窗口</span></span><br><span class="line">ctrl + a,c              <span class="comment">#当在一个screen时，创建一个新的窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远程拷贝</span></span><br><span class="line">scp <span class="built_in">local</span>_file remote_username@remote_ip:remote_dir    <span class="comment">#拷贝本地文件到远程机器上</span></span><br><span class="line">scp -r <span class="built_in">local</span>_dir remote_username@remote_ip:remote_dir  <span class="comment">#拷贝本地整个目录到远程机器上</span></span><br></pre></td></tr></table></figure>
<h3 id="软件包安装">软件包安装</h3><p>　　如下为Ubuntu下的是命令，如果账户没有root权限的话，需要在前面添加sudo以获取root权限。其实不知道命令的话，只需要输入软件名，终端将会打印出下载安装的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install package     <span class="comment">#安装</span></span><br><span class="line">apt-get update package      <span class="comment">#更新</span></span><br><span class="line">apt-get remove package      <span class="comment">#删除    </span></span><br><span class="line">apt-cache search package    <span class="comment">#搜索软件包</span></span><br><span class="line">dpkg -i package.deb         <span class="comment">#安装deb包</span></span><br></pre></td></tr></table></figure></p>
<h2 id="后记">后记</h2><p>　　为了让大家相信使用了这些命令或快捷键确实会逼格提升，专门贴图两张，哈哈。。。</p>
<h3 id="图一_执行htop（进程管理）">图一 执行htop（进程管理）</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/bloghtop.png" alt="htop"></p>
<h3 id="图二_执行ranger_（文件浏览）">图二 执行ranger （文件浏览）</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogranger.png" alt="ranger"></p>
<p>　　有很多命令引用自<a href="http://www.xprogrammer.com/1799.html" target="_blank" rel="external">Linux常用的shell命令</a>，感谢此文作者.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　或许我是一个geek范的人，又或许是想显得很有逼格， whatever， 反正我就喜欢Linux的命令行，喜欢黑黑的geek风，这样完全体现出了技术的酷炫。现将一些自己觉得很有用能让自己显得很牛的装X快捷键和指令总结如下，其中有一部分相当有用，使用后逼格瞬间提升。</p>
<h2 id="Shell终端常用快捷键">Shell终端常用快捷键</h2><p>　　当进行命令行操作时，使用快捷键将极大提高工作效率，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + U – 剪切光标前的内容</span><br><span class="line">Ctrl + K – 剪切光标至行末的内容</span><br><span class="line">Ctrl + Y – 粘贴</span><br><span class="line">Ctrl + E – 移动光标到行末</span><br><span class="line">Ctrl + A – 移动光标到行首</span><br><span class="line">ALT + F – 跳向下一个空格</span><br><span class="line">ALT + B – 跳回上一个空格</span><br><span class="line">ALT + Backspace – 删除前一个单词</span><br><span class="line">Ctrl + W – 剪切光标前一个单词</span><br><span class="line">Ctrl + Insert – 复制</span><br><span class="line">Shift + Insert – 粘贴</span><br><span class="line"><span class="comment"># 下面两个命令的用法，如： 在shell终端输入vi main.c进入vi界面后，想切换到命令行，可以通过Ctrl+Z</span></span><br><span class="line">Ctrl + Z – 暂停应用程序</span><br><span class="line"><span class="built_in">fg</span> – 重新将程序唤到前台</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="shell" scheme="http://huaqianlee.me/tags/shell/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux文件I/O操作及网络架构]]></title>
    <link href="http://huaqianlee.me/2014/11/17/Linux%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2014/11/17/Linux文件IO操作及网络架构/</id>
    <published>2014-11-17T12:15:42.000Z</published>
    <updated>2015-07-17T14:52:16.079Z</updated>
    <content type="html"><![CDATA[<p>图片摘自网络，这些图片清晰的描述出了文件I/O和网络操作的脉络。<br><a id="more"></a></p>
<h2 id="网络交互模型">网络交互模型</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog网络交互模型.jpg" alt="网络交互模型"></p>
<h2 id="read-recv-recvfrom">read-recv-recvfrom</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogread-recv-recvfrom.jpg" alt="read-recv-recvfrom"></p>
<h2 id="write-send-sendto">write-send-sendto</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogwrite-send-sendto.jpg" alt="write-send-sendto"></p>
<h2 id="socket-bind-listen-accept-close-connect">socket-bind-listen-accept-close-connect</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogsocket-bind-listen-accept-close-connect.jpg" alt="socket-bind-listen-accept-close-connect"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>图片摘自网络，这些图片清晰的描述出了文件I/O和网络操作的脉络。<br>]]>
    
    </summary>
    
      <category term="kernel" scheme="http://huaqianlee.me/tags/kernel/"/>
    
      <category term="文件IO" scheme="http://huaqianlee.me/tags/%E6%96%87%E4%BB%B6IO/"/>
    
      <category term="网络" scheme="http://huaqianlee.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to read]]></title>
    <link href="http://huaqianlee.me/2014/11/01/How-to-read/"/>
    <id>http://huaqianlee.me/2014/11/01/How-to-read/</id>
    <published>2014-10-31T16:26:22.000Z</published>
    <updated>2015-05-30T08:44:53.379Z</updated>
    <content type="html"><![CDATA[<p>　　我这里想谈的是关于技术等方面学习的阅读. 不知道其他人怎么样,关于我一直以来总是有一个错误的方法去阅读书籍.　　</p>
<p>　　从初中伊始,我对于学习就有了一个错误的想法:想一步步的认真学好每个知识点,掌握每个知识点;因为这个想法让我一直学得很累.当我上了大学后,开始接触单片机、c语言、PCB等新鲜而有趣的知识，但是我还是秉承着错误的学习方法。所以在大学阶段虽然自己很认真的在学习，可是最终发现这样效果并不好，反而在一直消磨着自己的兴趣。这一度都让我怀疑自己的能力。不过幸好，我一直没有放弃，一直在坚持学习，直到后面学习Linux、Java及Android之后，终于深刻意识到自己之前的错误方法。　　<br><a id="more"></a><br>　　学习其实不是那样子学习的,尤其是作为我们IT行业的人来说,要学习的东西太多太多了,那样永远学不好的. 　　<br>　<br>现将自己的体会总结如下:</p>
<ol>
<li><p>新接触一种技术,如Android,可以找官方文档(看英文原版更好)大致浏览一下overview,然后按照官方例程跑一些demo,对其有一个大致的认识.接下来就是对自己感兴趣的部分再进行深入研究,如此这般,当自己多做几个项目多深入研究几次也就掌握得差不多了.</p>
</li>
<li><p>对于自己已经有一定了解的技术,然后想看一些提升自己的经典书籍,尤其那些超厚的书籍,不要从头至尾去细读,这样效率不高,而且没那么多时间,尤其是对于已经参加工作的人,这个时候最好的方式就是,浏览书的目录,快速浏览一下此书的大概内容,然后在实际运用中遇到了想详细了解时,找出书翻到那个地方开始研究.　
　</p>
</li>
<li>阅读源代码,这个对于从事编程工作的人是十分重要的.每个人都要看很多源代码才能真正提升自己的技能,但是看源代码也得有方法,不然一头扎进去,什么都不能学到.比如对于Linux源代码来讲,如果要深入每一个细节,估计终其一生也不能理解Linux的精华.这个时候就是看框架,遇到重要的感兴趣的再去研究细节.</li>
</ol>
<p>其实总结起来,最重要的就是不要去研究细节,而是遇到问题-学习-解决问题,这是最好的方式.　　</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　我这里想谈的是关于技术等方面学习的阅读. 不知道其他人怎么样,关于我一直以来总是有一个错误的方法去阅读书籍.　　</p>
<p>　　从初中伊始,我对于学习就有了一个错误的想法:想一步步的认真学好每个知识点,掌握每个知识点;因为这个想法让我一直学得很累.当我上了大学后,开始接触单片机、c语言、PCB等新鲜而有趣的知识，但是我还是秉承着错误的学习方法。所以在大学阶段虽然自己很认真的在学习，可是最终发现这样效果并不好，反而在一直消磨着自己的兴趣。这一度都让我怀疑自己的能力。不过幸好，我一直没有放弃，一直在坚持学习，直到后面学习Linux、Java及Android之后，终于深刻意识到自己之前的错误方法。　　<br>]]>
    
    </summary>
    
      <category term="Experience" scheme="http://huaqianlee.me/tags/Experience/"/>
    
      <category term="Thinking" scheme="http://huaqianlee.me/categories/Thinking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The document convetions for Java]]></title>
    <link href="http://huaqianlee.me/2014/10/27/The-document-convetions-for-Java/"/>
    <id>http://huaqianlee.me/2014/10/27/The-document-convetions-for-Java/</id>
    <published>2014-10-27T14:28:28.000Z</published>
    <updated>2014-10-31T16:30:26.376Z</updated>
    <content type="html"><![CDATA[<p>　　注释一直是编程最重要的部分之一,学习Java很长一段时间了,由于之前一直没有很正式的写过项目，所以一直也就没怎么认真的写过注释．因为注释又是如此的重要，所以今天对Java的注释规范加以总结，也促使自己以后写代码注意注释．</p>
<h2 id="注释的地方">注释的地方</h2><ol>
<li>每个源文件开头应该有一段注释,介绍代码的作者\时间等信息.</li>
<li>当代码比较长,嵌套较深时,应该在某些花括号末尾注明花括号对应的起点.</li>
<li>重要的属性需要添加注释,每个方法需要添加注释.</li>
<li>典型的算法等需要特别注意的地方需要添加注释.</li>
<li>有bug的地方需要加以注释,修改过的代码需要加修改标志注释.</li>
</ol>
<a id="more"></a>
<h2 id="注释的方法">注释的方法</h2><ol>
<li>单行注释 // </li>
<li>多行注释 /**/</li>
<li>文档注释<br>这是最重要的注释方式，并且用此方式注释后能生成Java doc，例如下面是一个servlet创建后生成的一个注释文档:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="keyword">do</span>Get method of the servlet. &lt;br&gt;</span><br><span class="line"> *</span><br><span class="line"> * This method is called when a form has its tag value method equals to get.</span><br><span class="line"> * </span><br><span class="line"> * @param request the request send by the client to the server</span><br><span class="line"> * @param response the response send by the server to the client</span><br><span class="line"> * @throws ServletException <span class="keyword">if</span> an error occurred</span><br><span class="line"> * @throws IOException <span class="keyword">if</span> an error occurred</span><br><span class="line"> */</span><br><span class="line">public void <span class="keyword">do</span>Get(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">                    <span class="keyword">do</span>Post();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>a.类注释</p>
<p>在myEclipse中，可以通过快捷键Alt+Shift+J生成，注释的内容可以通过Eclipse -&gt; Window -&gt; Preferences -&gt; Java -&gt; Code Style -&gt; Code Templates -&gt; Comments -&gt; Types -&gt; Edt 设置,格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author </span><br><span class="line"> *</span><br><span class="line"> * @Time </span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p>
<p>b.类的英文注释模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***************************************************************************************** </span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * CopyRright (c)<span class="number">2014</span>-xxxx:                          </span><br><span class="line"> * Project:               &lt;项目工程名 &gt;                                          </span><br><span class="line"> * Module ID:             &lt;(模块)类编号，可以引用系统设计中的类编号&gt;    </span><br><span class="line"> * Comments:              &lt;对此类的描述，可以引用系统设计中的描述&gt;                                           </span><br><span class="line"> * JDK version used:      &lt;jdk1.<span class="number">7</span>&gt;                              </span><br><span class="line"> * Namespace:             &lt;命名空间&gt;                              </span><br><span class="line"> * Author：                       </span><br><span class="line"> * Create Date：  </span><br><span class="line"> * Modified By：                                           </span><br><span class="line"> * Modified Date:                                     </span><br><span class="line"> * Why &amp; What is modified:     </span><br><span class="line"> * Version:                                       </span><br><span class="line"> ****************************************************************************************/</span><br></pre></td></tr></table></figure></p>
<p>c.构造函数注释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 构造方法 的描述 </span><br><span class="line"> * @param </span><br><span class="line"> *       </span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p>
<p>d.方法注释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 方法描述 </span><br><span class="line"> * @param </span><br><span class="line"> * @<span class="built_in">return</span>  </span><br><span class="line"> * @exception  (方法有异常的话加) </span><br><span class="line"> * @author  </span><br><span class="line"> * @Time  </span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p>
<p>e.成员变量注释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** The count is the number of charactersin the String. */</span><br><span class="line">private int count;</span><br></pre></td></tr></table></figure></p>
<p>有必要时要说明变量功能，涉及到的方法等等。</p>
<h2 id="javadoc参数说明：">javadoc参数说明：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@see 生成文档中的“参见xx 的条目”的超链接，后边可以加上：<span class="string">"类名"</span>、<span class="string">"完整类名"</span>、<span class="string">"完整类名#方法"</span>。可用于：类、方法、变量注释。 </span><br><span class="line">@param 参数的说明。可用于：方法注释。 </span><br><span class="line">@<span class="built_in">return</span> 返回值的说明。可用于：方法注释。 </span><br><span class="line">@exception 可能抛出异常的说明。可用于：方法注释。 </span><br><span class="line">@version 版本信息。可用于：类注释。 </span><br><span class="line">@author 作者名。可用于：类注释。 </span><br><span class="line">@deprecated 对类或方法的说明 该类或方法不建议使用,引起不推荐使用的警告 </span><br><span class="line">@note 表示注解，暴露给源码阅读者的文档 </span><br><span class="line">@remark 表示评论，暴露给客户程序员的文档 </span><br><span class="line">@since 表示从那个版本起开始有了这个函数 </span><br><span class="line">@see 表示交叉参考</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　注释一直是编程最重要的部分之一,学习Java很长一段时间了,由于之前一直没有很正式的写过项目，所以一直也就没怎么认真的写过注释．因为注释又是如此的重要，所以今天对Java的注释规范加以总结，也促使自己以后写代码注意注释．</p>
<h2 id="注释的地方">注释的地方</h2><ol>
<li>每个源文件开头应该有一段注释,介绍代码的作者\时间等信息.</li>
<li>当代码比较长,嵌套较深时,应该在某些花括号末尾注明花括号对应的起点.</li>
<li>重要的属性需要添加注释,每个方法需要添加注释.</li>
<li>典型的算法等需要特别注意的地方需要添加注释.</li>
<li>有bug的地方需要加以注释,修改过的代码需要加修改标志注释.</li>
</ol>]]>
    
    </summary>
    
      <category term="Program Kill" scheme="http://huaqianlee.me/tags/Program-Kill/"/>
    
      <category term="Java" scheme="http://huaqianlee.me/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build person blog with hexo and  github]]></title>
    <link href="http://huaqianlee.me/2014/10/24/build-person-blog-with-hexo/"/>
    <id>http://huaqianlee.me/2014/10/24/build-person-blog-with-hexo/</id>
    <published>2014-10-23T17:12:15.000Z</published>
    <updated>2015-05-27T14:24:04.106Z</updated>
    <content type="html"><![CDATA[<p>　　基于Hexo和Github的个人博客构建，我参照<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a>、<a href="http://hexo.io/docs/" target="_blank" rel="external">hexo官方文档</a>及<a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="external">github官方文档</a>完成了自己的个人blog。通过前段时间学习Android和这些天build自己的github、个人blog，关于学习新东西有一个新的体会，就是官方文档和帮助是最好的资料，虽然是英文的，但是看官方的源文档能提升自己的效率。</p>
<p>现在写博客只需要几个简单的命令就能完成发布了．</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo generat</span><br><span class="line">$ hexo deploy</span><br><span class="line">也可以直接简写为：</span><br><span class="line">$ hexo n <span class="string">"My New Post"</span></span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>博客内容编辑语法教程：</p>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax.php" target="_blank" rel="external">Markdown_en</a></li>
<li><a href="http://wowubuntu.com/markdown/#overview" target="_blank" rel="external">Markdown_cn</a></li>
</ul>
<hr>
<h2 id="Github">Github　　</h2><p>要成功构建blog首先得有Github账号和Github　Pages. 　　</p>
<ul>
<li>首先注册一个 <a href="https://github.com" target="_blank" rel="external">github</a>账号　　</li>
<li>建立一个与用户名对应的repository来构建Github　pages,仓库名必须为your_user_name.github.com或者your_user_name.github.io．也可以<a href="https://help.github.com/articles/creating-pages-with-the-automatic-generator/" target="_blank" rel="external">creating pages with the automatic generator</a>.</li>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">添加ssh公钥到Github</a>,如果安装<a href="https://windows.github.com/" target="_blank" rel="external">Github for windows</a>可以省掉这一步,因为软件已经自动生成了.</li>
</ul>
<h2 id="环境安装">环境安装　　</h2><p>安装hexo十分容易，不过在安装之前需要先做一些准备工作：　　</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a>　　</li>
</ul>
<h3 id="安装git">安装git　　</h3><p>关于Git版本我个人安装<a href="http://msysgit.github.io/" target="_blank" rel="external">msysgit</a>；如果装<a href="https://windows.github.com/" target="_blank" rel="external">Github for windows</a>，其会自动为电脑安装git，而且还有另外一个好处，它会自动为github创建一个ssh密匙，为我们省去很多工作。　　</p>
<h3 id="安装Node-js">安装Node.js　　</h3><p>最好的方法是通过<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>安装.　　</p>
<p>cURL:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>Wget:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>安装成功后,重启terminal终端,然后运行接下来命令安装Node.js　　</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install <span class="number">0.10</span>  <span class="comment">#版本号</span></span><br></pre></td></tr></table></figure>
<p>当然也可以通过上面Node.js下载安装.　　</p>
<h3 id="安装hexo">安装hexo　　</h3><p>当上面的所有准备工作做好后,可以安装hexo通过npm.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="初始化">初始化</h3><p>当Hexo安装完成后,运行接下来的命令,hexo将编译所有需要的文件到目标路径.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>编译完成后,工程目录如下:</p>
<p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|├── _drafts<br>|└── _posts<br>└── themes</p>
<p>详细配置信息及文件内容格式参照 <a href="http://hexo.io/docs/setup.html" target="_blank" rel="external">hexo configuration</a></p>
<h3 id="生成静态页面">生成静态页面</h3><p>进入hexo目标目录,执行如下命令,生成静态文件至hexo\pulbic.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate / hexo g</span><br><span class="line">* 必须在init目录下(hexo目录)执行.</span><br><span class="line">*当修改文章Tag或内容，不能正确重新生成内容，可以删除hexo\db.json后重试，还不行就到public目录删除对应的文件，重新生成。</span><br></pre></td></tr></table></figure>
<p>执行如下命令,将启动本地服务,进行文章预览调试.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>即可看到效果.</p>
<h3 id="写文章">写文章</h3><p>执行如下命令,生成制定名称的文章至hexo\source_post\pstName.md.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] <span class="string">"postName"</span> </span><br><span class="line">*postName为文件名,如果包含空格,则必须加<span class="string">""</span>,其将出现在文章的URL中.</span><br></pre></td></tr></table></figure></p>
<p>*layout为可选参数,默认为post,详细见scaffolds目录,若添加自己的layout,只需新建一个文件在scaffolds目录即可,也可以编辑现有的layout,比如修改默认的post.md,想添加一个categories分类,让每次生成文章时能自动添加分类栏目,就只需在—-上面添加categories.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">categories: <span class="comment"># 添加</span></span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">*注意大括号之间多加了空格,否则会被转义,而不能正常显示</span><br><span class="line">* 所有文件后面必须有个一个空格,否则会报错</span><br></pre></td></tr></table></figure></p>
<h3 id="fancybox_(此段摘录自hexo你的博客)">fancybox (此段摘录自<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a>)</h3><p>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">layout: photo</span><br><span class="line">title: 我的阅历</span><br><span class="line">date: <span class="number">2085</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">07</span>:<span class="number">33</span>:<span class="number">44</span></span><br><span class="line">tags: [hexo]</span><br><span class="line">photos:</span><br><span class="line">- http://bruce.u.qiniudn.com/<span class="number">2013</span>/<span class="number">11</span>/<span class="number">27</span>/reading/photos-<span class="number">0</span>.jpg</span><br><span class="line">- http://bruce.u.qiniudn.com/<span class="number">2013</span>/<span class="number">11</span>/<span class="number">27</span>/reading/photos-<span class="number">1</span>.jpg</span><br><span class="line">*经过测试，文件头上的layout: photo可以省略。</span><br></pre></td></tr></table></figure></p>
<p>不想每次都手动添加怎么办？同样的，打开您的hexo\scaffolds\photo.md<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layout: &#123; &#123; layout &#125; &#125;</span><br><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">tags: </span><br><span class="line">photos: </span><br><span class="line">- </span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>然后每次可以执行带layout的new命令生成照片文章：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo <span class="string">"photoPostName"</span> <span class="comment">#新建照片文章</span></span><br></pre></td></tr></table></figure></p>
<h4 id="description">description</h4><p>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: hexo你的博客</span><br><span class="line">date: <span class="number">2013</span>-<span class="number">11</span>-<span class="number">22</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">54</span></span><br><span class="line">categories: default</span><br><span class="line">tags: [hexo]</span><br><span class="line">description: 你对本页的描述</span><br><span class="line">---</span><br><span class="line">*hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: <span class="literal">false</span>。</span><br></pre></td></tr></table></figure></p>
<h3 id="文章摘要">文章摘要</h3><p>在需要显示摘要的地方添加如下代码即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure></p>
<p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo中所有文件的编码格式均是UTF-<span class="number">8</span>。</span><br></pre></td></tr></table></figure></p>
<h2 id="主题安装">主题安装</h2><p>到hexo的主题列表<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Hexo Themes</a>安装自己中意的主题.我比较喜欢简洁版的,所以clone安装的<a href="https://github.com/winterland1989/hexo-theme-winterland" target="_blank" rel="external">winterland</a>.主题的安装方法基本每个主题的READEM.md都有描述.</p>
<p>*自己最初clone了<a href="https://github.com/halfer53/metro-light" target="_blank" rel="external">metro-light</a>,结果主题未完善,发表博文是格式总是不对,浪费了自己大半天的时间,后面换个主题就行了.在警示一下自己.</p>
<p>未完待续…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*到这为至,自己的个人blog基本完成,能满足基本需求.</span><br><span class="line">*我会在使用blog的过程中不断加入自己喜欢的元素,到时再继续.</span><br></pre></td></tr></table></figure></p>
<h2 id="附_补充一下出错解决方法">附 补充一下出错解决方法</h2><p>搞软件总是会出现很多错误,很多时候各种方法试尽仍不能解决,从头再来很多时候问题就解决了.如果遇到怎么都不能解决的问题可以试试如下方式.</p>
<ol>
<li>备份自己的配置文件(_config.yml source文件夹 themes文件夹).然后删除Hexo目录下的所有文件.</li>
</ol>
<p>2.rebuild Hexo文件夹,进入Hexo文件夹执行如下命令.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>3.执行如下命令,在浏览器输入 localhost:4000,预览测试博客.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p>
<p>4.如果3成功则将备份文件copy回来,再通过3测试.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　基于Hexo和Github的个人博客构建，我参照<a href="http://ibruce.info/2013/11/22/hexo-your-blog/">hexo你的博客</a>、<a href="http://hexo.io/docs/">hexo官方文档</a>及<a href="https://help.github.com/articles/set-up-git/">github官方文档</a>完成了自己的个人blog。通过前段时间学习Android和这些天build自己的github、个人blog，关于学习新东西有一个新的体会，就是官方文档和帮助是最好的资料，虽然是英文的，但是看官方的源文档能提升自己的效率。</p>
<p>现在写博客只需要几个简单的命令就能完成发布了．</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo generat</span><br><span class="line">$ hexo deploy</span><br><span class="line">也可以直接简写为：</span><br><span class="line">$ hexo n <span class="string">"My New Post"</span></span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://huaqianlee.me/tags/Hexo/"/>
    
      <category term="Tools" scheme="http://huaqianlee.me/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://huaqianlee.me/2014/10/20/hello-world/"/>
    <id>http://huaqianlee.me/2014/10/20/hello-world/</id>
    <published>2014-10-19T17:12:15.000Z</published>
    <updated>2014-12-25T06:29:20.273Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://huaqianlee.me/tags/Hexo/"/>
    
      <category term="Tools" scheme="http://huaqianlee.me/categories/Tools/"/>
    
  </entry>
  
</feed>