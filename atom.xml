<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Andy.Lee Plus]]></title>
  <subtitle><![CDATA[Good good study, day day up !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://huaqianlee.me/"/>
  <updated>2015-07-20T15:27:33.853Z</updated>
  <id>http://huaqianlee.me/</id>
  
  <author>
    <name><![CDATA[Andy.Lee]]></name>
    <email><![CDATA[huaqianlee@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android中adb(Android Debug Bridge)命令的用法]]></title>
    <link href="http://huaqianlee.me/2015/07/19/Android%E4%B8%ADadb-Android-Debug-Bridge-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://huaqianlee.me/2015/07/19/Android中adb-Android-Debug-Bridge-命令的用法/</id>
    <published>2015-07-19T11:29:58.000Z</published>
    <updated>2015-07-20T15:27:33.853Z</updated>
    <content type="html"><![CDATA[<p>　　昨天写Android日志系统相关博客时发觉自己对adb命令认知十分不够，所以特意去<a href="http://developer.android.com/tools/help/adb.html" target="_blank" rel="external">http://developer.android.com/tools/help/adb.html</a>学习了一下,今天准备按照自己的理解加以修改总结并整理出一篇博文。</p>
<h2 id="概览">概览</h2><p>　　adb是Android Debug Bridge的简写，按字面意思理解就是在开发者和Android之间搭建的一个debug桥。adb是一个连接仿真实例或者Android设备的命令行工具，是一个客服端-服务器模式的程序，包括如下三部分：<br>　<br>　　1. 一个运行在开发用的Android手机或者仿真器上面的client，我们可以通过adb命令调用client。其他像ADT插件和DDMS也会创建client。<br>　<br>　　2. 一个运行在开发用的Android手机或者仿真器后台的server，这个server负责管理本设备上运行的client和daemon(守护进程)。<br>　<br>　　3. 一个在每个仿真器或者Android设备后台运行的daemon。</p>
<blockquote>
<p>adb tool 可以再<sdk>/platform-tools/中找到　</sdk></p>
</blockquote>
<a id="more"></a>
<h2 id="adb工具的构成关系">adb工具的构成关系</h2><p>　　当启动adb client时，client会检查是否有server在运行，若无则启动一个server进程。server进程启动后，会绑定到TCP端口号为5037的端口，然后监听从adb clients发送来的命令（所有adb clients 使用同一端口5037与server通信）。然后，server通过扫描手机或仿真器用到的5555到5585之间的奇数端口号，在所有运行的实例之间建立连接。server在发现adb daemon的地方为那个端口建立连接。每个仿真器或者设备需给console连接提供一个偶数端口号，为adb连接提供一个奇数端口号。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Emulator <span class="number">1</span>, console: <span class="number">5554</span></span><br><span class="line">Emulator <span class="number">1</span>, adb: <span class="number">5555</span></span><br><span class="line">Emulator <span class="number">2</span>, console: <span class="number">5556</span></span><br><span class="line">Emulator <span class="number">2</span>, adb: <span class="number">5557</span></span><br><span class="line">and so on...</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>当server为所有仿真器创建了连接后,我们可以通过adb 命令进入这些实例,而且可以从任何client(或者script脚本)控制所有的仿真器.　</p>
</blockquote>
<h2 id="adb调试">adb调试</h2><p>　　首先需要同USB将电脑和设备相连,然后在开发者模式中打开USB debugging。4.2以上的系统默认都是隐藏了开发者模式，所以需要去到<strong>Setting&gt;About phone&gt;</strong>菜单下点击<strong>Build number</strong>七次以显示开发者模式,然后到开发者模式菜单下打开USB debugging。</p>
<h2 id="语法">语法</h2><p>　　我们能通过设备的命令行(shell终端)或者script脚本发出adb命令。用法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb [<span class="operator">-d</span>|<span class="operator">-e</span>|<span class="operator">-s</span> &lt;serialNumber&gt;] &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果仅仅一个仿真器或设备被连接,这adb命令将自己发送本机.如果有多个的话,需要用-d -s 或 -e来指明目标设备.　</p>
</blockquote>
<h2 id="adb命令详解">adb命令详解</h2><p>　</p>
<h4 id="目标设备">目标设备</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-d</span>      <span class="comment">#指向连接的USB设备,如果USB设备超过一个则返回错误</span></span><br><span class="line"><span class="operator">-e</span>      <span class="comment">#指向运行的仿真器,如果超过一个仿真器则返回错误</span></span><br><span class="line"><span class="operator">-s</span>&lt;serialNumber&gt;  <span class="comment">#指向指定的仿真器或设备,如emulator-5556,详见下查询仿真器或设备</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="通用">通用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devices   <span class="comment">#打印所有连接的仿真器或设备,见下查询仿真器或设备</span></span><br><span class="line"><span class="built_in">help</span>    <span class="comment"># 打印所有adb命令</span></span><br><span class="line">version   <span class="comment">#打印adb工具的版本号</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="调试">调试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logcat [option] [filter-specs]    <span class="comment">#打印log</span></span><br><span class="line">bugreport      <span class="comment">#打印dumpsys,dumpstate及logcat日志</span></span><br><span class="line">jdwp       <span class="comment">#打印设备上的可用JDWP进程,可通过jdwp:&lt;pid&gt;连接指定JDWP进程,如:</span></span><br><span class="line">                adb forward tcp:<span class="number">8000</span> jdwp:<span class="number">472</span></span><br><span class="line">                jdb -attach localhost:<span class="number">8000</span>|</span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="数据">数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install &lt;apk&gt;          <span class="comment">#安装apk到仿真器或设备</span></span><br><span class="line">pull &lt;remote&gt; &lt;<span class="built_in">local</span>&gt;   <span class="comment">#拷贝指定文件到PC</span></span><br><span class="line">push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;   <span class="comment">#拷贝指定文件到设备</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="端口和网络">端口和网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">forward &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;    <span class="comment">#指定socket连接的PC端口号,仿真器或设备端口号,如下:</span></span><br><span class="line">                                tcp:&lt;portnum&gt;</span><br><span class="line">                                <span class="built_in">local</span>:&lt;UNIX domain socket name&gt;</span><br><span class="line">                                dev:&lt;character device name&gt;</span><br><span class="line">                                jdwp:&lt;pid&gt;</span><br><span class="line">ppp &lt;tty&gt; [parm]...  <span class="comment">#通过USB运行PPP,不应该无故打开PPP连接</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="脚本语言">脚本语言</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get-serialno   <span class="comment">#打印adb实体序列号,见下查询仿真器或设备</span></span><br><span class="line">get-state    <span class="comment">#打印仿真器或设备adb状态</span></span><br><span class="line"><span class="built_in">wait</span>-for-device     <span class="comment">#阻塞程序直到设备online</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以在后面添加其他命令,这样等设备以上线就执行,如下</span></span><br><span class="line">adb <span class="built_in">wait</span>-for-device shell getprop <span class="comment"># 一连上就getprop</span></span><br><span class="line">adb <span class="built_in">wait</span>-for-device install &lt;app&gt;.apk <span class="comment">#一连上就安装app</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="Server">Server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-server  <span class="comment">#检查是否有server运行,若无,则启动</span></span><br><span class="line"><span class="built_in">kill</span>-server   <span class="comment">#终止server进程</span></span><br></pre></td></tr></table></figure>
<p>　</p>
<h4 id="Shell">Shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="comment">#为仿真器或者设备打开一个远程shell终端,exit退出</span></span><br><span class="line">shell [shellCommand] <span class="comment">#打开一个远程终端,执行某指令后退出</span></span><br></pre></td></tr></table></figure>
<h3 id="查询仿真器或者设备">查询仿真器或者设备</h3><p>　　在执行adb命令前,我们可以通过命令去查看仿真器或设备的连接清单，命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></p>
<p>　　执行这个命令后，adb将打印每个实例的状态信息：</p>
<ul>
<li>Serial number ：adb通过仿真器或设备的console端口号创建的一个独一无二的字符串，格式为“type-consolePort”，如：emulator-5554
　</li>
<li>State ： 实例的连接状态，如下：　<ul>
<li>offline ：未连接或没回应</li>
<li>device ：实例连接到adb server，不过并不意味着Android完全启动可操作的，因为文件系统启动过程中，adb也可连接</li>
<li>no device ：未连接</li>
</ul>
</li>
</ul>
<p>　每个实例的输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[serialNumber] [state]</span><br><span class="line"></span><br><span class="line"><span class="comment">#eg</span></span><br><span class="line">adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">emulator-<span class="number">5554</span>  device</span><br><span class="line">emulator-<span class="number">5556</span>  device</span><br><span class="line">emulator-<span class="number">5558</span>  device</span><br></pre></td></tr></table></figure></p>
<h3 id="发送命令到指定仿真器或设备">发送命令到指定仿真器或设备</h3><p>　　如果有多个仿真器或者设备同时运行，我们必须通过指定一个目标，否则将报错。我们可以通过-s来指定，用法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="operator">-s</span> &lt;serialNumber&gt; &lt;<span class="built_in">command</span>&gt;  <span class="comment">#serialNumber可以用adb devices查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eg</span></span><br><span class="line">adb <span class="operator">-s</span> emulator-<span class="number">5556</span> install helloWorld.apk</span><br></pre></td></tr></table></figure></p>
<p>　　如果有多个实例有效，只有一个仿真器，我们可以通过-e来指定仿真器。反之，若只有一个Android 设备，我们可以同-d来指定。</p>
<h3 id="安装app">安装app</h3><p>　　adb工具提供了从pc拷贝apk并安装到指定仿真器或设备的命令，不过必须指定.apk文件的路径，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Android studio/Eclipse也是通过adb安装apk的，不过其ADT插件已经封装了这个过程</p>
</blockquote>
<h3 id="端口转发">端口转发</h3><p>　　我们可以用forward命令设置任意端口为forwarding端口，转发指定主机端口到仿真器或设备上的一个不同端口。也能设置转发到抽象的UNIX域sockets，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:<span class="number">6100</span> tcp:<span class="number">7100</span> <span class="comment">#设置主机端口6100转发到目标端口7100</span></span><br><span class="line"></span><br><span class="line">adb forward tcp:<span class="number">6100</span> <span class="built_in">local</span>:logd</span><br></pre></td></tr></table></figure></p>
<h3 id="导入导出文件">导入导出文件</h3><p> 　　我们可以通过pull命令从仿真器或设备导出任意路径的文件，通过push导入文件到仿真器或设备的任意路径，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remote 仿真器或设备文件路径 local PC文件路径</span></span><br><span class="line">adb pull &lt;remote&gt; &lt;<span class="built_in">local</span>&gt; <span class="comment">#导出文件</span></span><br><span class="line">adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt; <span class="comment">#导入文件</span></span><br></pre></td></tr></table></figure></p>
<h2 id="通过无线使用adb">通过无线使用adb</h2><p>　　虽然我们通常连接USB来使用adb，但是我们也能通过WiFi来使用。</p>
<ol>
<li>让Android设备与PC处于同一WiFi网络环境，不过并不是所有的接入点都能成功，我们需要防火墙配置正确来支持adb。
　</li>
<li>通过USB连接设备与PC。
　</li>
<li><p>确定PC上adb运行在USB模式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb usb</span><br><span class="line">restarting <span class="keyword">in</span> USB mode</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过USB连接到设备</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="comment">######## device</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启PC adb,运行在tcpip模式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb tcpip <span class="number">5555</span></span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: <span class="number">5555</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>找到Android设备的ip地址, Settings -&gt; About tablet -&gt; Status -&gt; IP address。
　</p>
</li>
<li><p>连接设备</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb connect <span class="comment">#.#.#.#</span></span><br><span class="line">connected to <span class="comment">#.#.#.#:5555</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>移除USB线，确认设备连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="comment">#.#.#.#:5555 device</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果连接丢失：</p>
<ol>
<li>确认PC机与Android设备是否处于同一WiFi网络环境。</li>
<li>通过adb connect重现连接。</li>
<li>重启adb host<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">kill</span>-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="其他命令">其他命令</h2><p>　　虽然官方文档已经介绍得挺详细了，但还是有一些命令没介绍到，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall &lt;package name&gt; <span class="comment">#卸载指定app，参数为包名</span></span><br><span class="line">adb uninstall -k &lt;package name&gt;   <span class="comment">#卸载指定app，保留配置文件和缓存</span></span><br><span class="line">adb shell dumpsys activity <span class="comment">#列出activity栈(back stack)和任务(task)及其他组件信息和进程信息</span></span><br><span class="line">adb shell dumpsys packages <span class="comment">#(若出错，则dumpsy)列出一些系统信息和所有应用的信息。包括Features，Activity Resolver Table等。</span></span><br><span class="line">adb shell pm list permissions <span class="comment">#列出目标实例的所有权限</span></span><br><span class="line">adb shell pm list packages  <span class="comment">#列出目标设备上安装的所有app包名</span></span><br><span class="line">adb shell pm list features  <span class="comment">#列出目标设备上的所有feature</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用adb命令启动一个Activity</span></span><br><span class="line">adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE  </span><br><span class="line">adb shell am start PACKAGE_NAME/FULLY_QUALIFIED_ACTIVITY    </span><br><span class="line"><span class="comment">#eg </span></span><br><span class="line">adb shell am start -n me.huaqianlee.example/.MainActivity  </span><br><span class="line">adb shell am start -n me.huaqianlee.example/me.huaqianlee.example.MainActivity</span><br><span class="line"></span><br><span class="line">adb shell screencap -p | perl -pe <span class="string">'s/\x0D\x0A/\x0A/g'</span> &gt; screen.png <span class="comment">#屏幕截图, 并使用perl命令保存截图</span></span><br><span class="line"></span><br><span class="line">adb shell input keyevent <span class="number">82</span> <span class="comment">#解锁屏幕</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　昨天写Android日志系统相关博客时发觉自己对adb命令认知十分不够，所以特意去<a href="http://developer.android.com/tools/help/adb.html">http://developer.android.com/tools/help/adb.html</a>学习了一下,今天准备按照自己的理解加以修改总结并整理出一篇博文。</p>
<h2 id="概览">概览</h2><p>　　adb是Android Debug Bridge的简写，按字面意思理解就是在开发者和Android之间搭建的一个debug桥。adb是一个连接仿真实例或者Android设备的命令行工具，是一个客服端-服务器模式的程序，包括如下三部分：<br>　<br>　　1. 一个运行在开发用的Android手机或者仿真器上面的client，我们可以通过adb命令调用client。其他像ADT插件和DDMS也会创建client。<br>　<br>　　2. 一个运行在开发用的Android手机或者仿真器后台的server，这个server负责管理本设备上运行的client和daemon(守护进程)。<br>　<br>　　3. 一个在每个仿真器或者Android设备后台运行的daemon。</p>
<blockquote>
<p>adb tool 可以再<sdk>/platform-tools/中找到　</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Tools" scheme="http://huaqianlee.me/tags/Tools/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
      <category term="译文" scheme="http://huaqianlee.me/categories/Android/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[怎么抓取Android日志文件]]></title>
    <link href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/"/>
    <id>http://huaqianlee.me/2015/07/19/怎么抓取Android测试日志文件-How-to-get-android-log-file/</id>
    <published>2015-07-19T03:43:04.000Z</published>
    <updated>2015-07-19T14:11:36.602Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/" target="_blank" rel="external">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/" target="_blank" rel="external">怎么抓取Android日志文件</a></p>
<p>　　前两篇blog分别介绍了Android logging系统及编程时怎么应用，关于kernel中的log系统，前面只是大概提及了一下，下次再详细分析。相信大家都知道调试时需要打开USB调试模式，接下来就分析一下怎么抓取日志文件。</p>
<h2 id="logcat命令详解">logcat命令详解</h2><p>　　logcat是最常用的命令之一，其语法如下；<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">shell@android:/ $ logcat --help</span><br><span class="line">logcat --help</span><br><span class="line">Usage: logcat [options] [filterspecs]</span><br><span class="line">options include:</span><br><span class="line">  <span class="operator">-s</span>              Set default filter to silent.</span><br><span class="line">                  Like specifying filterspec <span class="string">'*:s'</span></span><br><span class="line">  <span class="operator">-f</span> &lt;filename&gt;   Log to file. Default to stdout</span><br><span class="line">  -r [&lt;kbytes&gt;]   Rotate <span class="built_in">log</span> every kbytes. (<span class="number">16</span> <span class="keyword">if</span> unspecified). Requires <span class="operator">-f</span></span><br><span class="line">  -n &lt;count&gt;      Sets max number of rotated logs to &lt;count&gt;, default <span class="number">4</span></span><br><span class="line">  -v &lt;format&gt;     Sets the <span class="built_in">log</span> <span class="built_in">print</span> format, <span class="built_in">where</span> &lt;format&gt; is one of:</span><br><span class="line"></span><br><span class="line">                  brief process tag thread raw time threadtime long</span><br><span class="line"></span><br><span class="line">  -c              clear (flush) the entire <span class="built_in">log</span> and <span class="built_in">exit</span></span><br><span class="line">  <span class="operator">-d</span>              dump the <span class="built_in">log</span> and <span class="keyword">then</span> <span class="built_in">exit</span> (don<span class="string">'t block)</span><br><span class="line">  -t &lt;count&gt;      print only the most recent &lt;count&gt; lines (implies -d)</span><br><span class="line">  -g              get the size of the log'</span>s ring buffer and <span class="built_in">exit</span></span><br><span class="line">  -b &lt;buffer&gt;     Request alternate ring buffer, <span class="string">'main'</span>, <span class="string">'system'</span>, <span class="string">'radio'</span></span><br><span class="line">                  or <span class="string">'events'</span>. Multiple -b parameters are allowed and the</span><br><span class="line">                  results are interleaved. The default is -b main -b system.</span><br><span class="line">  -B              output the <span class="built_in">log</span> <span class="keyword">in</span> binary</span><br><span class="line"></span><br><span class="line">filterspecs are a series of  &lt;tag&gt;[:priority]</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;tag&gt; is a <span class="built_in">log</span> component tag (or * <span class="keyword">for</span> all) and priority is:</span><br><span class="line">  V    Verbose</span><br><span class="line">  D    Debug</span><br><span class="line">  I    Info</span><br><span class="line">  W    Warn</span><br><span class="line">  E    Error</span><br><span class="line">  A    Assert </span><br><span class="line"></span><br><span class="line"><span class="string">'*'</span> means <span class="string">'*:d'</span> and &lt;tag&gt; by itself means &lt;tag&gt;:v</span><br><span class="line"></span><br><span class="line">If not specified on the commandline, filterspec is <span class="built_in">set</span> from ANDROID_LOG_TAGS.</span><br><span class="line">If no filterspec is found, filter defaults to <span class="string">'*:I'</span></span><br><span class="line"></span><br><span class="line">If not specified with -v, format is <span class="built_in">set</span> from ANDROID_PRINTF_LOG</span><br><span class="line">or defaults to <span class="string">"brief"</span></span><br></pre></td></tr></table></figure></p>
<p>部分重要参数详解如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[filterspecs]  以&lt;tag&gt;[:priority]序列形式显示指定priority及其以上，指定tag的日志，未指定tag的部分则按默认输出日志</span><br><span class="line"></span><br><span class="line">-b &lt;buffer&gt;</span><br><span class="line">    用于指定要操作的日志缓冲区:system,events,radio,main.系统默认的是system和main 。该选项可以出现多次，以指定多个日志缓冲区。例:</span><br><span class="line">  adb logcat -b system -b main -b events -b radio <span class="operator">-s</span> MyActivity:i</span><br><span class="line">     日志输出会指明当前查看的日志缓冲区如：</span><br><span class="line">     --------- beginning of /dev/<span class="built_in">log</span>/radio</span><br><span class="line">     --------- beginning of /dev/<span class="built_in">log</span>/events</span><br><span class="line">     --------- beginning of /dev/<span class="built_in">log</span>/system</span><br><span class="line">     --------- beginning of /dev/<span class="built_in">log</span>/main</span><br><span class="line"></span><br><span class="line">-v &lt;format&gt;  设置<span class="built_in">log</span>打印格式</span><br><span class="line">    brief — 显示prority/tag,产生日志的进程ID,和日志消息(默认格式)。</span><br><span class="line">    process — 显示priority,产生日志的进程ID,和日志消息</span><br><span class="line">    tag — 显示prority/tag,和消息</span><br><span class="line">    thread — 显示priority,线程ID和日志消息</span><br><span class="line">    raw — 只显示消息</span><br><span class="line">    time — 显示日期时间,priority/tag,产生日志的进程Id,和日志消息</span><br><span class="line">    long — 显示所有信息,日志消息另起一行显示,且每个日志间空一行</span><br></pre></td></tr></table></figure></p>
<h2 id="log文件抓取方式">log文件抓取方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实时打印</span></span><br><span class="line">logcat main <span class="comment"># APP日志</span></span><br><span class="line">logcat radio <span class="comment"># 射频通话部分日志</span></span><br><span class="line">logcat events <span class="comment"># 系统事件日志</span></span><br><span class="line">logcat system <span class="comment"># 系统日志</span></span><br><span class="line">tcpdump <span class="comment"># 网络通信方面log抓取</span></span><br><span class="line">QXDM  <span class="comment">#高通平台有,主要是Modem射频网络相关的log,同radio但更强大,没怎么接触,不熟悉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#状态信息</span></span><br><span class="line">adb shell cat /proc/kmsg <span class="comment"># kernel日志,每cat一次清零</span></span><br><span class="line">adb shell dmesg <span class="comment"># kernel日志,开机信息.(var/log/demsg)</span></span><br><span class="line">adb shell dumpstate <span class="comment"># 系统状态信息,比较全面,如:内存,CPU,log缓存等。可以帮助我们确定是否有内存耗光之类的问题</span></span><br><span class="line">adb shell dumpsys <span class="comment"># 系统service相关信息</span></span><br><span class="line">adb bugreport <span class="comment"># 包括上面所有状态信息</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Shell，Linux，Dos都支持通过“adb shell logcat &gt; filename.txt”的形式将打印信息写入到文件　</p>
</blockquote>
<p>　　dumpstate会打印很多有用的信息,我们也可以执行单独命令打印想要的部分信息,如通过“/system/bin/top -n 1 -d 1 -m 30 -t”获取CPU信息，但我现在对这个用得还不多,不是很熟悉,就不多说了,贴部分内容以供参考.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Build: JZO54K</span><br><span class="line"></span><br><span class="line">Build fingerprint: <span class="string">'Xiaomi/mione_plus/mione_plus:4.1.2/JZO54K/4.12.5:user/release-keys'</span></span><br><span class="line"></span><br><span class="line">Bootloader: unknown</span><br><span class="line"></span><br><span class="line">Radio: msm</span><br><span class="line"></span><br><span class="line">Network: (unknown)</span><br><span class="line"></span><br><span class="line">Kernel: Linux version <span class="number">3.4</span>.<span class="number">0</span>-perf-g1ccebb5-<span class="number">00148</span>-g5f2009a (builder@taishan) (gcc version <span class="number">4.6</span>.x-google <span class="number">20120106</span> (prerelease) (GCC) ) <span class="comment">#1 SMP PREEMPT Fri Dec 27 16:52:36 CST 2013</span></span><br><span class="line"></span><br><span class="line">Command line: console=ttyHSL0,<span class="number">115200</span>,n8 androidboot.hardware=qcom kgsl.mmutype=gpummu vmalloc=<span class="number">400</span>M androidboot.emmc=<span class="literal">true</span> androidboot.serialno=d02b34a3 syspart=system1 androidboot.baseband=msm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------ UPTIME (uptime) ------</span><br><span class="line"></span><br><span class="line">up time: <span class="number">05</span>:<span class="number">07</span>:<span class="number">48</span>, idle time: <span class="number">09</span>:<span class="number">38</span>:<span class="number">57</span>, sleep time: <span class="number">00</span>:<span class="number">10</span>:<span class="number">10</span></span><br><span class="line"></span><br><span class="line">[uptime: <span class="number">0.1</span>s elapsed]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------ MEMORY INFO (/proc/meminfo) ------</span><br><span class="line"></span><br><span class="line">MemTotal:         <span class="number">508016</span> kB</span><br><span class="line"></span><br><span class="line">MemFree:           <span class="number">36688</span> kB</span><br><span class="line"></span><br><span class="line">Buffers:           <span class="number">12100</span> kB</span><br><span class="line"></span><br><span class="line">Cached:            <span class="number">84336</span> kB</span><br><span class="line"></span><br><span class="line">SwapCached:            <span class="number">0</span> kB</span><br><span class="line"></span><br><span class="line">Active:           <span class="number">327208</span> kB</span><br><span class="line"></span><br><span class="line">Inactive:          <span class="number">62316</span> kB</span><br><span class="line"></span><br><span class="line">Active(anon):     <span class="number">294644</span> kB</span><br></pre></td></tr></table></figure></p>
<h2 id="后记">后记</h2><p>　　写这篇blog主要是因为前两篇有些内容没有表达出来，而在强迫症驱使下完成的。因为自己现在经验尚浅，可能有很多不完善和错误的地方，欢迎大家指出。另，如果想通过logcat直接打印kernel日志的话,可以参考<a href="http://blog.csdn.net/ryfjx6/article/details/7096018" target="_blank" rel="external">http://blog.csdn.net/ryfjx6/article/details/7096018</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/">怎么抓取Android日志文件</a></p>
<p>　　前两篇blog分别介绍了Android logging系统及编程时怎么应用，关于kernel中的log系统，前面只是大概提及了一下，下次再详细分析。相信大家都知道调试时需要打开USB调试模式，接下来就分析一下怎么抓取日志文件。</p>
<h2 id="logcat命令详解">logcat命令详解</h2><p>　　logcat是最常用的命令之一，其语法如下；<br>]]>
    
    </summary>
    
      <category term="Log" scheme="http://huaqianlee.me/tags/Log/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to debug with Android logging]]></title>
    <link href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/"/>
    <id>http://huaqianlee.me/2015/07/18/怎么用Android日志系统更好地去调试-How-to-debug-with-Android-logging/</id>
    <published>2015-07-18T07:43:04.000Z</published>
    <updated>2015-07-19T16:28:49.934Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/" target="_blank" rel="external">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/" target="_blank" rel="external">怎么抓取Android日志文件</a></p>
<p>　　Android logging system为logging系统提供了一个Java类android.util.Log，也提供了一个c/c++的log库，在kernel中有四个设备节点，详细见：<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Android日志系统详解</a>。其系统架构如下：<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogaplogd.jpg" alt="image by simon"></p>
<blockquote>
<p>此图与4.0以上的系统有些差异,新版Android增加了log_system</p>
</blockquote>
<a id="more"></a>
<h2 id="Java日志接口">Java日志接口</h2><p>　　此接口一般应用于编写APP时。</p>
<h3 id="Logging类">Logging类</h3><p>类名：android.util.Log，路径：frameworks/base/core/java/android/util/Log.java。主要方法如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span>.v();</span><br><span class="line"><span class="keyword">Log</span>.<span class="literal">d</span>();</span><br><span class="line"><span class="keyword">Log</span>.<span class="literal">i</span>();</span><br><span class="line"><span class="keyword">Log</span>.<span class="literal">w</span>();</span><br><span class="line"><span class="keyword">Log</span>.<span class="literal">e</span>();</span><br><span class="line"><span class="keyword">Log</span>.a();</span><br></pre></td></tr></table></figure></p>
<p>Log信息显示等级从高到底分别为：ERROR，WARN，INFO，DEBUG，VERBOSE。VERBOSE除了开发期间，是不应该被编译进APP的，DEBUG应该编译但在runtime被忽略，ERROR，WARN和INFO logs则一直被保留。更加详细的内容见 ：<a href="http://developer.android.com/reference/android/util/Log.html" target="_blank" rel="external">Log.html</a>。</p>
<blockquote>
<p>一个好的习惯是在自己的类中定义一个TAG常量，如：private static final String TAG = “MyActivity”;然后通过Log.i(TAG，”I am “+name);　</p>
</blockquote>
<h3 id="Demo">Demo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package me.huaqianlee.demo;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.util.Log; </span><br><span class="line"></span><br><span class="line">private static final String TAG = <span class="string">"MyActivity"</span>;</span><br><span class="line"></span><br><span class="line">public class Demo extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        TextView tv = new TextView(this);</span><br><span class="line">        tv.setText(<span class="string">"Hello, I am andy lee!"</span>);</span><br><span class="line">        <span class="built_in">set</span>ContentView(tv);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"this is a log.i message"</span>);</span><br><span class="line">        Log.v(TAG, <span class="string">"this  is a log.v message"</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"this  is a log.d message"</span>);</span><br><span class="line">        Log.w(TAG, <span class="string">"this  is a log.w message"</span>);</span><br><span class="line">        Log.e(TAG, <span class="string">"this  is a log.e message"</span>);</span><br><span class="line">        Log.a(TAG, <span class="string">"this  is a log.a message"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C/C++日志接口">C/C++日志接口</h2><p>　　此接口一般应用于JNI和HAL层。</p>
<h3 id="Logging代码">Logging代码</h3><p>　　Log信息的等级同上，关键代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cutils/log.h&gt; //路径：system/core/include/cutils/log.h</span></span><br><span class="line">/*公共日志宏*/</span><br><span class="line">ALOGV </span><br><span class="line">ALOGD </span><br><span class="line">ALOGI </span><br><span class="line">ALOGW </span><br><span class="line">ALOGE</span><br><span class="line"></span><br><span class="line">/*条件日志宏*/</span><br><span class="line">ALOGV_IF </span><br><span class="line">ALOGD_IF  </span><br><span class="line">ALOGI_IF  </span><br><span class="line">ALOGW_IF  </span><br><span class="line">ALOGE_IF </span><br><span class="line"></span><br><span class="line">// 在system/core/include/<span class="built_in">log</span>/log.h(被cutils/log.h包含)中定义如下：</span><br><span class="line"><span class="comment">#define CONDITION(cond)     (__builtin_expect((cond)!=0, 0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ifndef ALOGV_IF</span></span><br><span class="line"><span class="comment">#if LOG_NDEBUG</span></span><br><span class="line"><span class="comment">#define ALOGV_IF(cond, ...)   ((void)0)</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#define ALOGV_IF(cond, ...) \</span></span><br><span class="line">    ( (CONDITION(cond)) \</span><br><span class="line">    ? ((void)ALOG(LOG_VERBOSE, LOG_TAG, __VA_ARGS__)) \</span><br><span class="line">    : (void)<span class="number">0</span> )</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">#endif</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>应该首先在c文件中定义LOG_TAG。</li>
<li>在Android.mk中添加：LOCAL_SHARED_LIBRARIES := liblog libcutils</li>
</ol>
</blockquote>
<h3 id="Demo-1">Demo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt; </span></span><br><span class="line"><span class="comment">#include &lt;cutils/log.h&gt; /* log header file*/</span></span><br><span class="line"><span class="comment">#include &lt;cutils/properties.h&gt;</span></span><br><span class="line"></span><br><span class="line">/* define <span class="built_in">log</span> tag */</span><br><span class="line"><span class="comment">#ifdef LOG_TAG</span></span><br><span class="line"><span class="comment">#undef LOG_TAG</span></span><br><span class="line"><span class="comment">#define LOG_TAG "app"</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    ALOGV(<span class="string">"Verbose: _app"</span>);</span><br><span class="line">    ALOGD(<span class="string">"Debug: _app"</span>);</span><br><span class="line">    ALOGI(<span class="string">"Info: _app"</span>);</span><br><span class="line">    ALOGW(<span class="string">"Warn: _app"</span>);</span><br><span class="line">    ALOGE(<span class="string">"Error: _app"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I am andy lee！\n"</span>);</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Android上的log格式">Android上的log格式</h2><p>　　　Log信息的格式及详解如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tv_sec   tv_nsec     priority     pid    tid     tag     messageLen       Message</span><br><span class="line"></span><br><span class="line">tag: 标签</span><br><span class="line">tv_sec &amp; tv_nsec: 日志的时间戳</span><br><span class="line">pid: 打印日志的进程ID</span><br><span class="line">tid: 打印日志的线程ID</span><br><span class="line">Priority： 日志等级（或优先级），取值如下</span><br><span class="line">  V — Verbose (lowest priority)</span><br><span class="line">  D — Debug</span><br><span class="line">  I — Info</span><br><span class="line">  W — Warning</span><br><span class="line">  E — Error</span><br><span class="line">  A — Assert</span><br></pre></td></tr></table></figure></p>
<h2 id="Reference">Reference</h2><p><a href="http://log4think.com/debug-android-logging/" target="_blank" rel="external">http://log4think.com/debug-android-logging/</a><br><a href="http://developer.android.com/reference/android/util/Log.html" target="_blank" rel="external">http://developer.android.com/reference/android/util/Log.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/">怎么抓取Android日志文件</a></p>
<p>　　Android logging system为logging系统提供了一个Java类android.util.Log，也提供了一个c/c++的log库，在kernel中有四个设备节点，详细见：<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/">Android日志系统详解</a>。其系统架构如下：<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogaplogd.jpg" alt="image by simon"></p>
<blockquote>
<p>此图与4.0以上的系统有些差异,新版Android增加了log_system</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Log" scheme="http://huaqianlee.me/tags/Log/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android日志系统(logging system)详解]]></title>
    <link href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://huaqianlee.me/2015/07/18/Android-Logging-system-Android日志系统详解/</id>
    <published>2015-07-18T05:43:04.000Z</published>
    <updated>2015-07-19T07:46:29.672Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/" target="_blank" rel="external">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/" target="_blank" rel="external">怎么抓取Android日志文件</a></p>
<p>　　不管是做Android应用还是做Android中间层和底层，Logging系统都是必须要了解的；因为Android不像单片机程序UCOS那么简单,可以很方便的单步调试。所以，就准备用一篇blog来分析一下logging system。</p>
<h2 id="概览">概览</h2><p>　　Android提供了一个灵活的logging系统，允许应用程序和系统组件等整个系统记录logging信息，它是独立于Linux Kernel的一个logging系统，kernel是通过”pr_info”、”printk”等存储，通过“dmesg”或“cat  /proc/kmsg”获取。不过，Android logging 系统也是将信息存在内核缓存区。其结构如下：　<br>　<br>　　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogAndroid-logging-system.png" alt="image by Tetsuyuki Kobabayshi"><br><a id="more"></a>　<br>Logging system由如下几部分组成：</p>
<ul>
<li>实现loging信息存储的kernel驱动和缓存区</li>
<li>C，C++和Java 类添加与读取log</li>
<li>一个单独浏览log信息的程序（logcat）</li>
<li>能够查看和过滤来自主机的log信息（通过Android Studio 或者 DDMS）</li>
</ul>
<p>其在kernel中为系统的不同部分提供了四个不同log缓存区，可以通过/dev/log查看这些不同的设备节点，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/dev/<span class="built_in">log</span>/mian ： 主应用程序<span class="built_in">log</span>，除了下三个外，其他用户空间<span class="built_in">log</span>将写入此节点，包括System.out.print及System.erro.print等</span><br><span class="line">/dev/<span class="built_in">log</span>/events ： 系统事件信息，二进制<span class="built_in">log</span>信息将写入此节点，需要程序解析</span><br><span class="line">/dev/<span class="built_in">log</span>/radio ： 射频通话相关信息，tag 为<span class="string">"HTC_RIL"</span> <span class="string">"RILJ"</span> <span class="string">"RILC"</span> <span class="string">"RILD"</span> <span class="string">"RIL"</span> <span class="string">"AT"</span> <span class="string">"GSM"</span> <span class="string">"STK"</span>的<span class="built_in">log</span>信息将写入此节点</span><br><span class="line">/dev/<span class="built_in">log</span>/system ： 低等级系统信息和debugging,为了防止mian缓存区溢出,而从中分离出来</span><br></pre></td></tr></table></figure></p>
<p>log中的每条信息主要由四部分组成，如下：</p>
<ul>
<li>Tag</li>
<li>时间戳</li>
<li>log信息level(或者event的优先级)</li>
<li>log信息</li>
</ul>
<h2 id="Android_logger">Android logger</h2><p>　　logging的kernel driver部分被称作”logger”，其为系统日志提供支持，代码路径: kernel/drivers/staging/android/logger.c，此文件对4种logging缓存区加以支持。</p>
<h3 id="驱动">驱动</h3><p>　　Log的读写是通过正常Linux文件读写方式完成的，write path被很好的优化过，所以能很快的open()、write()及close()，这样就避免了logging在系统中有太多的开销，影响速度。
　</p>
<h5 id="Reading">Reading</h5><p>　　在用户空间，一个正常的read操作通常读取从log读取一个条目，每read一次返回一个log条目或者阻塞等待下一个log条目。设备可以打开非阻塞模式。每一个read请求应该至少请求LOGGER_ENTRY_MAX_LEN (4096)长度的数据。
　</p>
<h4 id="Writing">Writing</h4><p>　　当系统写数据到log时，driver将为每一个log条目保存pid（进程ID），tgid（线程组ID），timestamp（时间戳），这些信息将出现在用户空间的level，tag和message中。
　</p>
<h4 id="Ioctl">Ioctl</h4><p>　　Ioctl函数支持如下cmd：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- LOGGER_GET_LOG_BUF_SIZE ： <span class="built_in">log</span>条目缓存区的大小</span><br><span class="line">- LOGGER_GET_LOG_LEN ： <span class="built_in">log</span>数据的长度</span><br><span class="line">- LOGGER_GET_NEXT_ENTRY_LEN： 下一<span class="built_in">log</span>条目的大小</span><br><span class="line">- LOGGER_FLUSH_LOG ： 清除<span class="built_in">log</span>数据</span><br><span class="line">- LOGGER_GET_VERSION ： 获得logger版本</span><br><span class="line">- LOGGER_GET_VERSION ： 设置logger版本</span><br></pre></td></tr></table></figure>
<h3 id="设备节点">设备节点</h3><p>　　当一个用户空间执行的程序用合适的主设备号和次设备号打开设备节点后，设备节点就处于活动状态，这些设备节点如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@msm8916_32:/ <span class="comment"># ls -al dev/log</span></span><br><span class="line">ls -al dev/<span class="built_in">log</span></span><br><span class="line">crw-rw-rw- root     <span class="built_in">log</span>       <span class="number">10</span>,  <span class="number">61</span> <span class="number">1970</span>-<span class="number">01</span>-<span class="number">09</span> <span class="number">02</span>:<span class="number">14</span> events</span><br><span class="line">crw-rw-rw- root     <span class="built_in">log</span>       <span class="number">10</span>,  <span class="number">62</span> <span class="number">1970</span>-<span class="number">01</span>-<span class="number">09</span> <span class="number">02</span>:<span class="number">14</span> main</span><br><span class="line">crw-rw-rw- root     <span class="built_in">log</span>       <span class="number">10</span>,  <span class="number">60</span> <span class="number">1970</span>-<span class="number">01</span>-<span class="number">09</span> <span class="number">02</span>:<span class="number">14</span> radio</span><br><span class="line">crw-rw-rw- root     <span class="built_in">log</span>       <span class="number">10</span>,  <span class="number">59</span> <span class="number">1970</span>-<span class="number">01</span>-<span class="number">09</span> <span class="number">02</span>:<span class="number">14</span> system</span><br></pre></td></tr></table></figure></p>
<h2 id="系统和应用程序logging">系统和应用程序logging</h2><p>　　所有的log信息在Java类中定义并做相应处理，最终一个格式化的消息通过C/C++库传递到内核驱动程序,然后再将消息存储在适当的缓冲区中。</p>
<h3 id="App_log">App  log</h3><p>　　App通过导入android.util.Log包来引入Log类，然后通过log方法写不同优先级的相关信息到log。Java类定义传递到log方法的tag为字符串常量，log方法通过这些字符串来获知信息的重要性，这样，当我们用log查看工具（如logcat）时，就可以过滤tag或者优先级来获取我们想要的信息。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@msm8916_32:/ <span class="comment"># logcat</span></span><br><span class="line">logcat</span><br><span class="line">--------- beginning of system</span><br><span class="line">I/Vold    (  <span class="number">265</span>): Vold <span class="number">2.1</span> (the revenge) firing up</span><br><span class="line">D/Vold    (  <span class="number">265</span>): Volume sdcard1 state changing -<span class="number">1</span> (Initializing) -&gt; <span class="number">0</span> (No-Media)</span><br><span class="line">D/Vold    (  <span class="number">265</span>): Volume uicc0 state changing -<span class="number">1</span> (Initializing) -&gt; <span class="number">0</span> (No-Media)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D/Vold    (  <span class="number">265</span>): Volume usbotg state changing -<span class="number">1</span> (Initializing) -&gt; <span class="number">0</span> (No-Media)</span><br><span class="line"></span><br><span class="line">D/Vold    (  <span class="number">265</span>): Volume uicc1 state changing -<span class="number">1</span> (Initializing) -&gt; <span class="number">0</span> (No-Media)</span><br><span class="line">I/Cryptfs (  <span class="number">265</span>): Check <span class="keyword">if</span> PFE is activated on Boot</span><br><span class="line">E/Cryptfs (  <span class="number">265</span>): Bad magic <span class="keyword">for</span> real block device /dev/block/bootdevice/by-name/userdata</span><br><span class="line">E/Cryptfs (  <span class="number">265</span>): Error getting crypt footer and key</span><br><span class="line">I/irsc_util(  <span class="number">316</span>): irsc tool created:<span class="number">0</span>xb70ff688</span><br><span class="line">I/irsc_util(  <span class="number">316</span>): Starting irsc tool</span><br><span class="line">I/irsc_util(  <span class="number">316</span>): Trying to open sec config file</span><br></pre></td></tr></table></figure></p>
<h3 id="Event_log">Event log</h3><p>　　Event logs是在android.util.EventLog.class中创建二进制log信息。Log条目由二进制tag代码和二进制参数构成。Event logs 文件存储在system/etc/event-log-tags中，通过cat system/etc/event-log-tags能查看其信息。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@msm8916_32:/ <span class="comment"># cat system/etc/event-log-tags</span></span><br><span class="line">cat system/etc/event-log-tags</span><br><span class="line"><span class="number">42</span> answer (to life the universe etc|<span class="number">3</span>)</span><br><span class="line"><span class="number">314</span> pi</span><br><span class="line"><span class="number">1003</span> auditd (avc|<span class="number">3</span>)</span><br><span class="line"><span class="number">2718</span> e</span><br><span class="line"><span class="number">2719</span> configuration_changed (config mask|<span class="number">1</span>|<span class="number">5</span>)</span><br><span class="line"><span class="number">2720</span> sync (id|<span class="number">3</span>),(event|<span class="number">1</span>|<span class="number">5</span>),(<span class="built_in">source</span>|<span class="number">1</span>|<span class="number">5</span>),(account|<span class="number">1</span>|<span class="number">5</span>)</span><br><span class="line"><span class="number">2721</span> cpu (total|<span class="number">1</span>|<span class="number">6</span>),(user|<span class="number">1</span>|<span class="number">6</span>),(system|<span class="number">1</span>|<span class="number">6</span>),(iowait|<span class="number">1</span>|<span class="number">6</span>),(irq|<span class="number">1</span>|<span class="number">6</span>),(softirq|<span class="number">1</span>|<span class="number">6</span>)</span><br><span class="line"><span class="number">2722</span> battery_level (level|<span class="number">1</span>|<span class="number">6</span>),(voltage|<span class="number">1</span>|<span class="number">1</span>),(temperature|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2723</span> battery_status (status|<span class="number">1</span>|<span class="number">5</span>),(health|<span class="number">1</span>|<span class="number">5</span>),(present|<span class="number">1</span>|<span class="number">5</span>),(plugged|<span class="number">1</span>|<span class="number">5</span>),(technology|<span class="number">3</span>)</span><br><span class="line"><span class="number">2724</span> power_sleep_requested (wakeLocksCleared|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2725</span> power_screen_broadcast_send (wakelockCount|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2726</span> power_screen_broadcast_<span class="keyword">done</span> (on|<span class="number">1</span>|<span class="number">5</span>),(broadcastDuration|<span class="number">2</span>|<span class="number">3</span>),(wakelockCount|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2727</span> power_screen_broadcast_stop (<span class="built_in">which</span>|<span class="number">1</span>|<span class="number">5</span>),(wakelockCount|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2728</span> power_screen_state (offOrOn|<span class="number">1</span>|<span class="number">5</span>),(becauseOfUser|<span class="number">1</span>|<span class="number">5</span>),(totalTouchDownTime|<span class="number">2</span>|<span class="number">3</span>),(touchCycles|<span class="number">1</span>|<span class="number">1</span>)</span><br><span class="line"><span class="number">2729</span> power_partial_wake_state (releasedorAcquired|<span class="number">1</span>|<span class="number">5</span>),(tag|<span class="number">3</span>)</span><br><span class="line"><span class="number">2730</span> battery_discharge (duration|<span class="number">2</span>|<span class="number">3</span>),(minLevel|<span class="number">1</span>|<span class="number">6</span>),(maxLevel|<span class="number">1</span>|<span class="number">6</span>)</span><br><span class="line"><span class="number">2740</span> location_controller</span><br></pre></td></tr></table></figure></p>
<h3 id="System_log">System log</h3><p>　　framework层的许多类通过使用system log 来与app的log信息区分开来。System log在android.util.Slog.clash中实现。</p>
<h3 id="log命令行工具">log命令行工具</h3><p>　　log命令行工具能用来给任意程序穿件log条目，此工具是内建与toolbox的多功能程序。在adb shell中输入log则会提示其用法，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;adb shell</span><br><span class="line">root@msm8916_32:/ <span class="comment"># log</span></span><br><span class="line"><span class="built_in">log</span></span><br><span class="line">USAGE: <span class="built_in">log</span> [-p priorityChar] [-t tag] message</span><br><span class="line">        priorityChar should be one of:</span><br><span class="line">                v,d,i,w,e</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>toolbox: 具有管理内存、备份和数据清除功能的一个系统文件，用来对手机性能进行设置，需要root权限，能被软件调用。　</p>
</blockquote>
<h3 id="logwrapper">logwrapper</h3><p>　　logwrapper工具是用来捕捉stdout信息的，当需要从本地应用捕捉stdout信息到log时，它将十分有用。源码路径：system/core/logwrapper/logwrapper.c；用法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@msm8916_32:/ <span class="comment"># logwrapper</span></span><br><span class="line">logwrapper</span><br><span class="line">Usage: logwrapper [<span class="operator">-a</span>] [<span class="operator">-d</span>] [-k] BINARY [ARGS ...]</span><br><span class="line"></span><br><span class="line">Forks and executes BINARY ARGS, redirecting stdout and stderr to</span><br><span class="line">the Android logging system. Tag is <span class="built_in">set</span> to BINARY, priority is</span><br><span class="line">always LOG_INFO.</span><br><span class="line"></span><br><span class="line"><span class="operator">-a</span>: Causes logwrapper to <span class="keyword">do</span> abbreviated logging.</span><br><span class="line">    This logs up to the first <span class="number">4</span>K and last <span class="number">4</span>K of the <span class="built_in">command</span></span><br><span class="line">    being run, and logs the output when the <span class="built_in">command</span> exits</span><br><span class="line"><span class="operator">-d</span>: Causes logwrapper to SIGSEGV when BINARY terminates</span><br><span class="line">    fault address is <span class="built_in">set</span> to the status of <span class="built_in">wait</span>()</span><br><span class="line">-k: Causes logwrapper to <span class="built_in">log</span> to the kernel <span class="built_in">log</span> instead of</span><br><span class="line">    the Android system <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Logcat命令">Logcat命令</h3><p>　　我们可以通过logcat命令查看log，这个命令文件在文件系统的system/bin目录下，所以我们可以到文件系统中执行logcat，或者直接adb logcat，都能查看log。adb用法可以查看<a href="http://developer.android.com/guide/developing/tools/adb.html" target="_blank" rel="external">adb.html</a>(需翻墙，等什么时候有空以中文形式移到blog来)。</p>
<ul>
<li>每一个有tag和优先级的log信息</li>
<li>可以通过tag和log等级过滤log信息</li>
<li>可以通过系统属性指定程序将stdout和stderr内容写入日志</li>
</ul>
<h2 id="在启动阶段默认打开Logcat">在启动阶段默认打开Logcat</h2><p>　　Android logging和kernel logging是完全不同的两种日志系统，另补充一点，kernel日志支持直接在用户空间向/dev/kmsg写入log条目。<a href="http://groups.google.com/group/android-kernel/browse_thread/thread/87d929863ce7c29e/f8b0da9ed6376b2f?pli=1" target="_blank" rel="external">groups.google.com</a>中介绍了如何在启动阶段launch Logcat，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it can be launched via init.rc as below.. </span><br><span class="line"></span><br><span class="line">service logcat /system/bin/logcat <span class="operator">-f</span> /dev/kmsg </span><br><span class="line">       oneshot</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>不推荐这样做，这样会增加打印开销，使系统卡顿　</p>
</blockquote>
<h2 id="Reference">Reference　　</h2><p><a href="http://elinux.org/Android_Logging_System" target="_blank" rel="external">http://elinux.org/Android_Logging_System</a> (大部分内容译自此文档)<br><a href="http://developer.android.com/guide/developing/tools/adb.html" target="_blank" rel="external">http://developer.android.com/guide/developing/tools/adb.html</a><br><a href="http://groups.google.com/group/android-kernel/browse_thread/thread/87d929863ce7c29e/f8b0da9ed6376b2f?pli=1" target="_blank" rel="external">http://groups.google.com/group/android-kernel/browse_thread/thread/87d929863ce7c29e/f8b0da9ed6376b2f?pli=1</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/18/Android-Logging-system-Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/">Android日志系统详解</a><br>　　<a href="http://huaqianlee.me/2015/07/18/%E6%80%8E%E4%B9%88%E7%94%A8Android%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%8E%BB%E8%B0%83%E8%AF%95-How-to-debug-with-Android-logging/">How to debug with Android logging</a><br>　　<a href="http://huaqianlee.me/2015/07/19/%E6%80%8E%E4%B9%88%E6%8A%93%E5%8F%96Android%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6-How-to-get-android-log-file/">怎么抓取Android日志文件</a></p>
<p>　　不管是做Android应用还是做Android中间层和底层，Logging系统都是必须要了解的；因为Android不像单片机程序UCOS那么简单,可以很方便的单步调试。所以，就准备用一篇blog来分析一下logging system。</p>
<h2 id="概览">概览</h2><p>　　Android提供了一个灵活的logging系统，允许应用程序和系统组件等整个系统记录logging信息，它是独立于Linux Kernel的一个logging系统，kernel是通过”pr_info”、”printk”等存储，通过“dmesg”或“cat  /proc/kmsg”获取。不过，Android logging 系统也是将信息存在内核缓存区。其结构如下：　<br>　<br>　　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogAndroid-logging-system.png" alt="image by Tetsuyuki Kobabayshi"><br>]]>
    
    </summary>
    
      <category term="Log" scheme="http://huaqianlee.me/tags/Log/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
      <category term="译文" scheme="http://huaqianlee.me/categories/Android/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译过程详解之二]]></title>
    <link href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/"/>
    <id>http://huaqianlee.me/2015/07/12/Android编译过程详解之二/</id>
    <published>2015-07-12T08:43:04.000Z</published>
    <updated>2015-07-16T14:33:55.278Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a><br>　<br>　　配置好环境变量后，接下来要做的就是build了。为了提高编译速度，我们自定义了一个go.sh的脚本文件，详细下面解释。另，编译的时候一般会在后面加一个-j8来实现多线程编译，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　./go.sh -j8 or make -j8／--jobs</span><br></pre></td></tr></table></figure></p>
<p>参数“-j“ 和”—jobs ”指定了同时编译的线程数量，通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将编译默认目标“droid”（下面详解），然后将会编译出完整的 Android 系统镜像。</p>
<h2 id="build系统分类">build系统分类</h2><p>　　整个build系统的Make文件可以分为三类：</p>
<ol>
<li>build系统核心文件：定义整个build系统的框架，其他所有make文件都是在这个框架的基础上写出来的。</li>
<li>产品的make文件：位于device目录，通常以公司名和产品名分为两级目录，如：\device\qcom\msm8916_32。</li>
<li>模块的make文件：每个模块专用的make文件，kernel中统一名字为Makefile，其他为Android.mk。　</li>
</ol>
<h2 id="build结果">build结果</h2><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：</p>
<ul>
<li>/out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。</li>
<li>/out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。</li>
<li>/out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。</product_name></product_name></li>
<li>/out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。<a id="more"></a>
Build 的产物中最重要的是几个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。</product_name></li>
<li>system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载到根分区，描述的是设备上的system分区，即/system目录。</li>
<li>ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像、文件系统，并启动 init 进程。</li>
<li>userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。</li>
<li>boot.img：包含有Kernel及其启动参数、Ramdisk，以及可选的BootLoader第二阶段。</li>
<li>recovery.img：设备进入recovery模式时所加载的镜像，相当于除正常启动系统的第二系统，此系统用来更新正常系统，即刷机。</li>
</ul>
<h2 id="go-sh">go.sh</h2><p>先来分析一下go.sh文件，其代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"OEM_PROJECT_NAME=<span class="variable">$OEM_PROJECT_NAME</span>"</span></span><br><span class="line">start_time=`date +%s`</span><br><span class="line"><span class="built_in">source</span> customer/oem_define.sh <span class="comment"># 导入OEM厂商配置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_ccache</span></span>() &#123;　＃设置ccache，提高编译速度</span><br><span class="line">    <span class="built_in">export</span> CCACHE_DIR=../.ccache</span><br><span class="line">    <span class="built_in">export</span> USE_CCACHE=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="operator">-d</span> <span class="variable">$CCACHE_DIR</span> ];<span class="keyword">then</span> </span><br><span class="line">    	prebuilts/misc/linux-x86/ccache/ccache -M <span class="number">10</span>G　　＃设置编译文件缓存大小为<span class="number">10</span>G</span><br><span class="line">    <span class="keyword">fi</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">delete_ccache</span></span>() &#123; <span class="comment"># 删除缓存</span></span><br><span class="line">    prebuilts/misc/linux-x86/ccache/ccache -C</span><br><span class="line">    rm -rf <span class="variable">$CCACHE_DIR</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup_ccache <span class="comment"># 调用setup_ccache()</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"clean"</span> ];<span class="keyword">then</span>  <span class="comment">#如果第一个参数为clean，清除ccache缓存</span></span><br><span class="line">	delete_ccache</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">oemtools/copy_mp.sh  <span class="comment"># copy modem bin文件</span></span><br><span class="line">make <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span> <span class="variable">$5</span>  <span class="comment"># 调用Makefile编译，下面详解 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_time=`date +%s`</span><br><span class="line"><span class="built_in">let</span> min=(<span class="variable">$end_time</span>-<span class="variable">$start_time</span>)/<span class="number">60</span></span><br><span class="line"><span class="built_in">let</span> sec=(<span class="variable">$end_time</span>-<span class="variable">$start_time</span>)%<span class="number">60</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"build_time <span class="variable">$min</span> mins <span class="variable">$sec</span> seconds"</span>  <span class="comment">#打印编译时间</span></span><br></pre></td></tr></table></figure></p>
<h2 id="make">make</h2><p>　　执行make命令的时候会执行当前路径的Makefile文件，内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### DO NOT EDIT THIS FILE ###</span></span><br><span class="line">include build/core/main.mk 　　</span><br><span class="line"><span class="comment">### DO NOT EDIT THIS FILE ###</span></span><br></pre></td></tr></table></figure></p>
<p>　　相信上面的文件大家都能看懂，接下来就解析一下main.mk，此文件中定义了整个Android的编译关系，主要文件（黄色背景除$开头的文件皆位于build\core\目录下）关系如下：<br><img src="http://7xjdax.com1.z0.glb.clouddn.com/20150711Makemain_mk.png" alt="make"></p>
<h3 id="main-mk">main.mk</h3><p>　　此文件首先对编译环境进行检查，然后引入其他相关mk文件，另，还将定义几个主要的make目标，如droid，sdk等，关键代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要引入了如下mk文件</span></span><br><span class="line">include $(BUILD_SYSTEM)/help.mk <span class="comment"># Targets that provide quick help on the build system.</span></span><br><span class="line">-include $(OEM_RESOURCE_DIR)/CustomerSpec.mk <span class="comment"># 自定义，引入项目配置文件</span></span><br><span class="line">-include $(TOP)/customer/oem_define.mk <span class="comment"># 导入OEM厂商配置</span></span><br><span class="line">-include $(BUILD_SYSTEM)/config.mk <span class="comment">#整个build系统的配置文件</span></span><br><span class="line">-include $(BUILD_SYSTEM)/cleanbuild.mk <span class="comment"># 允许强制清除编译文件</span></span><br><span class="line">-include vendor/google/build/config.mk <span class="comment">#Google特性配置</span></span><br><span class="line">-include $(BUILD_SYSTEM)/definitions.mk <span class="comment"># 引入Build 系统其他文件将用到的函数和全局变量定义。例如：</span></span><br><span class="line">    my-dir : 当前路径</span><br><span class="line">    all-subdir-makefiles ：当前目录及子目录Makefile文件</span><br><span class="line">    all-subdir-java-files：当前目录及子目录java文件</span><br><span class="line">    all-java-files-under： 指定目录及子目录java文件</span><br><span class="line">    sign-package ： 对package签名</span><br><span class="line">    include $(BUILD_SYSTEM)/distdir.mk <span class="comment"># 定义dist目标，dist目标用来拷贝文件到指定路径</span></span><br><span class="line">-include $(BUILD_SYSTEM)/dex_preopt.mk <span class="comment"># 针对启动jar包的预优化</span></span><br><span class="line">-include build/core/pdk_config.mk <span class="comment"># pdk（Platform Development Kit）的配置包</span></span><br><span class="line">-include $(BUILD_SYSTEM)/post_clean.mk  <span class="comment"># 在前一次 Build 的基础上检查当前 Build 的配置，并执行必要清理工作</span></span><br><span class="line">-include $(BUILD_SYSTEM)/legacy_prebuilts.mk <span class="comment"># 定义GRANDFATHERED_ALL_PREBUILT </span></span><br><span class="line">-include $(BUILD_SYSTEM)/Makefile <span class="comment"># main.mk的辅助文件</span></span><br><span class="line">-include $(BUILD_SYSTEM)/help.mk <span class="comment"># 列出主要的make目标及其说明</span></span><br><span class="line">-include $(ONE_SHOT_MAKEFILE) <span class="comment"># 一个变量，当使用“mm”编译时，值为当前指定路径下的mk文件路径</span></span><br><span class="line">...</span><br><span class="line">DEFAULT_GOAL := droid <span class="comment"># 定义默认make目标</span></span><br><span class="line"><span class="comment"># 依据不同编译条件，包含不同目录</span></span><br><span class="line">subdirs += build/tools/acp</span><br><span class="line">subdirs := $(TOP)</span><br><span class="line"><span class="comment"># 导入所有Android.mk,顶层Android.mk下详解</span></span><br><span class="line">subdir_makefiles := \</span><br><span class="line">	$(shell build/tools/findleaves.py --prune=$(OUT_DIR)  --prune=.repo --prune=.git --prune=kernel --prune=prj_out --prune=links --prune=.svn $(subdirs) Android.mk)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>编译器平台相关的mk文件在build\core\combo路径下，如：javac.mk、select.mk等　</p>
</blockquote>
<p>另，因定义了DEFAULT_GOAL := droid，当在根目录输入“Make”时，实际上就等同于我们执行“make droid”。加载include的所有文件，完成对所有mk文件的解析以后就会寻找生成droid的规则，依次生成它的依赖，直到所有满足的模块被编译好，然后使用相应的工具打包成相应的img。　</p>
<p>　droid目标依赖于很多其他目标，这些目标相互配合实现了整个系统的编译，droid依赖的其他make目标关系如下图：<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogdroid.png" alt="droid依赖目标关系图">　</p>
<p>　build系统中的一些make目标如下：</p>
<h3 id="droid的依赖目标">droid的依赖目标</h3><table>
<thead>
<tr>
<th>目标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(modules_to_install)</td>
<td>modules_to_install 变量包含了当前配置下所有会被安装的模块（一个模块是否会被安装依赖于该产品的配置文件，模块的标签等信息），因此该目标将导致所有会被安装的模块的编译</td>
</tr>
<tr>
<td>$(modules_to_check)</td>
<td>该目标用来确保我们定义的构建模块是没有冗余的</td>
</tr>
<tr>
<td>$(INSTALLED_ANDROID_INFO_TXT_TARGET)</td>
<td>该目标会生成一个关于当前 Build 配置的设备信息的文件，该文件的生成路径是：out/target/product/<product_name>/android-info.txt</product_name></td>
</tr>
<tr>
<td>systemimage</td>
<td>生成 system.img</td>
</tr>
<tr>
<td>$(INSTALLED_BOOTIMAGE_TARGET)</td>
<td>生成 boot.img</td>
</tr>
<tr>
<td>$(INSTALLED_RECOVERYIMAGE_TARGET)</td>
<td>生成 recovery.img</td>
</tr>
<tr>
<td>$(INSTALLED_USERDATAIMAGE_TARGET)</td>
<td>生成 userdata.img</td>
</tr>
<tr>
<td>$(INSTALLED_CACHEIMAGE_TARGET)</td>
<td>生成 cache.img</td>
</tr>
<tr>
<td>$(INSTALLED_FILES_FILE)</td>
<td>该目标会生成 out/target/product/<product_name>/ installed-files.txt 文件，该文件中内容是当前系统镜像中已经安装的文件列表</product_name></td>
</tr>
</tbody>
</table>
<h3 id="其他主要目标">其他主要目标</h3><table>
<thead>
<tr>
<th>目标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>make clean</td>
<td>执行清理，等同于：rm -rf out/</td>
</tr>
<tr>
<td>make sdk</td>
<td>编译出 Android 的 SDK</td>
</tr>
<tr>
<td>make clean-sdk</td>
<td>清理 SDK 的编译产物</td>
</tr>
<tr>
<td>make update-api</td>
<td>更新 API。在 framework API 改动之后，需要首先执行该命令来更新 API，公开的 API 记录在 frameworks/base/api 目录下</td>
</tr>
<tr>
<td>make dist</td>
<td>执行 Build，并将 MAKECMDGOALS 变量定义的输出文件拷贝到 /out/dist 目录</td>
</tr>
<tr>
<td>make all</td>
<td>编译所有内容，不管当前产品的定义中是否会包含</td>
</tr>
<tr>
<td>make help</td>
<td>帮助信息，显示主要的 make 目标</td>
</tr>
<tr>
<td>make snod</td>
<td>从已经编译出的包快速重建系统镜像</td>
</tr>
<tr>
<td>make libandroid_runtime</td>
<td>编译所有 JNI framework 内容</td>
</tr>
<tr>
<td>make framework</td>
<td>编译所有 Java framework 内容</td>
</tr>
<tr>
<td>make services</td>
<td>编译系统服务和相关内容</td>
</tr>
<tr>
<td>make <local_target></local_target></td>
<td>编译一个指定的模块，local_target 为模块的名称</td>
</tr>
<tr>
<td>make clean-<local_target></local_target></td>
<td>清理一个指定模块的编译结果</td>
</tr>
<tr>
<td>make dump-products</td>
<td>显示所有产品的编译配置信息，例如：产品名，产品支持的地区语言，产品中会包含的模块等信息</td>
</tr>
<tr>
<td>make PRODUCT-xxx-yyy</td>
<td>编译某个指定的产品</td>
</tr>
<tr>
<td>make bootimage</td>
<td>生成 boot.img</td>
</tr>
<tr>
<td>make recoveryimage</td>
<td>生成 recovery.img</td>
</tr>
<tr>
<td>make userdataimage</td>
<td>生成 userdata.img</td>
</tr>
<tr>
<td>make cacheimage</td>
<td>生成 cache.img</td>
</tr>
</tbody>
</table>
<h3 id="build\core\config-mk">build\core\config.mk</h3><p>　　此文件是最重要的mk文件之一，主要定义不同模块的编译常量、编译参数及常见文件后缀（如.zip,.jar,.apk）；根据BoardConfig.mk配置产品相关参数；设置常用工具的路径。其主要源码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义标准源文件路径等的环境变量</span></span><br><span class="line">SRC_HEADERS := \</span><br><span class="line">	$(TOPDIR)system/core/include \</span><br><span class="line">	$(TOPDIR)hardware/libhardware/include \</span><br><span class="line">	$(TOPDIR)hardware/libhardware_legacy/include \</span><br><span class="line">	$(TOPDIR)hardware/ril/include \</span><br><span class="line">	$(TOPDIR)libnativehelper/include \</span><br><span class="line">	$(TOPDIR)frameworks/native/include \</span><br><span class="line">	$(TOPDIR)frameworks/native/opengl/include \</span><br><span class="line">	$(TOPDIR)frameworks/av/include \</span><br><span class="line">	$(TOPDIR)frameworks/base/include \</span><br><span class="line">	$(TOPDIR)external/skia/include</span><br><span class="line">SRC_HOST_HEADERS:=$(TOPDIR)tools/include  </span><br><span class="line">SRC_LIBRARIES:= $(TOPDIR)libs</span><br><span class="line">SRC_SERVERS:= $(TOPDIR)servers</span><br><span class="line">SRC_TARGET_DIR := $(TOPDIR)build/target</span><br><span class="line">SRC_API_DIR := $(TOPDIR)prebuilts/sdk/api</span><br><span class="line">...</span><br><span class="line">include $(BUILD_SYSTEM)/dumpvar.mk  <span class="comment"># build之前显示此次build的配置信息</span></span><br><span class="line">include $(BUILD_SYSTEM)/pathmap.mk <span class="comment"># 将许多头文件的路径通过名值对的方式定义为映射表，并提供 include-path-for 函数来获取。如，通过$(call include-path-for, frameworks-native)便可以获取到 framework 本地代码需要的头文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义编译命令常量，对应相关mk文件，每个常量描述一种类型模块的编译方式</span></span><br><span class="line">BUILD_COMBOS:= $(BUILD_SYSTEM)/combo <span class="comment"># 编译器平台相关mk文件</span></span><br><span class="line">CLEAR_VARS:= $(BUILD_SYSTEM)/clear_vars.mk <span class="comment"># 清除之前定义环境变量</span></span><br><span class="line">BUILD_HOST_STATIC_LIBRARY:= $(BUILD_SYSTEM)/host_static_library.mk  <span class="comment"># 编译主机静态库，指编译此系统的主机，即PC</span></span><br><span class="line">BUILD_HOST_SHARED_LIBRARY:= $(BUILD_SYSTEM)/host_shared_library.mk <span class="comment"># 编译主机动态库</span></span><br><span class="line">BUILD_STATIC_LIBRARY:= $(BUILD_SYSTEM)/static_library.mk <span class="comment"># 编译设备静态库</span></span><br><span class="line">BUILD_RAW_STATIC_LIBRARY := $(BUILD_SYSTEM)/raw_static_library.mk <span class="comment"># 编译原生静态库</span></span><br><span class="line">BUILD_SHARED_LIBRARY:= $(BUILD_SYSTEM)/shared_library.mk <span class="comment"># 编译设备动态库</span></span><br><span class="line">BUILD_EXECUTABLE:= $(BUILD_SYSTEM)/executable.mk <span class="comment"># 编译设备可执行文件</span></span><br><span class="line">BUILD_RAW_EXECUTABLE:= $(BUILD_SYSTEM)/raw_executable.mk <span class="comment"># 编译原生可执行文件</span></span><br><span class="line">BUILD_HOST_EXECUTABLE:= $(BUILD_SYSTEM)/host_executable.mk <span class="comment"># 编译主机可执行文件</span></span><br><span class="line">BUILD_PACKAGE:= $(BUILD_SYSTEM)/package.mk <span class="comment"># 编译apk文件</span></span><br><span class="line">BUILD_PHONY_PACKAGE:= $(BUILD_SYSTEM)/phony_package.mk <span class="comment"># </span></span><br><span class="line">BUILD_HOST_PREBUILT:= $(BUILD_SYSTEM)/host_prebuilt.mk <span class="comment"># 处理一个或多个主机使用的已编译文件，依赖multi_prebuilt.mk</span></span><br><span class="line">BUILD_PREBUILT:= $(BUILD_SYSTEM)/prebuilt.mk <span class="comment"># 处理一个已经编译好的文件，如：jar包</span></span><br><span class="line">BUILD_MULTI_PREBUILT:= $(BUILD_SYSTEM)/multi_prebuilt.mk <span class="comment"># 处理一个或多个已编译文件，依赖prebuilt.mk</span></span><br><span class="line">BUILD_JAVA_LIBRARY:= $(BUILD_SYSTEM)/java_library.mk <span class="comment"># 编译设备动态java库</span></span><br><span class="line">BUILD_STATIC_JAVA_LIBRARY:= $(BUILD_SYSTEM)/static_java_library.mk <span class="comment"># 编译设备静态java库 </span></span><br><span class="line">BUILD_HOST_JAVA_LIBRARY:= $(BUILD_SYSTEM)/host_java_library.mk  <span class="comment"># 编译主机动态java库</span></span><br><span class="line">BUILD_DROIDDOC:= $(BUILD_SYSTEM)/droiddoc.mk</span><br><span class="line">BUILD_COPY_HEADERS := $(BUILD_SYSTEM)/copy_headers.mk</span><br><span class="line">BUILD_NATIVE_TEST := $(BUILD_SYSTEM)/native_test.mk</span><br><span class="line">BUILD_HOST_NATIVE_TEST := $(BUILD_SYSTEM)/host_native_test.mk</span><br><span class="line">BUILD_NOTICE_FILE := $(BUILD_SYSTEM)/notice_files.mk</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">include $(BUILD_SYSTEM)/envsetup.mk <span class="comment">#定义全局变量、用户特殊编译配置等 ，下详解</span></span><br><span class="line"><span class="comment"># Boards may be defined under $(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)</span></span><br><span class="line"><span class="comment"># or under vendor/*/$(TARGET_DEVICE).  Search in both places, but</span></span><br><span class="line"><span class="comment"># make sure only one exists.</span></span><br><span class="line"><span class="comment"># Real boards should always be associated with an OEM vendor.</span></span><br><span class="line"><span class="comment">#在$(SRC_TARGET_DIR)/board/$(TARGET_DEVICE) 或vendor/*/$(TARGET_DEVICE)中搜索BoardConfig.mk文件，但两个路径中只能存在一个mk文件</span></span><br><span class="line">board_config_mk := \</span><br><span class="line">	$(strip $(wildcard \</span><br><span class="line">		$(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)/BoardConfig.mk \</span><br><span class="line">		$(shell <span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">4</span> -path <span class="string">'*/$(TARGET_DEVICE)/BoardConfig.mk'</span>) \</span><br><span class="line">		$(shell <span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">4</span> -path <span class="string">'*/$(TARGET_DEVICE)/BoardConfig.mk'</span>) \</span><br><span class="line">	))</span><br><span class="line">ifeq ($(board_config_mk),)</span><br><span class="line">  $(error No config file found <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(words $(board_config_mk)),<span class="number">1</span>)</span><br><span class="line">  $(error Multiple board config files <span class="keyword">for</span> TARGET_DEVICE $(TARGET_DEVICE): $(board_config_mk))</span><br><span class="line">endif</span><br><span class="line">include $(board_config_mk)</span><br><span class="line">ifeq ($(TARGET_ARCH),)</span><br><span class="line">  $(error TARGET_ARCH not defined by board config: $(board_config_mk))</span><br><span class="line">endif</span><br><span class="line">TARGET_DEVICE_DIR := $(patsubst %/,%,$(dir $(board_config_mk)))</span><br><span class="line">board_config_mk :=</span><br></pre></td></tr></table></figure></p>
<p>　　不同类型的模块的编译过程会有一些相同的步骤，例如：编译一个 Java 库和编译一个 APK 文件都需要定义如何编译 Java 文件。因此，config.mk中导入的mk 文件的定义中会包含一些共同的代码逻辑。为了减少代码冗余，将共同的代码复用起来，将共同代码放到专门的文件中，然后在其他文件中包含这些文件的方式来实现的。这些包含关系如下图所示：<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogmk.png" alt="模块mk文件的关系"></p>
<h3 id="build\core\_envsetup-mk">build\core\ envsetup.mk</h3><p>此文件主要包括product_config.mk文件，配置build系统需要的环境变量，确定当前编译的主机平台信息，然后指定编译时输出文件的OUT目录。部分关键代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The product defaults to generic on hardware</span></span><br><span class="line"><span class="comment"># NOTE: This will be overridden in product_config.mk if make</span></span><br><span class="line"><span class="comment"># was invoked with a PRODUCT-xxx-yyy goal.</span></span><br><span class="line">ifeq ($(TARGET_PRODUCT),)</span><br><span class="line">TARGET_PRODUCT := full</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># the variant -- the set of files that are included for a build</span></span><br><span class="line">ifeq ($(strip $(TARGET_BUILD_VARIANT)),)</span><br><span class="line">TARGET_BUILD_VARIANT := eng</span><br><span class="line">endif</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Read the product specs so we an get TARGET_DEVICE and other</span></span><br><span class="line"><span class="comment"># variables that we need in order to locate the output files.</span></span><br><span class="line">include $(BUILD_SYSTEM)/product_config.mk</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 指定编译文件输出路径</span></span><br><span class="line">ifeq (,$(strip $(OUT_DIR)))</span><br><span class="line">ifeq (,$(strip $(OUT_DIR_COMMON_BASE)))</span><br><span class="line">OUT_DIR := $(TOPDIR)out</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">OUT_DIR := $(OUT_DIR_COMMON_BASE)/$(notdir $(PWD))</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line">DEBUG_OUT_DIR := $(OUT_DIR)/debug </span><br><span class="line">PRODUCT_OUT := $(TARGET_PRODUCT_OUT_ROOT)/$(TARGET_DEVICE)</span><br><span class="line">TARGET_OUT_JAVA_LIBRARIES:= $(TARGET_OUT)/framework</span><br><span class="line">TARGET_OUT_INTERMEDIATES := $(PRODUCT_OUT)/obj</span><br><span class="line">TARGET_OUT := $(PRODUCT_OUT)/$(TARGET_COPY_OUT_SYSTEM)</span><br><span class="line">TARGET_OUT_CACHE := $(PRODUCT_OUT)/cache</span><br><span class="line">```　</span><br><span class="line"><span class="comment">## build\core\ product_config.mk</span></span><br><span class="line">此文件主要根据lunch选择的编译项读取device目录或vendor目录下不同厂商自己定义的AndroidProducts.mk文件，内包含目标产品配置文件，如：msm8916_32.mk；</span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">include $(BUILD_SYSTEM)/node_fns.mk</span><br><span class="line">include $(BUILD_SYSTEM)/product.mk</span><br><span class="line">include $(BUILD_SYSTEM)/device.mk </span><br><span class="line">...</span><br><span class="line"><span class="comment"># Import all product makefiles.</span></span><br><span class="line">$(call import-products, $(all_product_makefiles)) <span class="comment"># 找到并导入所有Makefile</span></span><br><span class="line"> <span class="comment"># Import all or just the current product makefile</span></span><br><span class="line">$(call import-products, $(current_product_makefile)) <span class="comment"># 找到并导入当前产品的Makefile</span></span><br><span class="line">$(check-all-products) <span class="comment"># 完整性检查</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 调用resolve-short-product-name函数，返回TARGET_PRODUCT的配置文件目录</span></span><br><span class="line">INTERNAL_PRODUCT := $(call resolve-short-product-name, $(TARGET_PRODUCT))</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Find the device that this product maps to.</span></span><br><span class="line">TARGET_DEVICE := $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEVICE) <span class="comment"># 获得目标设备名</span></span><br><span class="line"><span class="comment">#如：INTERNAL_PRODUCT = device\qcom\msm8916_32\msm8916_32.mk</span></span><br><span class="line">    TARGET_DEVICE  = msm8916_32</span><br></pre></td></tr></table></figure></p>
<h3 id="build\core\_product-mk">build\core\ product.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取所有AndroidProducts.mk文件</span></span><br><span class="line">define _find-android-products-files</span><br><span class="line">$(shell <span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">6</span> -name AndroidProducts.mk) \</span><br><span class="line">  $(shell <span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">6</span> -name AndroidProducts.mk) \</span><br><span class="line">  $(SRC_TARGET_DIR)/product/AndroidProducts.mk</span><br><span class="line">endef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取AndroidProducts.mk文件中设置的所有PRODUCT_MAKEFILES变量序列（其实为产品配置文件路径）</span></span><br><span class="line">define get-all-product-makefiles</span><br><span class="line">$(call get-product-makefiles,$(_find-android-products-files))</span><br><span class="line">endef</span><br></pre></td></tr></table></figure>
<h3 id="build\core\_device-mk">build\core\ device.mk</h3><p>这个文件没怎么看懂， 大致就是定义变量、根据device名字获得mk文件路径、检查device的必须变量是否被定义之类的，以后有闲功夫再研究。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_device_var_list := \</span><br><span class="line">    DEVICE_NAME \</span><br><span class="line">    DEVICE_BOARD \</span><br><span class="line">    DEVICE_REGION</span><br><span class="line"></span><br><span class="line">define dump-device</span><br><span class="line">$(info ==== $(<span class="number">1</span>) ====)\</span><br><span class="line">$(foreach v,$(_device_var_list),\</span><br><span class="line">$(info DEVICES.$(<span class="number">1</span>).$(v) := $(DEVICES.$(<span class="number">1</span>).$(v))))\</span><br><span class="line">$(info --------)</span><br><span class="line"></span><br><span class="line">endefdefine import-devices</span><br><span class="line">$(call import-nodes,DEVICES,$(<span class="number">1</span>),$(_device_var_list))</span><br><span class="line"></span><br><span class="line">define _resolve-short-device-name</span><br></pre></td></tr></table></figure></p>
<h3 id="build\core\_node_fns-mk">build\core\ node_fns.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define clear-var-list $(foreach v,$(<span class="number">1</span>),$(<span class="built_in">eval</span> $(v):=)) <span class="comment"># 清除用“:=”的变量名</span></span><br><span class="line">define copy-var-list $(foreach v,$(<span class="number">2</span>),$(<span class="built_in">eval</span> $(strip $(<span class="number">1</span>)).$(v):=$($(v)))) <span class="comment"># 拷贝变量名</span></span><br><span class="line">define move-var-list </span><br><span class="line"></span><br><span class="line">define import-nodes  $(<span class="number">1</span>) $(<span class="number">2</span>) $(<span class="number">3</span>) <span class="comment"># 导入变量，此定义需要三个入口参数：</span></span><br><span class="line">$(<span class="number">1</span>)是一个字串，是输出变量的主干名。例如”PRODUCTS<span class="string">"和”DEVICES“</span><br><span class="line"><span class="variable">$(2)</span>是一个makefile文件列表，这些文件中应该含有对<span class="variable">$(3)</span>中变量的定义</span><br><span class="line"><span class="variable">$(3)</span>是一个变量列表</span><br><span class="line">  import-nodes会创建这样形式的变量，例如：<span class="variable">$(1)</span>="</span>PRODUCTS<span class="string">",<span class="variable">$(2)</span>中含有"</span>build/target/product/core.mk<span class="string">", <span class="variable">$(3)</span>中含有"</span>PRODUCT_NAME<span class="string">",而core.mk中定义了PRODUCT_NAME:=core，则变量为：PRODUCT.build/target/product/core.mk.PRODUCT_NAME:=core。</span><br><span class="line">  import-nodes中还考虑了inherit（即继承）的问题，如果某个PRODUCT.xxx.xxx变量的值中有‘@inherit:&lt;mk文件&gt;’标识，则会把那个mk文件中相应的变量的属性添加到PRODUCT.xxx.xxx中。'@inherit:&lt;mk文件&gt;'是通过inherit-product命令添加的。这个函数定义在product.mk里面。 </span><br><span class="line">... </span><br><span class="line"># 定义其他对变量等的处理，没去细看，也不一一列出了</span></span><br></pre></td></tr></table></figure>
<h3 id="device\qcom\msm8916_32\Android-mk">device\qcom\msm8916_32\Android.mk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include $(CLEAR_VARS)</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE       := wpa_supplicant.conf</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_TAGS  := optional # 默认在所有版本下都编译</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_CLASS := ETC</span></span><br><span class="line"><span class="comment">#LOCAL_SRC_FILES    := $(LOCAL_MODULE)</span></span><br><span class="line"><span class="comment">#LOCAL_MODULE_PATH  := $(TARGET_OUT_ETC)/wifi</span></span><br><span class="line"><span class="comment">#include $(BUILD_PREBUILT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include $(call all-makefiles-under,$(LOCAL_PATH)) # 导入所有mk文件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模块mk文件详见Android.mk解析：<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/#more" target="_blank" rel="external">Android.mk解析</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a><br>　<br>　　配置好环境变量后，接下来要做的就是build了。为了提高编译速度，我们自定义了一个go.sh的脚本文件，详细下面解释。另，编译的时候一般会在后面加一个-j8来实现多线程编译，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　./go.sh -j8 or make -j8／--jobs</span><br></pre></td></tr></table></figure></p>
<p>参数“-j“ 和”—jobs ”指定了同时编译的线程数量，通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将编译默认目标“droid”（下面详解），然后将会编译出完整的 Android 系统镜像。</p>
<h2 id="build系统分类">build系统分类</h2><p>　　整个build系统的Make文件可以分为三类：</p>
<ol>
<li>build系统核心文件：定义整个build系统的框架，其他所有make文件都是在这个框架的基础上写出来的。</li>
<li>产品的make文件：位于device目录，通常以公司名和产品名分为两级目录，如：\device\qcom\msm8916_32。</li>
<li>模块的make文件：每个模块专用的make文件，kernel中统一名字为Makefile，其他为Android.mk。　</li>
</ol>
<h2 id="build结果">build结果</h2><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：</p>
<ul>
<li>/out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。</li>
<li>/out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。</li>
<li>/out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。</li>
<li>/out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译过程详解之三]]></title>
    <link href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/"/>
    <id>http://huaqianlee.me/2015/07/12/Android编译过程详解之三/</id>
    <published>2015-07-12T08:43:04.000Z</published>
    <updated>2015-07-17T14:18:18.139Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a></p>
<p>　　前两个篇基本完全涉及到了整个编译过程，接下来着重分析一下和公司产品相关的mk文件。有两个路径前面没有怎么提到过，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/target/product <span class="comment"># 当前产品配置的mk文件，如：需要包含哪些apk在此产品中</span></span><br><span class="line">build/target/board  <span class="comment"># 硬件芯片配置的mk文件，如：GPU、是否支持浮点运算等</span></span><br></pre></td></tr></table></figure></p>
<p>　　除以上两个路径外，对产品定义的文件通常位于device目录下，还可以定义在vender目录下（不过Google已不建议如此做了），device目录下根据公司名和产品名分为两级目录，这个上文已经介绍过。通常一个产品定义如下四个文件：</p>
<ul>
<li>AndroidProducts.mk </li>
<li>产品版本定义文件（一般针对不同应用环境存在多个，如：msm8916_32.mk）</li>
<li>BoardConfig.mk</li>
<li>verndorsetup.sh</li>
</ul>
<h2 id="AndroidProducts-mk">AndroidProducts.mk</h2><a id="more"></a>
<p>此文件定义PRODUCT_MAKEFILES ，用来导入产品版本配置文件列表，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. build\target\product\AndroidProducts.mk  ＃定义默认产品配置文件</span><br><span class="line">ifneq ($(TARGET_BUILD_APPS),)　＃根据TARGET_BUILD_APPS确定编译那些APP，TARGET_BUILD_APPS由上文envsetup.sh中的命令指定</span><br><span class="line">PRODUCT_MAKEFILES := \</span><br><span class="line">    $(LOCAL_DIR)/aosp_arm.mk \</span><br><span class="line">    $(LOCAL_DIR)/full.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_armv5.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_mips.mk</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PRODUCT_MAKEFILES := \</span><br><span class="line">    $(LOCAL_DIR)/core.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/generic_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_arm.mk \</span><br><span class="line">    $(LOCAL_DIR)/full.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/aosp_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/full_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/vbox_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk_x86.mk \</span><br><span class="line">    $(LOCAL_DIR)/sdk_mips.mk \</span><br><span class="line">    $(LOCAL_DIR)/large_emu_hw.mk</span><br><span class="line">endif</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="number">2</span>. device\qcom\msm8916_32\AndroidProducts.mk  <span class="comment"># 自定义产品配置文件，内容如下：</span></span><br><span class="line">　PRODUCT_MAKEFILES := \</span><br><span class="line">	　$(LOCAL_DIR)/msm8916_32.mk</span><br></pre></td></tr></table></figure></p>
<h2 id="产品版本定义文件">产品版本定义文件</h2><p>对于我用到文件则为msm8916_32.mk，主要定义此产品版本要编入哪些东西，主要变量如下：</p>
<h3 id="产品版本定义文件定义变量">产品版本定义文件定义变量</h3><table>
<thead>
<tr>
<th>常量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRODUCT_NAME</td>
<td>最终用户将看到的完整产品名，会出现在“关于手机”信息中</td>
</tr>
<tr>
<td>PRODUCT_MODEL</td>
<td>产品的型号，这也是最终用户将看到的</td>
</tr>
<tr>
<td>PRODUCT_LOCALES</td>
<td>该产品支持的地区，以空格分格，例如：en_GB de_DE es_ES fr_CA</td>
</tr>
<tr>
<td>PRODUCT_PACKAGES</td>
<td>该产品版本中包含的 APK 应用程序，以空格分格，例如：Calendar Contacts</td>
</tr>
<tr>
<td>PRODUCT_DEVICE</td>
<td>该产品的工业设计的名称</td>
</tr>
<tr>
<td>PRODUCT_MANUFACTURER</td>
<td>制造商的名称</td>
</tr>
<tr>
<td>PRODUCT_BRAND</td>
<td>该产品专门定义的商标（如果有的话）</td>
</tr>
<tr>
<td>PRODUCT_PROPERTY_OVERRIDES</td>
<td>对于商品属性的定义</td>
</tr>
<tr>
<td>PRODUCT_COPY_FILES</td>
<td>编译该产品时需要拷贝的文件，以“源路径 : 目标路径”的形式</td>
</tr>
<tr>
<td>PRODUCT_OTA_PUBLIC_KEYS</td>
<td>对于该产品的 OTA 公开 key 的列表</td>
</tr>
<tr>
<td>PRODUCT_POLICY</td>
<td>产品使用的策略</td>
</tr>
<tr>
<td>PRODUCT_PACKAGE_OVERLAYS</td>
<td>指出是否要使用默认的资源或添加产品特定定义来覆盖</td>
</tr>
<tr>
<td>PRODUCT_CONTRIBUTORS_FILE</td>
<td>HTML 文件，其中包含项目的贡献者</td>
</tr>
<tr>
<td>PRODUCT_TAGS</td>
<td>该产品的标签，以空格分格</td>
</tr>
</tbody>
</table>
<h3 id="msm8916_32-mk">msm8916_32.mk</h3><p>此文件除了引入定义以上变量以外，还有如下关键代码：　<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(call inherit-product, device/qcom/common/common.mk) <span class="comment"># 继承common.mk，此文件定义了很多值为配置文件、脚本文件的常量</span></span><br><span class="line"></span><br><span class="line">-include $(QCPATH)/common/config/rendering-engine.mk <span class="comment"># （字体渲染引擎开关）font rendering engine feature switch</span></span><br><span class="line">-include $(TOP)/customer/oem_common.mk <span class="comment"># 自定义，引入一些定制变量</span></span><br></pre></td></tr></table></figure></p>
<h2 id="BoardConfig-mk">BoardConfig.mk</h2><p>　　该文件用来配置硬件主板，它其中定义的都是设备底层的硬件特性。例如：该设备的主板相关信息，Wifi 相关信息，还有 bootloader，内核，radioimage 等信息。对于该文件的示例，请参看 Android 源码树已经有的文件。</p>
<h2 id="vendorsetup-sh">vendorsetup.sh</h2><p>　　该文件中作用是通过 add_lunch_combo 函数在 lunch 函数中添加一个菜单选项。该函数的参数是产品名称加上编译类型，中间以“-”连接，例如：add_lunch_combo full_lt26-userdebug。/build/envsetup.sh 会扫描所有 device 和 vender 二 级目 录下的名称 为”vendorsetup.sh”文件，并根据其中的内容来确定 lunch 函数的 菜单选项。</p>
<h2 id="后记">后记</h2><p>　　只有代码不会说谎，此文可能过时, 不过可以给你一个大致的脉络，然后再跟一下代码，就ok了。另，如需了解模块mk文件，参考我的另一篇博文：<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a>。我写这系列博客，主要参考了Google官网和另外两篇网上Google出来的文章，地址见下References，感谢Google，感谢另两篇文章的作者。
　　　</p>
<h2 id="References">References</h2><p><a href="http://source.android.com/source/initializing.html" target="_blank" rel="external">http://source.android.com/source/initializing.html</a> （需翻墙）<br><a href="http://source.android.com/source/building.html" target="_blank" rel="external">http://source.android.com/source/building.html</a> （需翻墙）<br><a href="http://www.cnblogs.com/mr-raptor/archive/2012/06/07/2540359.html" target="_blank" rel="external">http://www.cnblogs.com/mr-raptor/archive/2012/06/07/2540359.html</a><br><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a></p>
<p>　　前两个篇基本完全涉及到了整个编译过程，接下来着重分析一下和公司产品相关的mk文件。有两个路径前面没有怎么提到过，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/target/product <span class="comment"># 当前产品配置的mk文件，如：需要包含哪些apk在此产品中</span></span><br><span class="line">build/target/board  <span class="comment"># 硬件芯片配置的mk文件，如：GPU、是否支持浮点运算等</span></span><br></pre></td></tr></table></figure></p>
<p>　　除以上两个路径外，对产品定义的文件通常位于device目录下，还可以定义在vender目录下（不过Google已不建议如此做了），device目录下根据公司名和产品名分为两级目录，这个上文已经介绍过。通常一个产品定义如下四个文件：</p>
<ul>
<li>AndroidProducts.mk </li>
<li>产品版本定义文件（一般针对不同应用环境存在多个，如：msm8916_32.mk）</li>
<li>BoardConfig.mk</li>
<li>verndorsetup.sh</li>
</ul>
<h2 id="AndroidProducts-mk">AndroidProducts.mk</h2>]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About ActivityNotFoundException Unable to find explicit activity class && Android.mk解析]]></title>
    <link href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/"/>
    <id>http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk解析/</id>
    <published>2015-07-12T06:06:35.000Z</published>
    <updated>2015-07-20T16:39:56.039Z</updated>
    <content type="html"><![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a></p>
<h2 id="ActivityNotFoundException">ActivityNotFoundException 　</h2><p>　　最近将Android从4.4移植到5.1时，添加一个从拨号界面输入*#360*#进入battery info查看界面的功能时（如感兴趣，详情见<a href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/" target="_blank" rel="external">Android电池监控系统(bms)之一电池系统架构</a>），activity跳转部分代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(input.equals(BATTERY_INFO)</span>)</span><br><span class="line"></span>&#123;<span class="comment">//added by lihuaqian</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ComponentName Component = <span class="keyword">new</span> ComponentName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.BatteryOemInfo"</span>); </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setComponent(Component);</span><br><span class="line">        intent.setAction(Intent.ACTION_VIEW);   </span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"no activity to battery cmd."</span>); </span><br><span class="line">        <span class="comment">//e.printStackTrace();   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　遇到如下问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　ActivityNotFoundException : Unable to find explicit activity class; have you declared this activity <span class="keyword">in</span> your AndroidManifest.xml?</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　　我将流程检查了一遍又一遍，都完全没有问题，Google了很久也无结果。后灵光一现：是否Setting这个apk根本就没有安装成功，所以才导致找不到Activity。<br>　<br><strong>于是，我首先通过命令 adb install -r Setting.apk 手动安装，但总是提示安装失败，这时已有些小小兴奋，因为感觉自己快找到原因了。</strong><br>　<br><strong>然后，我将apk push进手机相应文件系统路径，重启，通过logcat打印log，后发现关键信息，如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to parse /system/priv-app/Settings: Signature mismatch <span class="keyword">for</span> shared user : SharedUserSetting&#123;<span class="number">2</span>a5b4702 android.uid.system/<span class="number">1000</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过此log信息可知：系统没有能成功安装此apk，原因是app签名不匹配。 这样就找到了问题的根源。 向应用软件部同事了解情况后得知，是因为此项目客户指定Signature。<br>　<br><strong>所以，接下来我就有两种选择：</strong></p>
<ul>
<li>自己整编整个系统，然后刷机，但是整编时间太长，所以放弃。</li>
<li>将修改代码给出软件同事，让其帮忙编一apk。（我选择了此方式，然后测试OK了）　</li>
</ul>
<p><strong>当然，这种问题主要是做系统级APP，需要用到root权限或运行于系统进程时时才会遇到，其他一般都是如下几个情况：</strong></p>
<ol>
<li>如log中提示，没有在AndroidManifest.xml中定义此Activity。</li>
<li>包名或者类名书写错误，不统一。</li>
<li>自己定义的包名或者类名与系统自带类重复。</li>
</ol>
<h2 id="Android-mk解析">Android.mk解析</h2><p>　　因为上面问题时由签名引起的，所以就深入看了一下什么地方指定签名，后发现在APP目录中的Android.mk中制定。Android.mk将source打包为如下几种modules：<br>　　　1. APK程序<br>  　　　　一般的Android程序，编译打包生成apk文件<br>　　　2. JAVA库<br>  　　　　java类库，编译打包生成jar文件<br>　　　3. C\C++应用程序<br> 　　　　可执行的C\C++应用程序<br>　　　4. C\C++静态库<br>　　　　编译生成C\C++静态库，并打包成.a文件，静态库则可被链接到动态库。<br>　　　5. C\C++动态库　　<br>　　　　编译生成共享库（动态链接库），并打包成.so文， 只有动态库才能被install or copy到apk。<br>　<br>　　在 Android Build 系统中，编译以模块（而不是文件）作为单位，每个模块都有一个唯一的名称，一个模块的依赖对象只能是另外一个模块，而不能是其他类型的对象。对于已经编译好的二进制库，如果要用来被当作是依赖对象，那么应当将这些已经编译好的库作为单独的模块。对于这些已经编译好的库使用 BUILD_PREBUILT 或 BUILD_MULTI_PREBUILT。例如：当编译某个 Java 库需要依赖一些 Jar 包时，并不能直接指定 Jar 包的路径作为依赖，而必须首先将这些 Jar 包定义为一个模块，然后在编译 Java 库的时候通过模块的名称来依赖这些 Jar 包。</p>
<p> 下面为Qualcomm Settings中的Android.mk （带“Lee:”为我自己加入以详解Android.mk）:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">//通常以如下两行开头</span><br><span class="line">LOCAL_PATH:= $(call my-dir)   // 用于定位源码路径，my-dir即当前路径</span><br><span class="line"> /*CLEAR_VARS-清理除LOCAL_PATH外的很多LOCAL_XX变量,因变量皆为全局变量，清理后避免相互影响。*/</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">/*链接外部JAVA包*/</span><br><span class="line">LOCAL_JAVA_LIBRARIES := bouncycastle conscrypt telephony-common ims-common // 当前模块依赖的 Java 共享库</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := android-support-v4 android-support-v13 jsr305 // 当前模块依赖的 Java 静态库</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *user:       该模块只在user版本下才编译</span><br><span class="line">  *eng:        该模块只在eng版本下才编译</span><br><span class="line">  *debug:    该模块只在debug版本下才编译</span><br><span class="line">  *optional:  该模块在所有版本下都编译,默认标签</span><br><span class="line">  * development:  该模块在development版本下编译</span><br><span class="line"> **/</span><br><span class="line">LOCAL_MODULE_TAGS := optional //定义该模块什么情况被编译</span><br><span class="line"></span><br><span class="line">Lee: LOCAL_MODULE    :=    //名字唯一不含空格，编译的目标对象，即名字</span><br><span class="line">Lee: LOCAL_C_INCLUDES         //包含c/c++需要的头文件路径</span><br><span class="line">Lee: LOCAL_SRC_FILES：当前模块包含的所有源代码文件。</span><br><span class="line">Lee: LOCAL_STATIC_LIBRARIES：当前模块在静态链接时需要的库的名称。</span><br><span class="line">Lee: LOCAL_SHARED_LIBRARIES：当前模块在运行时依赖的动态库的名称。</span><br><span class="line">Lee: LOCAL_CFLAGS：提供给 C/C++ 编译器的额外编译参数。</span><br><span class="line">Lee: LOCAL_PACKAGE_NAME：当前 APK 应用的名称。</span><br><span class="line">Lee: LOCAL_CERTIFICATE：签署当前应用的证书名称。</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *编译模块的源码</span><br><span class="line"> **/</span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">        $(call all-java-files-under, src) \</span><br><span class="line">        src/com/android/settings/EventLogTags.logtags \</span><br><span class="line">        src/com/android/cabl/ICABLService.aidl</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *编译模块的资源路径</span><br><span class="line"> **/</span><br><span class="line">LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">        src/com/android/location/XT/IXTSrv.aidl \</span><br><span class="line">        src/com/android/location/XT/IXTSrvCb.aidl \</span><br><span class="line">        src/com/android/display/IPPService.aidl</span><br><span class="line">LOCAL_PACKAGE_NAME := Settings //apk名</span><br><span class="line">LOCAL_CERTIFICATE := platform  // 此处定义签名</span><br><span class="line">LOCAL_PRIVILEGED_MODULE := <span class="literal">true</span>//声明apk放到system/priv-app</span><br><span class="line"></span><br><span class="line">Lee:LOCAL_CFLAGS +=$(OEM_CFLAGS)  // 声明customer（客户文件）中定义的相关宏，以便c/c++中<span class="comment">#if defined </span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * external/proguard - 抑制apk反编译的，对class混淆处理的代码路径</span><br><span class="line">  * proguard.flags 指定不需要混淆处理的native方法和变量</span><br><span class="line"> **/</span><br><span class="line">LOCAL_PROGUARD_FLAG_FILES := proguard.flags//加载当前路径proguard.flags文件</span><br><span class="line"></span><br><span class="line">include frameworks/opt/setupwizard/navigationbar/common.mk //包含指定</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  *BUILD_STATIC_LIBRARY:  编译为静态库</span><br><span class="line">  *BUILD_SHARED_LIBRARY : 编译为动态库 </span><br><span class="line">  *BUILD_EXECUTABLE:    编译为Native C可执行程序</span><br><span class="line">  * BUILD_PACKAGE:  编译为apk</span><br><span class="line"> **/</span><br><span class="line">include $(BUILD_PACKAGE) //编译为apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following include to make our test apk.</span></span><br><span class="line">ifeq (,$(ONE_SHOT_MAKEFILE))</span><br><span class="line">include $(call all-makefiles-under,$(LOCAL_PATH)) <span class="comment">#表示需要编译该目录下文件，系统在当前路径查找Android.mk来编译</span></span><br><span class="line">endif</span><br><span class="line">Lee:还有很多其他定义和语法，这里就不一一分析，不过从变量名就能窥知一二</span><br></pre></td></tr></table></figure>
<h3 id="编译类型的说明">编译类型的说明</h3><h4 id="eng">eng</h4><ul>
<li>默认类型，该编译类型适用于开发阶段。</li>
<li>安装包含 eng, debug, user，development 标签的模块</li>
<li>安装所有没有标签的非APK模块</li>
<li>安装所有产品定义文件中指定的APK模块</li>
</ul>
<h4 id="user">user</h4><ul>
<li>该编译类型适合用于最终发布阶段。</li>
<li>安装所有带有 user 标签的模块</li>
<li>安装所有没有标签的非 APK 模块</li>
<li>安装所有产品定义文件中指定的 APK 模块，APK 模块的标签将被忽略</li>
</ul>
<h4 id="userdebug">userdebug</h4><p>该编译类型适合用于debug阶段。该类型和user一样，另：</p>
<ul>
<li>会安装包含debug标签的模块</li>
<li>编译出的系统具有root访问权限</li>
</ul>
<p>　　build/core/config.mk中已经定义好了各种类型模块的编译方式。所以要执行编译，只需通过常量的方式引入对应的 Make 文件即可。详见<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a>，例如，要编译一个 APK 文件，只需要在 Android.mk 文件中，加入“include $(BUILD_PACKAGE)。<br>　<br>　　除此以外，Build 系统中还定义了一些便捷的函数以便在 Android.mk 中使用，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(call my-dir)：获取当前文件夹路径。</span><br><span class="line">$(call all-java-files-under, &lt;src&gt;)：获取指定目录下的所有 Java 文件。</span><br><span class="line">$(call all-c-files-under, &lt;src&gt;)：获取指定目录下的所有 C 语言文件。</span><br><span class="line">$(call all-Iaidl-files-under, &lt;src&gt;) ：获取指定目录下的所有 AIDL 文件。</span><br><span class="line">$(call all-makefiles-under, &lt;folder&gt;)：获取指定目录下的所有 Make 文件。</span><br><span class="line">$(call intermediates-dir-for, &lt;class&gt;, &lt;app_name&gt;, &lt;host or target&gt;, &lt;common?&gt; )：获取 Build 输出的目标文件夹路径。</span><br></pre></td></tr></table></figure></p>
<h3 id="LOCAL_CERTIFICATE">LOCAL_CERTIFICATE</h3><p>　　分析了Android.mk,再来详细说说我之前问题相关的一个属性：LOCAL_CERTIFICATE ，用于指定签名是使用的key，如不指定默认testkey。<br>　<br>分析这个属性就先得谈谈此apkAndroidManifest.xm了中的sharedUserId属性说起，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        package=<span class="string">"com.android.settings"</span></span><br><span class="line">        coreApp=<span class="string">"true"</span></span><br><span class="line">        android:sharedUserId=<span class="string">"android.uid.system"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　通过将sharedUserId配置为”android.uid.system”，即让程序运行在系统进程，而运行在系统进程则需要目标系统的platform key，Android.mk中的 LOCAL_CERTIFICATE := platform  即是声明相应签名key文件。key文件的源码路径在 build\target\product\security。通过这样处理的apk则只能在自己编译的系统里面才能使用，如若装到其他Android系统会提示：”Package … has no signatures that match those in shared user android.uid.system”。<br>　<br>　　另，android:sharedUserId属性不仅仅可以把apk放到系统进程中，也可以配置多个APK运行在一个进程中，这样可以共享数据，就会很有用处。就像我上面的Settings.apk。</p>
<p>在Android.mk中,LOCAL_CERTIFICATE可设置的值如下：</p>
<ul>
<li>LOCAL_CERTIFICATE := platform</li>
<li>LOCAL_CERTIFICATE := shared</li>
<li>LOCAL_CERTIFICATE := media　<br>然后，需要在APK源码的AndroidManifest.xml文件中的manifest节点添加如下内容：</li>
<li>android:sharedUserId=”android.uid.system”</li>
<li>android:sharedUserId=”android.uid.shared”</li>
<li>android:sharedUserId=”android.media”　<br>在Android源码的build/target/product/security/目录下有如下的4对KEY：<ol>
<li>media.pk8与media.x509.pem；</li>
<li>platform.pk8与platform.x509.pem；</li>
<li>shared.pk8与shared.x509.pem；</li>
<li>testkey.pk8与testkey.x509.pem；　</li>
</ol>
</li>
</ul>
<p>其中，”<em>.pk8”文件为私钥，”</em>.x509.pem”文件为公钥，这需要了解非对称加密方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a></p>
<h2 id="ActivityNotFoundException">ActivityNotFoundException 　</h2><p>　　最近将Android从4.4移植到5.1时，添加一个从拨号界面输入*#360*#进入battery info查看界面的功能时（如感兴趣，详情见<a href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/">Android电池监控系统(bms)之一电池系统架构</a>），activity跳转部分代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(input.equals(BATTERY_INFO)</span>)</span><br><span class="line"></span>&#123;<span class="comment">//added by lihuaqian</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ComponentName Component = <span class="keyword">new</span> ComponentName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.BatteryOemInfo"</span>); </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setComponent(Component);</span><br><span class="line">        intent.setAction(Intent.ACTION_VIEW);   </span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"no activity to battery cmd."</span>); </span><br><span class="line">        <span class="comment">//e.printStackTrace();   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　遇到如下问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　ActivityNotFoundException : Unable to find explicit activity class; have you declared this activity <span class="keyword">in</span> your AndroidManifest.xml?</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Bug" scheme="http://huaqianlee.me/tags/Bug/"/>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android编译过程详解之一]]></title>
    <link href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/"/>
    <id>http://huaqianlee.me/2015/07/11/Android编译过程详解之一/</id>
    <published>2015-07-11T11:43:04.000Z</published>
    <updated>2015-07-16T14:12:28.608Z</updated>
    <content type="html"><![CDATA[<p><strong>　　Platform Information :<br>　　　System:    Ａndroid4.4.4<br>　　　Platform:  Qualcomm msm8916<br>　　　Author:     Andy Lee<br>　　　Email:        huaqianlee@gmail.com</strong></p>
<p><strong>欢迎指出错误，共同学习，共同进步</strong></p>
<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/" target="_blank" rel="external">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/" target="_blank" rel="external">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/" target="_blank" rel="external">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">Android.mk解析</a><br>　<br>　　Google给出的编译环境和构建方法见：<a href="http://source.android.com/source/initializing.html" target="_blank" rel="external">http://source.android.com/source/initializing.html</a>，过程见：<a href="http://source.android.com/source/building.html" target="_blank" rel="external">http://source.android.com/source/building.html</a>，不过这是解释怎么编译一个通用的系统，没有详细描述细节，而且需要翻墙。接下来我就准备跟着高通平台的编译过程来详细了解一下。</p>
<p>我平时的编译步骤如下：<br>　1. source setup.sh project-name debug/release　加载命令配置环境　<br>　2. ./go.sh  [target] or make  [target]　编译<br><a id="more"></a>　<br>接下来就按照步骤来详细分析一下流程：</p>
<h2 id="source_setup-sh_project-name_debug">source setup.sh project-name debug</h2><p>　　setup.sh是自定义的一个脚本文件，用来配置环境变量，其主要内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*配置用到的jdk、jre*/</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/workspace/bin/jdk1.<span class="number">6.0</span>_37</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin:<span class="variable">$PATH</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh // 官网的第一步，加载命令，待会儿再详细解释</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> /workspace/bin/eric-PAY4/links-<span class="number">8916</span> ];<span class="keyword">then</span></span><br><span class="line">    cp <span class="operator">-a</span> /workspace/bin/eric-PAY4/links-<span class="number">8916</span> links</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="operator">-lt</span> <span class="number">2</span> ];<span class="keyword">then</span> <span class="comment"># 如命令行参数输入错误，打印提示信息</span></span><br><span class="line">    <span class="built_in">echo</span> You can input like <span class="string">"source setup.sh s5_common [debug|release]"</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> product=<span class="variable">$1</span> var=<span class="variable">$2</span> //打印输入选择 project-name  debug/release</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">"debug"</span> ];<span class="keyword">then</span>　// 根据参数选择编译项</span><br><span class="line">    choosecombo <span class="number">2</span> msm8916_32 <span class="number">3</span> <span class="variable">$1</span> </span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">"release"</span> ];<span class="keyword">then</span></span><br><span class="line">    choosecombo <span class="number">1</span> msm8916_32 <span class="number">1</span> <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your input is wrong please check again"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="source_build/envsetup-sh">source build/envsetup.sh</h3><p>　　此命令是将envsetup.sh中的命令加载到环境变量，build位于Android源码路径根目录（本文提到所有路径都是以 Android 源码树作为背景的，“/”或顶层路径指的是源码树的根目录，与文件系统无关），主要命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- lunch:   指定编译项，即编译目标和编译类型（lunch &lt;product_name&gt;-&lt;build_variant&gt;）</span><br><span class="line">- tapas:   同choosecombo，设置编译参数（tapas [&lt;App1&gt; &lt;App2&gt; ...] [arm|x86|mips|armv5] [eng|userdebug|user]）</span><br><span class="line">- croot:   切换到根目录（Changes directory to the top of the tree.）</span><br><span class="line">- m:       从源码树根目录开始make（Makes from the top of the tree.）</span><br><span class="line">- mm:      编译当前目录下所有模块，但不包括依赖文件（Builds all of the modules <span class="keyword">in</span> the current directory, but not their dependencies.）</span><br><span class="line">- mmm:    编译指定目录下的所有模块，但不包括依赖文件（Builds all of the modules <span class="keyword">in</span> the supplied directories, but not their dependencies.）</span><br><span class="line">- mma:     编译当前目录下所有模块，包括依赖文件（Builds all of the modules <span class="keyword">in</span> the current directory, and their dependencies.）</span><br><span class="line">- mmma:    编译指定目录下的所有模块，包括依赖文件（Builds all of the modules <span class="keyword">in</span> the supplied directories, and their dependencies.）</span><br><span class="line">- cgrep:   在所有c/c++文件中查找（Greps on all <span class="built_in">local</span> C/C++ files.）</span><br><span class="line">- jgrep:   在所有java文件中查找（Greps on all <span class="built_in">local</span> Java files.）</span><br><span class="line">- resgrep: 在所有res/*.xml中查找（Greps on all <span class="built_in">local</span> res/*.xml files.）</span><br><span class="line">- godir:   跳转到包含某个文件的路径（Go to the directory containing a file.）</span><br><span class="line">- printconfig：显示当前Build的配置信息</span><br></pre></td></tr></table></figure></p>
<p>　　完整命令和关键源码如下：(英文为源码注释，中文部分是原本没有，自己根据理解添加的注释)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> get_abs_build_var()   <span class="comment"># Get the value of a build variable as an absolute path.</span></span><br><span class="line"><span class="keyword">function</span> get_build_var()   <span class="comment"># Get the exact value of a build variable.</span></span><br><span class="line"><span class="keyword">function</span> check_product()  <span class="comment"># check to see if the supplied product is one we can build</span></span><br><span class="line"><span class="keyword">function</span> check_variant()  <span class="comment"># check to see if the supplied variant is valid (variant：user userdebug eng)</span></span><br><span class="line"><span class="keyword">function</span> setpaths()   <span class="comment"># sets ANDROID_BUILD_PATHS</span></span><br><span class="line"><span class="keyword">function</span> printconfig()   <span class="comment"># 打印配置</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_stuff_<span class="keyword">for</span>_environment()   <span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_sequence_number()     <span class="comment"># 设置序列号</span></span><br><span class="line"><span class="keyword">function</span> settitle()   <span class="comment"># 设置标题</span></span><br><span class="line"><span class="keyword">function</span> addcompletions()    <span class="comment"># 添加sdk/bash_completion中bash</span></span><br><span class="line"><span class="keyword">function</span> choosetype()    <span class="comment"># 选择type （debug/release）</span></span><br><span class="line"><span class="keyword">function</span> chooseoemprj()    <span class="comment"># 自定义，设置TARGET_PRODUCT，即project-name</span></span><br><span class="line"><span class="keyword">function</span> chooseproduct()    <span class="comment">#  官方自带的设置TARGET_PRODUCT</span></span><br><span class="line"><span class="keyword">function</span> choosevariant()    <span class="comment"># 设置variant (user userdebug eng)</span></span><br><span class="line"><span class="keyword">function</span> choosecombo()    <span class="comment"># 设置并打印编译参数（choosetype、chooseproduct、choosevariant、chooseoemprj、set_stuff_for_environment）</span></span><br><span class="line"><span class="keyword">function</span> add_lunch_combo()    <span class="comment"># 添加lunch项，多次调用，用来添加Android编译选项</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">print</span>_lunch_menu()    <span class="comment"># 打印lunch列表</span></span><br><span class="line"><span class="keyword">function</span> lunch()    <span class="comment"># 配置lunch</span></span><br><span class="line"><span class="keyword">function</span> _lunch()      <span class="comment"># Tab completion for lunch.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the build to build unbundled apps.</span></span><br><span class="line"><span class="comment"># Run tapas with one ore more app names (from LOCAL_PACKAGE_NAME)</span></span><br><span class="line"><span class="keyword">function</span> tapas()     <span class="comment"># 同choosecombo</span></span><br><span class="line"><span class="keyword">function</span> gettop    <span class="comment"># 获取顶层路径</span></span><br><span class="line"><span class="keyword">function</span> m()    <span class="comment"># 从顶层树开始编译</span></span><br><span class="line"><span class="keyword">function</span> findmakefile()    <span class="comment"># 找到Makefile （Android.mk）</span></span><br><span class="line"><span class="keyword">function</span> mm()    <span class="comment"># 从当前路径开始编译，不加依赖</span></span><br><span class="line"><span class="keyword">function</span> mmm()     <span class="comment"># 从指定路径开始编译，不加依赖</span></span><br><span class="line"><span class="keyword">function</span> mma()    <span class="comment"># 从当前路径看是编译，包括依赖</span></span><br><span class="line"><span class="keyword">function</span> mmma()     <span class="comment"># 从指定路径开始编译，包括依赖</span></span><br><span class="line"><span class="keyword">function</span> croot()      <span class="comment"># 切换到顶层路径</span></span><br><span class="line"><span class="keyword">function</span> cproj()     <span class="comment"># 没看懂，切换到某一路径</span></span><br><span class="line"><span class="keyword">function</span> qpid()    <span class="comment"># 输出进程号和名字 （simplified version of ps; output in the form &lt;pid&gt; &lt;procname&gt;）</span></span><br><span class="line"><span class="keyword">function</span> pid()     <span class="comment"># 输出进程号和名字 </span></span><br><span class="line"><span class="keyword">function</span> systemstack()    <span class="comment"># systemstack - dump the current stack trace of all threads in the system process to the usual ANR traces file</span></span><br><span class="line"><span class="keyword">function</span> stacks()</span><br><span class="line"><span class="keyword">function</span> gdbwrapper()</span><br><span class="line"><span class="keyword">function</span> gdbclient()</span><br><span class="line"><span class="keyword">function</span> sgrep()     <span class="comment"># 查找c/h/cpp/S/java/xml/sh/mk文件</span></span><br><span class="line"><span class="keyword">function</span> gettargetarch    <span class="comment"># 获取TARGET_ARCH</span></span><br><span class="line"><span class="keyword">function</span> jgrep()    <span class="comment"># 查找java文件</span></span><br><span class="line"><span class="keyword">function</span> cgrep()    <span class="comment"># 查找c/c++文件</span></span><br><span class="line"><span class="keyword">function</span> resgrep()    <span class="comment"># 查找xml文件</span></span><br><span class="line"><span class="keyword">function</span> mangrep()     <span class="comment"># 查找out目录中AndroidManifest.xml文件</span></span><br><span class="line"><span class="keyword">function</span> sepgrep()    <span class="comment"># 查找out目录中sepolicy</span></span><br><span class="line"><span class="keyword">function</span> treegrep()                                </span><br><span class="line"><span class="keyword">function</span> mgrep()</span><br><span class="line"><span class="keyword">function</span> getprebuilt    <span class="comment"># 获取ANDROID_PREBUILTS（编译工具）</span></span><br><span class="line"><span class="keyword">function</span> tracedmdump()</span><br><span class="line"><span class="keyword">function</span> runhat()     <span class="comment"># communicate with a running device or emulator, set up necessary state, and run the hat command.</span></span><br><span class="line"><span class="keyword">function</span> getbugreports()</span><br><span class="line"><span class="keyword">function</span> getsdcardpath()</span><br><span class="line"><span class="keyword">function</span> getscreenshotpath()</span><br><span class="line"><span class="keyword">function</span> getlastscreenshot()</span><br><span class="line"><span class="keyword">function</span> startviewserver()</span><br><span class="line"><span class="keyword">function</span> stopviewserver()</span><br><span class="line"><span class="keyword">function</span> isviewserverstarted()</span><br><span class="line"><span class="keyword">function</span> key_home()</span><br><span class="line"><span class="keyword">function</span> key_back()</span><br><span class="line"><span class="keyword">function</span> key_menu()</span><br><span class="line"><span class="keyword">function</span> smoketest()</span><br><span class="line"><span class="keyword">function</span> runtest()    <span class="comment"># simple shortcut to the runtest command</span></span><br><span class="line"><span class="keyword">function</span> godir ()    <span class="comment"># 跳到指定目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">set</span>_java_home()    <span class="comment"># Force JAVA_HOME to point to java 1.6 if it isn't already set</span></span><br><span class="line"><span class="keyword">function</span> pez     <span class="comment"># Print colored exit condition</span></span><br><span class="line"></span><br><span class="line">关键源码：</span><br><span class="line"><span class="comment"># Clear this variable.  It will be built up again when the vendorsetup.sh files are included at the end of this file.</span></span><br><span class="line"><span class="built_in">unset</span> LUNCH_MENU_CHOICES</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add_lunch_combo</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> new_combo=<span class="variable">$1</span>   <span class="comment"># 获取add_lunch_combo被调用时的参数</span></span><br><span class="line">    <span class="built_in">local</span> c</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable">$&#123;LUNCH_MENU_CHOICES[@]&#125;</span> ; <span class="keyword">do</span>   <span class="comment">#遍历LUNCH_MENU_CHOICES，第一次调用时为空</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$new_combo</span>"</span> = <span class="string">"<span class="variable">$c</span>"</span> ] ; <span class="keyword">then</span>    <span class="comment"># 如果参数存在，则返回</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> <span class="comment"># 如果参数不存在，则添加</span></span><br><span class="line">    LUNCH_MENU_CHOICES=(<span class="variable">$&#123;LUNCH_MENU_CHOICES[@]&#125;</span> <span class="variable">$new_combo</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the default one here  # 系统自动添加的默认编译项</span></span><br><span class="line">add_lunch_combo aosp_arm-eng  <span class="comment"># 调用add_lunch_combo()，传入参数</span></span><br><span class="line">add_lunch_combo aosp_x86-eng</span><br><span class="line">add_lunch_combo aosp_mips-eng</span><br><span class="line">add_lunch_combo vbox_x86-eng</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这段代码十分重要，主要在device目录查找vendorsetup.sh并加载，此文件主要添加自定义编译项，如：add_lunch_combo msm8916_32-userdebug </span></span><br><span class="line"><span class="comment"># Execute the contents of any vendorsetup.sh files we can find.</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `<span class="built_in">test</span> <span class="operator">-d</span> device &amp;&amp; find device -maxdepth <span class="number">4</span> -name <span class="string">'vendorsetup.sh'</span> <span class="number">2</span>&gt; /dev/null` \</span><br><span class="line">         `<span class="built_in">test</span> <span class="operator">-d</span> vendor &amp;&amp; find vendor -maxdepth <span class="number">4</span> -name <span class="string">'vendorsetup.sh'</span> <span class="number">2</span>&gt; /dev/null`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"including <span class="variable">$f</span>"</span></span><br><span class="line">    . <span class="variable">$f</span>  <span class="comment"># 执行找到的脚本</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">unset</span> f</span><br><span class="line"></span><br><span class="line">addcompletions  调用 addcompletions()</span><br></pre></td></tr></table></figure></p>
<p>因此可知，envsetup.sh主要有如下作用：<br>　1. 加载编译时需要的相应命令，如：help，lunch ，m，mm等。<br>　2. 添加系统默认编译项。<br>　3. 查找vendorsetup.sh文件，加载自定义编译项。</p>
<blockquote>
<p>注：有些Android版本中vendorsetup.sh文件在vendor目录　</p>
</blockquote>
<p>　　如要添加自己的产品，需要在device目录下新建一个自己公司名，新建一个vendorsetup.sh，加入自己的编译项。了解了这一条指令，再来看一下执行结果，将会更有体会，因为我所有命令都写到开始的setup.sh文件中了，所以不用想官方那样多步配置编译，如下：<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/20150711MakeAndroid.png" alt="Make"></p>
<h2 id="lunch">lunch</h2><p>　　lunch是在envsetup.sh中定义的一个命令，让用户选择编译项，用来定义product和编译过程中用到的全局变量。关于编译项，前面只是列出，并未详解，如msm8916_32-userdebug，msm8916_32为产品名，userdebug为编译类型，详细如下：</p>
<ul>
<li><p>eng: 工程机，</p>
</li>
<li><p>user:最终用户机</p>
</li>
<li><p>userdebug:调试测试机</p>
</li>
<li><p>tests:测试机 。</p>
</li>
</ul>
<p>　　在build\core\main.mk中有说明，Android源码中，每一个目标目录都有一个Android.mk，此文件中LOCAL_MODULE_TAGS就是来指定当前目标编译到哪个分类或者要不要编译。配置好后，可以通过lunch xxx 重选编译项，如：lunch msm8916_32-userdebug。</p>
<p>ok，接下来分析一下lunch function：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">lunch</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> answer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> ] ; <span class="keyword">then</span> <span class="comment"># lunch 后带参数</span></span><br><span class="line">        answer=<span class="variable">$1</span>   </span><br><span class="line">    <span class="keyword">else</span>  <span class="comment"># lunch后若不带参数，则打印所以target_product and variant 供用户选择</span></span><br><span class="line">        <span class="built_in">print</span>_lunch_menu</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Which would you like? [aosp_arm-eng] "</span></span><br><span class="line">        <span class="built_in">read</span> answer</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> selection=</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$answer</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span>  </span><br><span class="line">        selection=aosp_arm-eng <span class="comment"># 如果用户在菜单中没有选择，直接回车，则为系统缺省的aosp_arm-eng</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">echo</span> -n <span class="variable">$answer</span> | grep -q <span class="operator">-e</span> <span class="string">"^[0-9][0-9]*$"</span>) </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$answer</span> -le <span class="variable">$&#123;#LUNCH_MENU_CHOICES[@]&#125;</span> ] <span class="comment"># 如果answer是选择菜单的数字，则获取该数字对应的字符串</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            selection=<span class="variable">$&#123;LUNCH_MENU_CHOICES[$(($answer-1))]&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">echo</span> -n <span class="variable">$answer</span> | grep -q <span class="operator">-e</span> <span class="string">"^[^\-][^\-]*-[^\-][^\-]*$"</span>)  <span class="comment"># 如果 answer字符串匹配 *-*模式(*的开头不能为-)</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        selection=<span class="variable">$answer</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$selection</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Invalid lunch combo: <span class="variable">$answer</span>"</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_APPS=</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> product=$(<span class="built_in">echo</span> -n <span class="variable">$selection</span> | sed <span class="operator">-e</span> <span class="string">"s/-.*$//"</span>)  <span class="comment"># 将 product-variant模式中的product分离出来</span></span><br><span class="line">    check_product <span class="variable">$product</span>  <span class="comment"># 检查，调用关系 check_product()-&gt;get_build_var()-&gt;build/core/config.mk</span></span><br><span class="line">    <span class="keyword">if</span> [ $? <span class="operator">-ne</span> <span class="number">0</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Don't have a product spec for: '<span class="variable">$product</span>'"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Do you have the right repo manifest?"</span></span><br><span class="line">        product=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> variant=$(<span class="built_in">echo</span> -n <span class="variable">$selection</span> | sed <span class="operator">-e</span> <span class="string">"s/^[^\-]*-//"</span>) <span class="comment"># 将 product-variant模式中的variant分离出来</span></span><br><span class="line">    check_variant <span class="variable">$variant</span> <span class="comment"># 检查，看看是否在 (user userdebug eng) 范围内</span></span><br><span class="line">    <span class="keyword">if</span> [ $? <span class="operator">-ne</span> <span class="number">0</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Invalid variant: '<span class="variable">$variant</span>'"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"** Must be one of <span class="variable">$&#123;VARIANT_CHOICES[@]&#125;</span>"</span></span><br><span class="line">        variant=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$product</span>"</span> -o -z <span class="string">"<span class="variable">$variant</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  导出环境变量，这很重要，因为后面的编译系统都依赖于这里定义的几个变量</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_PRODUCT=<span class="variable">$product</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_VARIANT=<span class="variable">$variant</span></span><br><span class="line">    <span class="built_in">export</span> TARGET_BUILD_TYPE=release</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>_stuff_<span class="keyword">for</span>_environment  <span class="comment"># 设置环境变量， 在shell输入set可查看</span></span><br><span class="line">    printconfig <span class="comment"># 打印部分变量，调用关系printconfig()-&gt;get_build_var()-&gt;build/core/config.mk-&gt;build/core/envsetup.mk</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab completion for lunch.</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">_lunch</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> cur prev opts</span><br><span class="line">    COMPREPLY=()</span><br><span class="line">    cur=<span class="string">"<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>"</span></span><br><span class="line">    prev=<span class="string">"<span class="variable">$&#123;COMP_WORDS[COMP_CWORD-1]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    COMPREPLY=( $(compgen -W <span class="string">"<span class="variable">$&#123;LUNCH_MENU_CHOICES[*]&#125;</span>"</span> -- <span class="variable">$&#123;cur&#125;</span>) )</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>　　Platform Information :<br>　　　System:    Ａndroid4.4.4<br>　　　Platform:  Qualcomm msm8916<br>　　　Author:     Andy Lee<br>　　　Email:        huaqianlee@gmail.com</strong></p>
<p><strong>欢迎指出错误，共同学习，共同进步</strong></p>
<p>　　<a href="http://huaqianlee.me/2015/07/11/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%80/">Android编译过程详解之一</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Android%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%BA%8C/">Android编译过程详解之二</a><br>　　<a href="http://huaqianlee.me/2015/07/12/Andro%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3%E4%B9%8B%E4%B8%89/">Android编译过程详解之三</a><br>　　<a href="http://huaqianlee.me/2015/07/12/About-ActivityNotFoundException-Unable-to-find-explicit-activity-class-Android-mk%E8%A7%A3%E6%9E%90/">Android.mk解析</a><br>　<br>　　Google给出的编译环境和构建方法见：<a href="http://source.android.com/source/initializing.html">http://source.android.com/source/initializing.html</a>，过程见：<a href="http://source.android.com/source/building.html">http://source.android.com/source/building.html</a>，不过这是解释怎么编译一个通用的系统，没有详细描述细节，而且需要翻墙。接下来我就准备跟着高通平台的编译过程来详细了解一下。</p>
<p>我平时的编译步骤如下：<br>　1. source setup.sh project-name debug/release　加载命令配置环境　<br>　2. ./go.sh  [target] or make  [target]　编译<br>]]>
    
    </summary>
    
      <category term="编译" scheme="http://huaqianlee.me/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git常用及进阶命令总结]]></title>
    <link href="http://huaqianlee.me/2015/06/11/git%E5%B8%B8%E7%94%A8%E5%8F%8A%E8%BF%9B%E9%98%B6%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://huaqianlee.me/2015/06/11/git常用及进阶命令总结/</id>
    <published>2015-06-11T14:10:41.000Z</published>
    <updated>2015-07-22T11:54:39.525Z</updated>
    <content type="html"><![CDATA[<p>　　Git是Linux撞始人Linus Towards花一周写出来的分布式版本控制系统，大神终究是大神，这么牛逼的东西只需要一周。之前花了一百多刀买了Linus的原版自传《Just for fun》，基本上是他自己写的，很幽默，有兴趣可以看看。Linus很傲，但是傲得有资本，唯一能无视Jobs的现实扭曲力场，对Jobs的盛情邀请say no转身而去的人。　<br>　<br>　　言归正传，Git十分好用，应用也十分广泛,现在最好的代码托管网站Github就是基于git创建的，而且现在大多数公司及个人都在使用它进行代码管理，要熟练使用还是需要花一些苦功夫的，我现在也还只是会基本的应用，更深层次的使用还不熟悉。为了方便自己以后使用，将自己常用的一些命令加以总结，并Google了一些常用及进阶命令，一并列出，方便查询使用。</p>
<a id="more"></a>
<h2 id="Git配置">Git配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"huaqianlee"</span>   </span><br><span class="line">git config --global user.email <span class="string">"huaqianlee@gmail.com"</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global alias.co checkout <span class="comment"># 配置别名，co 配为checkout 别名， 不过我没用</span></span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global core.editor <span class="string">"mate -w"</span>    <span class="comment"># 设置Editor使用textmate</span></span><br><span class="line">git config <span class="operator">-l</span>  <span class="comment"># 列举所有配置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户的git配置文件~/.gitconfig</p>
</blockquote>
<h2 id="Git常用及进阶命令">Git常用及进阶命令</h2><h3 id="常用命令">常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span>  <span class="comment">#查看帮助，命令忘记了就靠它</span></span><br><span class="line">git init    <span class="comment">#初始化话目录为git仓库</span></span><br><span class="line">git clean -fd  <span class="comment"># 删除无用目录及文件</span></span><br><span class="line">git clean <span class="operator">-f</span>X  <span class="comment"># 删除无用文件</span></span><br><span class="line">git clean <span class="comment"># 删除所有untracked文件</span></span><br></pre></td></tr></table></figure>
<h3 id="添加">添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file   <span class="comment">#添加文件到暂存区</span></span><br><span class="line">git add .        <span class="comment">#将所有修改或者新加文件添加到暂存区</span></span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm file         <span class="comment">#删除文件</span></span><br><span class="line">git rm &lt;file&gt; --cached  <span class="comment"># 从版本库中删除文件，但不删除文件</span></span><br></pre></td></tr></table></figure>
<h3 id="撤销回退">撤销回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout — xx  <span class="comment">#撤销xx文件修改</span></span><br><span class="line">git checkout .     <span class="comment">#撤销工作区修改</span></span><br><span class="line">git revert &lt;<span class="variable">$id</span>&gt;    <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></span><br><span class="line">git revert HEAD     <span class="comment"># 恢复最后一次提交的状态</span></span><br><span class="line">git reset &lt;file&gt;    <span class="comment"># 从暂存区恢复某一文件</span></span><br><span class="line">git reset -- .      <span class="comment"># 从暂存区恢复所有文件</span></span><br><span class="line">git reset  –hard HEAD^/HEAD~  <span class="comment">#回退到上一版本</span></span><br><span class="line">git reset  –hard &lt;commit_id&gt;    <span class="comment">#回退到指定版本</span></span><br><span class="line">git reset HEAD file  <span class="comment">#取消add文件</span></span><br></pre></td></tr></table></figure>
<h3 id="提交">提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git commit  &lt;file&gt; <span class="comment">#提交单个文件</span></span><br><span class="line">git commit –m “description”   <span class="comment">#提交暂存区到服务器</span></span><br><span class="line">git commit <span class="operator">-a</span>           <span class="comment"># 等同执行git add、 git rm及git commit</span></span><br><span class="line">git commit -am <span class="string">"some comments"</span></span><br><span class="line">git commit --amend      <span class="comment"># 修改最后一次提交记录</span></span><br></pre></td></tr></table></figure>
<h3 id="查看状态记录">查看状态记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git status        <span class="comment">#查看仓库状态</span></span><br><span class="line">git show (<span class="variable">$id</span>)  <span class="comment"># 显示某次提交的内容</span></span><br><span class="line">git <span class="built_in">log</span>   (file)       <span class="comment">#查看（文件）提交记录</span></span><br><span class="line">git <span class="built_in">log</span> -p &lt;file&gt;   <span class="comment"># 查看每次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> -p -<span class="number">2</span>       <span class="comment"># 查看最近两次详细修改内容的diff</span></span><br><span class="line">git <span class="built_in">log</span> --stat      <span class="comment"># 查看提交统计信息</span></span><br><span class="line">git reflog       <span class="comment">#查看历史版本号</span></span><br><span class="line">git <span class="built_in">log</span> -g <span class="comment">#同上，用'log'格式输出</span></span><br><span class="line">git <span class="built_in">log</span> -- grep <span class="string">"name"</span> <span class="comment"># 搜索包含name的log </span></span><br><span class="line">git <span class="built_in">log</span> record-ID  <span class="operator">-l</span> -p <span class="comment">#查看指定ID记录，-l:显示一行，-p:显示详细修改</span></span><br></pre></td></tr></table></figure>
<h3 id="查看差异">查看差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;     <span class="comment"># 比较当前文件和暂存区文件差异</span></span><br><span class="line">git diff   <span class="comment">#比较所有文件</span></span><br><span class="line">git diff master..Andylee-Github/master <span class="comment">#比较本地和远端仓库</span></span><br><span class="line">git diff &lt;<span class="variable">$id1</span>&gt; &lt;<span class="variable">$id2</span>&gt;   <span class="comment"># 比较两次提交之间的差异</span></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="comment">#比较分支</span></span><br><span class="line">git diff --staged   <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git diff --cached   <span class="comment"># 比较暂存区和版本库差异</span></span><br><span class="line">git diff --stat     <span class="comment"># 仅仅比较统计信息</span></span><br></pre></td></tr></table></figure>
<h3 id="本地分支管理">本地分支管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment">#查看本地分支</span></span><br><span class="line">git branch  -r    <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch  <span class="operator">-a</span>     <span class="comment">#查看包括远程文件在内的所有分支 </span></span><br><span class="line">git branch   &lt;new_branch&gt; <span class="comment"># 创建新分支</span></span><br><span class="line">git branch   -v           <span class="comment"># 查看各个分支最后提交信息</span></span><br><span class="line">git branch   --merged     <span class="comment"># 查看已经被合并到当前分支的分支</span></span><br><span class="line">git branch   --no-merged  <span class="comment"># 查看尚未被合并到当前分支的分支</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;branch&gt;  <span class="comment">#切换分支</span></span><br><span class="line">git checkout –b &lt;new_branch&gt;<span class="comment">#创建新分支，并切换到新分支</span></span><br><span class="line">git merge dev    <span class="comment">#在当前的分支上合并dev分支</span></span><br><span class="line">git checkout -b &lt;new_branch&gt; &lt;branch&gt;  <span class="comment"># 基于branch创建新的new_branch</span></span><br><span class="line">git checkout  <span class="variable">$id</span>          <span class="comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></span><br><span class="line">git checkout  <span class="variable">$id</span> -b &lt;new_branch&gt;  <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></span><br><span class="line"></span><br><span class="line">git branch<span class="operator">-d</span> &lt;branch&gt;  <span class="comment"># 删除分支</span></span><br><span class="line">git branch-D &lt;branch&gt;  <span class="comment"># 强制删除分支 (未被合并的分支被删除的时需要强制)</span></span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;               <span class="comment"># 将branch分支合并到当前分支</span></span><br><span class="line">git merge origin/master --no-ff  <span class="comment"># 不要Fast-Foward合并，这样可以生成merge提交</span></span><br><span class="line">git rebase master &lt;branch&gt;       <span class="comment"># 将master rebase到branch，等同于：</span></span><br><span class="line"><span class="comment">#git checkout   &lt;branch&gt; + git rebase master + git checkout  master + git merge &lt;branch&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="补丁应用">补丁应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.patch         <span class="comment"># 生成补丁</span></span><br><span class="line">git apply ../sync.patch          <span class="comment"># 打补丁</span></span><br><span class="line">git apply --check ../sync.patch  <span class="comment"># 测试补丁能否成功</span></span><br></pre></td></tr></table></figure>
<h3 id="暂存管理">暂存管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash  <span class="comment">#暂存当前工作，恢复现场后可继续工作</span></span><br><span class="line">git stash list  <span class="comment">#查看暂存文件列表</span></span><br><span class="line">git stash apply  <span class="comment">#恢复暂存内容，暂存区不删除</span></span><br><span class="line">git stash drop  <span class="comment">#删除暂存文件</span></span><br><span class="line">git stash pop  <span class="comment">#恢复并删除文件</span></span><br></pre></td></tr></table></figure>
<h3 id="远程分支管理">远程分支管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git pull                         <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span></span><br><span class="line">git pull --no-ff                 <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></span><br><span class="line">git fetch origin                 <span class="comment"># 抓取远程仓库更新，加下一条指令等同于git pull</span></span><br><span class="line">git merge origin/master          <span class="comment"># 将远程主分支合并到本地当前分支</span></span><br><span class="line">git checkout   --track origin/branch     <span class="comment"># 跟踪某个远程分支创建相应的本地分支</span></span><br><span class="line">git checkout   -b &lt;<span class="built_in">local</span>_branch&gt; origin/&lt;remote_branch&gt;  <span class="comment"># 基于远程分支创建本地分支，功能同上</span></span><br><span class="line"></span><br><span class="line">git push                         <span class="comment"># push所有分支</span></span><br><span class="line">git push origin branch   <span class="comment"># 将本地分支推到远程分支</span></span><br><span class="line">git push –u origin branch   <span class="comment">#推送本地分支到远程仓库，首次提交需要加-u </span></span><br><span class="line">git push origin &lt;<span class="built_in">local</span>_branch&gt;   <span class="comment"># 创建远程分支， origin是远程仓库名</span></span><br><span class="line">git push origin &lt;<span class="built_in">local</span>_branch&gt;:&lt;remote_branch&gt;  <span class="comment"># 创建远程分支</span></span><br><span class="line">git push origin :&lt;remote_branch&gt;  <span class="comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></span><br></pre></td></tr></table></figure>
<h3 id="远程仓库管理">远程仓库管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git remote  <span class="comment">#查看远程库的信息</span></span><br><span class="line">git remote –v  <span class="comment">#查看远程库的详细信息</span></span><br><span class="line">git remote show origin           <span class="comment"># 查看远程服务器仓库状态</span></span><br><span class="line">git remote add origin git@github:robbin/robbin_site.git         <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:robbin/robbin_site.git <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span></span><br><span class="line">git remote rm &lt;repository&gt;       <span class="comment"># 删除远程仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/AndyLee-Github/cartboon.git   <span class="comment">#从远程仓库中克隆</span></span><br><span class="line">git <span class="built_in">clone</span> --bare robbin_site robbin_site.git  <span class="comment"># 用带版本的项目创建纯版本仓库</span></span><br><span class="line">scp -r my_project.git git@git.csdn.net:~      <span class="comment"># 将纯仓库上传到服务器上</span></span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git + <span class="built_in">cd</span> robbin_site.git + git --bare init <span class="comment"># 在服务器创建纯仓库</span></span><br><span class="line">git remote add origin git@github.com:robbin/robbin_site.git    <span class="comment"># 设置远程仓库地址</span></span><br><span class="line">git push -u origin master                                      <span class="comment"># 客户端首次提交</span></span><br><span class="line">git push -u origin develop  <span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span></span><br><span class="line">git remote <span class="built_in">set</span>-head origin master   <span class="comment"># 设置远程仓库的HEAD指向master分支</span></span><br></pre></td></tr></table></figure>
<h3 id="命令设置跟踪远程库和本地库">命令设置跟踪远程库和本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/master</span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目前先这么多，后续再补充更高级的命令， 也可参考：<a href="http://www.imooc.com/article/1089" target="_blank" rel="external">git进阶</a>，<a href="https://github.com/xirong/my-git" target="_blank" rel="external">git资料整理</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　Git是Linux撞始人Linus Towards花一周写出来的分布式版本控制系统，大神终究是大神，这么牛逼的东西只需要一周。之前花了一百多刀买了Linus的原版自传《Just for fun》，基本上是他自己写的，很幽默，有兴趣可以看看。Linus很傲，但是傲得有资本，唯一能无视Jobs的现实扭曲力场，对Jobs的盛情邀请say no转身而去的人。　<br>　<br>　　言归正传，Git十分好用，应用也十分广泛,现在最好的代码托管网站Github就是基于git创建的，而且现在大多数公司及个人都在使用它进行代码管理，要熟练使用还是需要花一些苦功夫的，我现在也还只是会基本的应用，更深层次的使用还不熟悉。为了方便自己以后使用，将自己常用的一些命令加以总结，并Google了一些常用及进阶命令，一并列出，方便查询使用。</p>]]>
    
    </summary>
    
      <category term="Tools" scheme="http://huaqianlee.me/tags/Tools/"/>
    
      <category term="Git" scheme="http://huaqianlee.me/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android电池监控系统(BMS)之一电池系统架构]]></title>
    <link href="http://huaqianlee.me/2015/06/06/Android%E7%94%B5%E6%B1%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-BMS-%E4%B9%8B%E7%94%B5%E6%B1%A0%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2015/06/06/Android电池监控系统-BMS-之电池系统架构/</id>
    <published>2015-06-06T14:17:36.000Z</published>
    <updated>2015-07-12T06:17:38.391Z</updated>
    <content type="html"><![CDATA[<p><em>Platform Information :<br>　System:    Ａndroid4.4.4<br>　Platform:  Qualcomm msm8916<br>　Author:     Andy Lee<br>　Email:        huaqianlee@gmail.com</em></p>
<p><strong>如有错误欢迎指出，共同学习，共同进步</strong><br>　<br>　　电池对移动设备的重要性不言而喻，所以电池监控系统也是Android的重中之重。今天就结合工作中的内容来分析一下电池监控系统。</p>
<h2 id="电池系统架构">电池系统架构</h2><p>　　Android中的电池使用方式包括AC（即电源适配器）、Wireless（无线充电）、USB、Battery 等不同的模式。在APP层，通常包括电池状态显示等功能。在framework层 ，主要包括从底层获取电池信息、电池管理、LED控制、绘制更新充电图标等功能。因此，bms主要负责电池状态信息读取和更新相应状态。其架构如下：　<br>　<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566Android-bms-arch.png" alt="电池系统架构"></p>
<p>自上而下，Android电池监控系统分为如下几个部分：</p>
<h3 id="电池信息查看APP">电池信息查看APP</h3><p>　　此部分主要是指查看电池信息的APP，比如电池医生、手机内置的电池信息查看APP等。这里就用工作的为例，在拨号状态下输入*#360*#，则会打开电池信息查看APP。如下所示：<br><a id="more"></a>　<br>　　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566battery-info.png" alt="电池信息"></p>
<p>　　代码主要路径：</p>
<ul>
<li>packages\apps\Settings\src\com\android\settings\BatteryOemInfo.java  //APP</li>
<li>packages\apps\Dialer\src\com\android\dialer\SpecialCharSequenceMgr.java   // 命令 配置</li>
</ul>
<p>　　在手机 /sys/class/power_supply/bms/、/sys/class/power_supply/battery/文件夹中保存了电池的所有相关信息节点，这些节点是由Linux内核创建，待会儿驱动部分将讲到此内容。此APP比较简单，主要就是读取这些文件节点、接收电池信息广播（后面将讲到此广播由BatteryService.java中发出Intent.ACTION_BATTERY_CHANGED），电池信息包括充电设备等信息，然后将这些内容更新到UI界面加以显示，SpecialCharSequenceMgr.Java中主要实现通过判断拨号命令掉用此APP。</p>
<h3 id="Java框架及本地框架">Java框架及本地框架</h3><p>　　此部分的核心文件是BatteryService.java，作为电池、充电相关的服务，其监听Uevent、读取sysfs 中的状态 、广播Intent.ACTION_BATTERY_CHANGED。此部分代码路径如下：</p>
<p><strong>frameworks\base\services\java\com\android\server</strong></p>
<ul>
<li>frameworks\base\services\java\com\android\server\BatteryService.java   // 电池管理，开机充电led控制</li>
<li>frameworks\base\services\java\com\android\server\am\BatteryStatsService.java // 影响电池的所有信息及操作，如：关机，屏幕亮度、wakelock、GPS等。</li>
</ul>
<p><strong>frameworks\base\core\java\android\os</strong></p>
<ul>
<li>frameworks\base\core\java\android\os\BatteryManager.java // 电池信息广播Intent（ACTION_BATTERY_CHANGED）用到的字符串和常量</li>
<li>frameworks\base\core\java\android\os\BatteryStats.java  // 存取电池使用情况统计，包括wakelocks, processes, packages, and services等</li>
<li><p>frameworks\base\core\java\android\os\BatteryProperties.java  // 打包电池信息读写代码，与下BatteryProperties.cpp同步</p>
</li>
<li><p>frameworks\base\core\java\com\android\internal\os\BatteryStatsImpl.java // 影响电池的所有信息及操作，时间以ms为单位</p>
</li>
<li>frameworks\base\core\java\com\android\internal\app\IBatteryStats.aidl    // .aidl为接口定义文件， 定义电池状态信息及相关操作方法。</li>
</ul>
<p><strong>frameworks\base\packages\SystemUI\src\com\android\systemui</strong></p>
<ul>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\BatteryMeterView.java // 创建系统广播接收器，接收电池信息广播，绘制电池状态图标</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\statusbar\policy\BatteryController.java // 定义一个广播接收器并在构造器里注册接收电池信息广播，收到自己广播后回调修改pluged、level</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\statusbar\policy\BatteryLevel.java // 定义电量百分比显示TextView类</li>
<li>frameworks\base\packages\SystemUI\src\com\android\systemui\power\PowerUI.java // 创建系统广播接收器，接收电池信息广播，弹出低电警告等</li>
</ul>
<p><strong>frameworks\native\services</strong></p>
<ul>
<li>frameworks\native\services\sensorservice\BatteryService.cpp // 定义BatteryService.h中创建的BatteryService类的成员函数</li>
<li>frameworks\native\services\batteryservice\BatteryProperties.cpp // 打包电池信息读写代码,与上BatteryProperties.java同步</li>
<li>frameworks\native\services\batteryservice\IBatteryPropertiesListener.cpp // 监听电池信息  ，和下文件一起为BatteryService.java中的update(BatteryProperties)服务</li>
<li>frameworks\native\services\batteryservice\IBatteryPropertiesRegistrar.cpp  // 注册电池监听</li>
</ul>
<p><strong>system\core\healthd</strong></p>
<ul>
<li>system\core\healthd\BatteryMonitor.cpp // 从/sys/class/power_supply中获取电池信息，并update BatteryProperties</li>
<li>system\core\healthd\BatteryPropertiesRegistrar.cpp // 好像系统没有用到，暂时还不知道此文件的用处</li>
<li>system\core\healthd\healthd.cpp // 监听底层上报事件，调用BatteryMonitor.cpp中的update</li>
</ul>
<p>// BatteryService.java<br>processValuesLocked   connect /dis/ led   广播<br>sendIntentLocked() 电池状态改变，广播</p>
<p>mBatteryPropertiesRegistrar = IBatteryPropertiesRegistrar.Stub.asInterface(b); 注册<br>    BatteryService.this.update(props)<br>      update()<br>        processValuesLocked(); </p>
<p> mBatteryPropertiesRegistrar.registerListener(mBatteryPropertiesListener);<br>frameworks\native\services\batteryservice\IBatteryPropertiesRegistrar.cpp<br>frameworks\native\services\batteryservice\IBatteryPropertiesListener.cpp</p>
<p>　<br>未完待续….</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>Platform Information :<br>　System:    Ａndroid4.4.4<br>　Platform:  Qualcomm msm8916<br>　Author:     Andy Lee<br>　Email:        huaqianlee@gmail.com</em></p>
<p><strong>如有错误欢迎指出，共同学习，共同进步</strong><br>　<br>　　电池对移动设备的重要性不言而喻，所以电池监控系统也是Android的重中之重。今天就结合工作中的内容来分析一下电池监控系统。</p>
<h2 id="电池系统架构">电池系统架构</h2><p>　　Android中的电池使用方式包括AC（即电源适配器）、Wireless（无线充电）、USB、Battery 等不同的模式。在APP层，通常包括电池状态显示等功能。在framework层 ，主要包括从底层获取电池信息、电池管理、LED控制、绘制更新充电图标等功能。因此，bms主要负责电池状态信息读取和更新相应状态。其架构如下：　<br>　<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/201566Android-bms-arch.png" alt="电池系统架构"></p>
<p>自上而下，Android电池监控系统分为如下几个部分：</p>
<h3 id="电池信息查看APP">电池信息查看APP</h3><p>　　此部分主要是指查看电池信息的APP，比如电池医生、手机内置的电池信息查看APP等。这里就用工作的为例，在拨号状态下输入*#360*#，则会打开电池信息查看APP。如下所示：<br>]]>
    
    </summary>
    
      <category term="电源管理" scheme="http://huaqianlee.me/tags/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 电源管理架构]]></title>
    <link href="http://huaqianlee.me/2015/05/30/Android%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2015/05/30/Android电源管理架构/</id>
    <published>2015-05-30T08:04:45.000Z</published>
    <updated>2015-07-12T06:16:12.720Z</updated>
    <content type="html"><![CDATA[<p>　　对于移动设备，电源管理是相当重要的一部分，因为现在在公司主要负责电源管理部分，所以借用Google对其研究了一下，再结合自己的工作经验，准备接下来写一系列相关的文章。因为现在还研究得不够，所以最初的文章会不够深入。不过我会慢慢研究，然后写一些比较详细的解读。</p>
<h2 id="高通的引导体系结构">高通的引导体系结构</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155304921b788-8a63-472f-be7c-2220a98cf428.jpg" alt="boot"><br><strong>SBL- Second BootLoader</strong><br><a id="more"></a></p>
<h2 id="电源管理框图">电源管理框图</h2><p>　　这里先借用网上一张老版本的图片，后面再自己绘制一张详细的框图补上来。<br><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155305061d93f-df42-46c4-ae36-bd18648583b1.jpg" alt="power"></p>
<h2 id="主要文件及路径">主要文件及路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kernel\kernel\power\*</span><br><span class="line">   arch\arm\match-xxx\pm.c</span><br><span class="line">   driver\power\*</span><br><span class="line">   system\core\charger\charger.c   - 关机充电信息，显示充电<span class="built_in">log</span>等</span><br><span class="line">   上层文件太分散，待后期文件详解再一一列出</span><br></pre></td></tr></table></figure>
<h2 id="Android结构">Android结构</h2><p>　　Android的电源管理主要通过锁和定时器来切换系统的状态(即三种低功耗状态)，使系统功耗降到最低。 电源管理架构分为四大部分： APP，Framework，Hal，Kernel。</p>
<h3 id="应用层(APP)">应用层(APP)</h3><p>　　应用层主要指应用程序及其他使用电源管理的service。</p>
<h3 id="架构层(Framework)">架构层(Framework)</h3><p>　　Framework层为APP提供API接口及协调电源的管理工作，主要包含：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PowerManager.java  // 提供给应用层调用</span><br><span class="line">PowerManagerService.java  // 核心文件</span><br><span class="line">com_android_server_PowerManagerService.cpp、</span><br><span class="line">Power.java  // 提供底层的函数接口,与JNI交互</span><br><span class="line">android_os_Power.cpp  //jni交互文件</span><br></pre></td></tr></table></figure></p>
<p>　　这一层的功能相对比较复杂,比如系统状态的切换，背光的调节及开关，Wake Lock的申请和释放等等，但这一层跟硬件平台无关。</p>
<h3 id="Hal层">Hal层</h3><p>　　Hal层为一个Power.c文件，该文件通过sysfs的方式与kernel进行通信。主要功能有申请wake_lock，释放wake_lock，设置屏幕状态等。所有对电源管理的调用应通过Android的PowerManager API来完成。</p>
<h3 id="Kernel层">Kernel层</h3><p>　　Kernel层的电源管理方案实现主要包含三部分：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kernel\power\：实现了系统电源管理框架机制</span><br><span class="line">Arch\arm(or mips or powerpc)\mach-XXX\pm.c:实现对特定板的处理器电源管理</span><br><span class="line">drivers\power:是设备电源管理的基础框架，为驱动提供了电源管理接口. 实现了针对所有设备的sysfs操作函数.</span><br></pre></td></tr></table></figure></p>
<p>　　android提供了三种低功耗状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">earlysuspend //让某些设备选择进入某种功耗较低的状态，如LCD灭掉</span><br><span class="line"><span class="built_in">suspend</span> // 除电源模块以外的外围模块和CPU均不工作，只有内存保持自刷新的一个工作状态</span><br><span class="line">hibernation// 所有内存镜像都被写入到磁盘中，然后系统关机，重启后系统将恢复到关机之前的状态</span><br></pre></td></tr></table></figure></p>
<h2 id="">　</h2><p>　</p>
<h3 id="电源管理机制">电源管理机制</h3><p>　　Android的电源管理主要通过锁和定时器来切换系统的状态(如上述三种低功耗状态),使系统功耗降到最低.
　</p>
<h4 id="实现流程">实现流程</h4><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/2015530390bc951-ede6-47dd-83ce-c1a6aced6e82.png" alt="framework">
　</p>
<h4 id="状态切换流程">状态切换流程</h4><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/201553020e46e8e-7570-483b-9ea2-375cf4ae59d2.png" alt="state"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　对于移动设备，电源管理是相当重要的一部分，因为现在在公司主要负责电源管理部分，所以借用Google对其研究了一下，再结合自己的工作经验，准备接下来写一系列相关的文章。因为现在还研究得不够，所以最初的文章会不够深入。不过我会慢慢研究，然后写一些比较详细的解读。</p>
<h2 id="高通的引导体系结构">高通的引导体系结构</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/20155304921b788-8a63-472f-be7c-2220a98cf428.jpg" alt="boot"><br><strong>SBL- Second BootLoader</strong><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Stdudio Linux/windows/mac常用快捷键]]></title>
    <link href="http://huaqianlee.me/2015/05/29/Android-Stdudio-Linux-windows-mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://huaqianlee.me/2015/05/29/Android-Stdudio-Linux-windows-mac常用快捷键/</id>
    <published>2015-05-29T12:10:41.000Z</published>
    <updated>2015-07-17T17:12:16.488Z</updated>
    <content type="html"><![CDATA[<p>　　前些时间把Android Studio的环境折腾好，典型的geek风一下子完全吸引了我，比eclipse好用太多了，有很多意外的功能,快捷键可以自定义，但我基本都用的默认的。本来用Macbook Pro做Android开发是最好的选择，但自己平时要搞Linux/Android底层相关的东西，thinkpad就成为最好的选择，所以就入手了thinkpad，用着Ubuntu和Windows，先总结我使用环境下的快捷键，等入手Mac后再添加Mac的快捷键。<br><a id="more"></a>　　</p>
<h2 id="AS快捷键">AS快捷键</h2><table>
<thead>
<tr>
<th>Action</th>
<th>Win/Linux</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Common：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>编译工程</td>
<td>Ctrl+F9</td>
<td></td>
</tr>
<tr>
<td>运行</td>
<td>Alt+Shift+X</td>
<td></td>
</tr>
<tr>
<td>调试运行</td>
<td>Alt+Shift+D</td>
<td></td>
</tr>
<tr>
<td>git push</td>
<td>Ctrl+Shift+K</td>
<td></td>
</tr>
<tr>
<td>打开Project Structure</td>
<td>Ctrl+Alt+Shift+S</td>
<td></td>
</tr>
<tr>
<td>打开settings</td>
<td>Ctrl+Alt+S</td>
<td></td>
</tr>
<tr>
<td>重命名</td>
<td>Shift +F６</td>
<td></td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl+F</td>
<td></td>
</tr>
<tr>
<td>全局查找</td>
<td>Ctrl+Shift+F</td>
<td></td>
</tr>
<tr>
<td>文件查找</td>
<td>双击Shift</td>
<td></td>
</tr>
<tr>
<td>最近文件</td>
<td>Ctrl+E</td>
<td></td>
</tr>
<tr>
<td>最近编辑文件</td>
<td>Ctrl+Shift+E</td>
<td></td>
</tr>
<tr>
<td>查看继承类</td>
<td>F4</td>
<td></td>
</tr>
<tr>
<td><strong>Code：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>导入包</td>
<td>Alt+Enter</td>
<td></td>
</tr>
<tr>
<td>注释代码(//)</td>
<td>Ctrl + /</td>
<td></td>
</tr>
<tr>
<td>注释代码(/**/)</td>
<td>Ctrl + Shift + /</td>
<td></td>
</tr>
<tr>
<td>格式化代码</td>
<td>Ctrl + Alt + L</td>
<td></td>
</tr>
<tr>
<td>清除无效包引用</td>
<td>Alt + Ctrl + O</td>
<td></td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl + F</td>
<td></td>
</tr>
<tr>
<td>查找+替换</td>
<td>Ctrl + R</td>
<td></td>
</tr>
<tr>
<td>上下移动代码</td>
<td>Alt + Shift + Up/Down</td>
<td></td>
</tr>
<tr>
<td>删除行</td>
<td>Ctrl + Y</td>
<td></td>
</tr>
<tr>
<td>重命名</td>
<td>Ctrl+Shift+R</td>
<td></td>
</tr>
<tr>
<td>以代码块单位移动光标</td>
<td>Alt+Up/Down</td>
<td></td>
</tr>
<tr>
<td>扩大缩小选中范围</td>
<td>Ctrl + W/Ctrl + Shift + W</td>
<td></td>
</tr>
<tr>
<td>快捷生成结构体</td>
<td>Ctrl + Alt + T</td>
<td></td>
</tr>
<tr>
<td>快捷覆写方法</td>
<td>Ctrl + O</td>
<td></td>
</tr>
<tr>
<td>快捷定位到行首/尾</td>
<td>Ctrl + Left/Right</td>
<td></td>
</tr>
<tr>
<td>快速切换到上/下一视图</td>
<td>Alt+ Left/Right</td>
<td></td>
</tr>
<tr>
<td>折叠展开代码块</td>
<td>Ctrl + Plus/Minus(+/-)</td>
<td></td>
</tr>
<tr>
<td>折叠展开全部代码块</td>
<td>Ctrl + Shift + Plus/Minus</td>
<td></td>
</tr>
<tr>
<td>文件方法结构</td>
<td>Ctrl + F12</td>
<td></td>
</tr>
<tr>
<td>查找调用的位置</td>
<td>Ctrl + Alt + H</td>
<td></td>
</tr>
<tr>
<td>大小写转换</td>
<td>Ctrl + Shift + U</td>
<td></td>
</tr>
<tr>
<td><strong>Debug：</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>单步调试，进入函数</td>
<td>F5</td>
<td></td>
</tr>
<tr>
<td>单步调试，不进入函数</td>
<td>F6</td>
<td></td>
</tr>
<tr>
<td>跳出函数</td>
<td>F7</td>
<td></td>
</tr>
<tr>
<td>执行到下一断点</td>
<td>F8</td>
<td></td>
<td>　</td>
</tr>
</tbody>
</table>
<blockquote>
<p>计划过些时间入手一台MacBook Pro， 到时候再将Mac的快捷方式加进来，并在使用中不断完善此表格.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　前些时间把Android Studio的环境折腾好，典型的geek风一下子完全吸引了我，比eclipse好用太多了，有很多意外的功能,快捷键可以自定义，但我基本都用的默认的。本来用Macbook Pro做Android开发是最好的选择，但自己平时要搞Linux/Android底层相关的东西，thinkpad就成为最好的选择，所以就入手了thinkpad，用着Ubuntu和Windows，先总结我使用环境下的快捷键，等入手Mac后再添加Mac的快捷键。<br>]]>
    
    </summary>
    
      <category term="Android Studio" scheme="http://huaqianlee.me/tags/Android-Studio/"/>
    
      <category term="Tools" scheme="http://huaqianlee.me/tags/Tools/"/>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重新起航+暴力学习计划]]></title>
    <link href="http://huaqianlee.me/2015/05/27/%E9%87%8D%E6%96%B0%E8%B5%B7%E8%88%AA/"/>
    <id>http://huaqianlee.me/2015/05/27/重新起航/</id>
    <published>2015-05-27T14:23:58.000Z</published>
    <updated>2015-07-24T17:13:47.000Z</updated>
    <content type="html"><![CDATA[<p>　　几个月前，在网上看到了一篇<a href="http://www.cnblogs.com/jesse2013/p/how-to-learn-english.html" target="_blank" rel="external">Jesse Liu写的学习英语的文章</a>，受到Jesse的启发，制定了学习计划和任务监控时间表，也按照计划执行了很长一段时间，可惜一个多月前生病后因为种种原因就落下了，后面虽然有断断续续地学习，但仍造成学习进度严重滞后了。</p>
<p>　　按照计划来学习来工作很有帮助，能帮我克服懒惰等坏习惯，让自己每天知道应该干什么，养成好的学习习惯。所以今天重新拟定计划，然后按照计划来学习提升自己。就目前来看自己主要有英语\Linux\Android\Java四个大部分需要花几乎所有时间来学习。</p>
<p>　　执行计划的最大阻碍是时间和身体，由于工作性质的原因，很多时候会加班。因此需要随时关注自己的计划，将琐碎时间完全利用起来，<strong>若什么时候未能完成当天的任务，就协调时间将其补起来</strong>，如此就好。男人就是得逼自己一把，才能知道自己有多优秀，何况自己已经27了，时间不等人,能让自己拼的时间已不多。</p>
<p>　　所以，接下来就对自己接下来的学习工作做一个大的规划，很暴力的计划，详细计划就在为知笔记的每日代办中记录。</p>
<blockquote>
<p>注:计划中的内容并不都是全新学习，很多都是断断续续看过，所以对自己时间定得比较紧比较死，对其他人不完全具有参考性</p>
</blockquote>
<a id="more"></a>
<h2 id="英语学习">英语学习</h2><p>　　在开始再次学习英语之前，自己仅仅因为工作经常接触英语的原因，看到大篇英文不会恐惧，能基本看懂，但是词汇量估计就高中水平吧，听说写就更凄惨，对语法几乎忘得一干二净，能写出通顺的话语都很困难，听说就不用说了。<br>　　<br>　　工作几年后越来越意识到英语的重要性，尤其是在学习Android等技术的时候。自己慢慢地也对英语产生了兴趣，所以就下定了学习英语的决心。一开始，找了英文原著来看，结果每页都有一大半不认识;找了美剧和TED演讲之类的来听，结果能听懂的少得可怜。如此坚持了一段时间，说实话严重打击了我的积极性。<br>　<br>　　直到某天，无意之中看到Jesse的文章，大受鼓舞，在心里呐喊:我就应该这样来学习。所以当天就参考Jesse的方式制定了一个学习计划，也就是上一份流产的学习计划。现在重新拟定一份计划，自己接下来需要做的就是严格按照此计划来学习。</p>
<h3 id="英语学习时间监控">英语学习时间监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CET-4词汇</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/1</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">NEC2</td>
<td style="text-align:center">2015/5/28</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">53天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">NEC1 + 音标Review</td>
<td style="text-align:center">2015/5/31</td>
<td style="text-align:center">2015/6/7</td>
<td style="text-align:center">8天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">NEC3</td>
<td style="text-align:center">2015/7/19</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">NEC4</td>
<td style="text-align:center">2015/8/23</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">35天</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">专项阅读训练</td>
<td style="text-align:center">2015/9/27</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">63天</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">CET-6词汇</td>
<td style="text-align:center">2015/10/2</td>
<td style="text-align:center">2015/11/1</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">口语900句</td>
<td style="text-align:center">2015/10/1</td>
<td style="text-align:center">2015/12/12</td>
<td style="text-align:center">73天</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">专项写作训练</td>
<td style="text-align:center">2015/11/29</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">14天</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">听说训练</td>
<td style="text-align:center">2015/12/13</td>
<td style="text-align:center">2017/1/1</td>
<td style="text-align:center">N天</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">商务英语</td>
<td style="text-align:center">2015/12/7</td>
<td style="text-align:center">2015/12/30</td>
<td style="text-align:center">23天</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">51Talk对话训练</td>
<td style="text-align:center">2015/8/1</td>
<td style="text-align:center">2016/6/30</td>
<td style="text-align:center">N天</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="CET-4词汇背诵计划">CET-4词汇背诵计划</h4><p><em>2015/5/28~2015/7/1</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">List4</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">List5</td>
<td style="text-align:center">List6</td>
<td style="text-align:center">List7</td>
<td style="text-align:center">List8</td>
<td style="text-align:center">List9</td>
<td style="text-align:center">List10</td>
<td style="text-align:center">List11</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">List12</td>
<td style="text-align:center">List13</td>
<td style="text-align:center">List14</td>
<td style="text-align:center">List15</td>
<td style="text-align:center">List16</td>
<td style="text-align:center">List17</td>
<td style="text-align:center">List18</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">List19</td>
<td style="text-align:center">List20</td>
<td style="text-align:center">List21</td>
<td style="text-align:center">List22</td>
<td style="text-align:center">List23</td>
<td style="text-align:center">List24</td>
<td style="text-align:center">List25</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">List26</td>
<td style="text-align:center">List27</td>
<td style="text-align:center">List28</td>
<td style="text-align:center">List29</td>
<td style="text-align:center">List30</td>
<td style="text-align:center">List31</td>
<td style="text-align:center">List32</td>
</tr>
<tr>
<td style="text-align:center">第六周</td>
<td style="text-align:center">List33</td>
<td style="text-align:center">List34</td>
<td style="text-align:center">List35</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="NEC2学习计划">NEC2学习计划</h4><p><em>2015/5/28~2015/7/19</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">v1</td>
<td style="text-align:center">v2</td>
<td style="text-align:center">v3/4</td>
<td style="text-align:center">v5/6/7</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">v8</td>
<td style="text-align:center">v9/10</td>
<td style="text-align:center">v11/12</td>
<td style="text-align:center">v13/14</td>
<td style="text-align:center">v15/16</td>
<td style="text-align:center">v17/18</td>
<td style="text-align:center">v19/22</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">v23/24</td>
<td style="text-align:center">v25/26</td>
<td style="text-align:center">v27/28</td>
<td style="text-align:center">v29/30</td>
<td style="text-align:center">v31/32</td>
<td style="text-align:center">v33/34</td>
<td style="text-align:center">v35/38</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">v39/40</td>
<td style="text-align:center">v41/42</td>
<td style="text-align:center">v43/44</td>
<td style="text-align:center">v45/46</td>
<td style="text-align:center">v47/48</td>
<td style="text-align:center">v49/50</td>
<td style="text-align:center">v51/54</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">v55/58</td>
<td style="text-align:center">v59/60</td>
<td style="text-align:center">v61/62</td>
<td style="text-align:center">v63/64</td>
<td style="text-align:center">v65/66</td>
<td style="text-align:center">v67/68</td>
<td style="text-align:center">v69/72</td>
</tr>
<tr>
<td style="text-align:center">第六周</td>
<td style="text-align:center">v73/74</td>
<td style="text-align:center">v75/76</td>
<td style="text-align:center">v77/78</td>
<td style="text-align:center">v79/80</td>
<td style="text-align:center">v81</td>
<td style="text-align:center">69/70</td>
<td style="text-align:center">71/72</td>
</tr>
<tr>
<td style="text-align:center">第七周</td>
<td style="text-align:center">73/74</td>
<td style="text-align:center">75/76</td>
<td style="text-align:center">77/78</td>
<td style="text-align:center">79/80</td>
<td style="text-align:center">81/82</td>
<td style="text-align:center">83/84</td>
<td style="text-align:center">85/86</td>
</tr>
<tr>
<td style="text-align:center">第八周</td>
<td style="text-align:center">87/88</td>
<td style="text-align:center">89/90</td>
<td style="text-align:center">91/92</td>
<td style="text-align:center">93/94</td>
<td style="text-align:center">95/96</td>
<td style="text-align:center">null</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h5 id="NEC1+音标review计划">NEC1+音标review计划</h5><p><em>2015/5/31~2015/6/7</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/30/音</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">1/50</td>
<td style="text-align:center">31/70</td>
<td style="text-align:center">51/90/音</td>
<td style="text-align:center">71/110</td>
<td style="text-align:center">91/130</td>
<td style="text-align:center">111/144</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<blockquote>
<p>重复表示第二天复习</p>
</blockquote>
<h4 id="NEC3学习计划">NEC3学习计划</h4><p><em>2015/7/19~2015/8/23</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">v1</td>
<td style="text-align:center">v2</td>
<td style="text-align:center">v3/4</td>
<td style="text-align:center">v5/6</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">v7/8</td>
<td style="text-align:center">v9/10</td>
<td style="text-align:center">v11/12</td>
<td style="text-align:center">v13/14</td>
<td style="text-align:center">v15/16</td>
<td style="text-align:center">v17/18</td>
<td style="text-align:center">v19/22</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">v21/22</td>
<td style="text-align:center">v23/24</td>
<td style="text-align:center">v25/26</td>
<td style="text-align:center">v27/28</td>
<td style="text-align:center">v29/30</td>
<td style="text-align:center">v31/32</td>
<td style="text-align:center">v33/37</td>
</tr>
<tr>
<td style="text-align:center">第六周</td>
<td style="text-align:center">v38/39</td>
<td style="text-align:center">v40/41</td>
<td style="text-align:center">v42/43</td>
<td style="text-align:center">v44/45</td>
<td style="text-align:center">v46/47</td>
<td style="text-align:center">v48/49</td>
<td style="text-align:center">v50/54</td>
</tr>
<tr>
<td style="text-align:center">第七周</td>
<td style="text-align:center">v55/56</td>
<td style="text-align:center">v57/58</td>
<td style="text-align:center">v59/60</td>
<td style="text-align:center">v61/63</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<h4 id="NEC4学习计划">NEC4学习计划</h4><p><em>2015/8/24~2015/9/27</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7/9</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">10</td>
<td style="text-align:center">11</td>
<td style="text-align:center">12</td>
<td style="text-align:center">13</td>
<td style="text-align:center">14</td>
<td style="text-align:center">15</td>
<td style="text-align:center">16/18</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">19/20</td>
<td style="text-align:center">21</td>
<td style="text-align:center">22/23</td>
<td style="text-align:center">24</td>
<td style="text-align:center">25/26</td>
<td style="text-align:center">27</td>
<td style="text-align:center">28/31</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">32</td>
<td style="text-align:center">33/34</td>
<td style="text-align:center">35</td>
<td style="text-align:center">36/37</td>
<td style="text-align:center">38/39</td>
<td style="text-align:center">41/42</td>
<td style="text-align:center">43/46</td>
</tr>
</tbody>
</table>
<h2 id="Linux学习">Linux学习</h2><p>　　关于Linux，断断续续也搞了这么些日子了，但是也还只学了皮毛，所以很有必要继续深入学习，对Linux内核有更深入的了解，这样也有助于打通Android的任督二脉， 所以今年就看一些以前看过却没能看完看懂的经典书籍。</p>
<h3 id="Linux相关书籍阅读监控">Linux相关书籍阅读监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Linux内核完全注释</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/14</td>
<td style="text-align:center">16天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Linux设备驱动详解</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">2015/7/26</td>
<td style="text-align:center">28天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">深入理解Linux内核</td>
<td style="text-align:center">2015/7/26</td>
<td style="text-align:center">2015/8/15</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Linux内核情景分析</td>
<td style="text-align:center">2015/8/16</td>
<td style="text-align:center">2015/9/5</td>
<td style="text-align:center">51天</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="Linux内核完全注释阅读计划">Linux内核完全注释阅读计划</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center"></td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/60</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">60/92</td>
<td style="text-align:center">92/117</td>
<td style="text-align:center">122/132</td>
<td style="text-align:center">133/170</td>
<td style="text-align:center">171/213</td>
<td style="text-align:center">213/230</td>
<td style="text-align:center">231/326</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">328/346</td>
<td style="text-align:center">347/363</td>
<td style="text-align:center">363/389</td>
<td style="text-align:center">389/409</td>
<td style="text-align:center">409/415</td>
<td style="text-align:center">417/437</td>
<td style="text-align:center">review</td>
</tr>
</tbody>
</table>
<p>　</p>
<h2 id="Java学习">Java学习</h2><p>　　关于Java的学习，主要让自己对一门语言能精通掌握，提升自己的编程思维。然后，每次看到别人搞出酷酷的博客和网页，就是各种羡慕嫉妒恨，所以JavaWeb部分也是接下来学习的重点。</p>
<h3 id="Java学习监控">Java学习监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Think in Java</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/28</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Java EE</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">？</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Effective Java</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">？</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="Think_in_Java阅读计划">Think in Java阅读计划</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">1/63</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">64/107</td>
<td style="text-align:center">109/147</td>
<td style="text-align:center">148/168</td>
<td style="text-align:center">169/215</td>
<td style="text-align:center">216/245</td>
<td style="text-align:center">248/281</td>
<td style="text-align:center">283/312</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">313/334</td>
<td style="text-align:center">334/350</td>
<td style="text-align:center">352/371</td>
<td style="text-align:center">372/400</td>
<td style="text-align:center">400/420</td>
<td style="text-align:center">420/432</td>
<td style="text-align:center">433/457</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">459/483</td>
<td style="text-align:center">483/512</td>
<td style="text-align:center">512/524</td>
<td style="text-align:center">525/539</td>
<td style="text-align:center">539/568</td>
<td style="text-align:center">568/590</td>
<td style="text-align:center">590/619</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">620/649</td>
<td style="text-align:center">650/674</td>
<td style="text-align:center">674/702</td>
<td style="text-align:center">702/722</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<p>　</p>
<h2 id="Android学习">Android学习</h2><p>　　Android不用说，绝对是接下来几年的大趋势，自己又对Android超感兴趣，所以Android的学习是今年接下来日子的重中之重。我要从最底层到APP完全了解，所以要走的路很长。</p>
<h3 id="Android学习监控">Android学习监控</h3><table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">标题</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">结束时间</th>
<th style="text-align:center">持续时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">第一行代码(remaining)+developer</td>
<td style="text-align:center">2015/5/30</td>
<td style="text-align:center">2015/6/28</td>
<td style="text-align:center">30天</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Android Programing</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">2015/8/1</td>
<td style="text-align:center">33天</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">stormzhang+Open source</td>
<td style="text-align:center">2015/6/29</td>
<td style="text-align:center">?</td>
<td style="text-align:center">N天</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Android源码分析</td>
<td style="text-align:center">2015/7/20</td>
<td style="text-align:center">2015/10/31</td>
<td style="text-align:center">103天</td>
</tr>
</tbody>
</table>
<p>　</p>
<h4 id="第一行代码(remaining)+developer">第一行代码(remaining)+developer</h4><p><em>2015/5/30~2015/6/28</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">7-1/2</td>
<td style="text-align:center">7-3/4</td>
<td style="text-align:center">8-1/2</td>
<td style="text-align:center">8-3/5</td>
<td style="text-align:center">9-1/3</td>
<td style="text-align:center">9-4/7</td>
<td style="text-align:center">10-1/3</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">10-4/6</td>
<td style="text-align:center">11-1/3</td>
<td style="text-align:center">11-4/6</td>
<td style="text-align:center">12</td>
<td style="text-align:center">13</td>
<td style="text-align:center">14-1/4</td>
<td style="text-align:center">14-5/9</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">d1</td>
<td style="text-align:center">d2</td>
<td style="text-align:center">d3</td>
<td style="text-align:center">d4</td>
<td style="text-align:center">d5</td>
<td style="text-align:center">d6</td>
<td style="text-align:center">d7</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">d8</td>
<td style="text-align:center">d9</td>
<td style="text-align:center">d10</td>
<td style="text-align:center">d11</td>
<td style="text-align:center">d12</td>
<td style="text-align:center">d13</td>
<td style="text-align:center">d15/16</td>
</tr>
</tbody>
</table>
<h4 id="Android_Programing">Android Programing</h4><p><em>2015/6/29~2015/8/1</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">Week</th>
<th style="text-align:center">Monday</th>
<th style="text-align:center">Tuesday</th>
<th style="text-align:center">Wednesday</th>
<th style="text-align:center">Thursday</th>
<th style="text-align:center">Friday</th>
<th style="text-align:center">Saturday</th>
<th style="text-align:center">Sunday</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一周</td>
<td style="text-align:center">c1</td>
<td style="text-align:center">c2</td>
<td style="text-align:center">c3/c4</td>
<td style="text-align:center">c5</td>
<td style="text-align:center">c6</td>
<td style="text-align:center">c7</td>
<td style="text-align:center">c8</td>
</tr>
<tr>
<td style="text-align:center">第二周</td>
<td style="text-align:center">c9</td>
<td style="text-align:center">c10</td>
<td style="text-align:center">c11</td>
<td style="text-align:center">c12</td>
<td style="text-align:center">c13</td>
<td style="text-align:center">c14</td>
<td style="text-align:center">c15</td>
</tr>
<tr>
<td style="text-align:center">第三周</td>
<td style="text-align:center">c16</td>
<td style="text-align:center">c17</td>
<td style="text-align:center">c18</td>
<td style="text-align:center">c19</td>
<td style="text-align:center">c20</td>
<td style="text-align:center">c21</td>
<td style="text-align:center">c22</td>
</tr>
<tr>
<td style="text-align:center">第四周</td>
<td style="text-align:center">c23</td>
<td style="text-align:center">c24</td>
<td style="text-align:center">c25</td>
<td style="text-align:center">c26</td>
<td style="text-align:center">c27</td>
<td style="text-align:center">c28</td>
<td style="text-align:center">c29</td>
</tr>
<tr>
<td style="text-align:center">第五周</td>
<td style="text-align:center">c30</td>
<td style="text-align:center">c31</td>
<td style="text-align:center">c32</td>
<td style="text-align:center">c33</td>
<td style="text-align:center">c34</td>
<td style="text-align:center">c35</td>
<td style="text-align:center">c36</td>
</tr>
</tbody>
</table>
<blockquote>
<p>just for english</p>
</blockquote>
<h2 id="时间拆解">时间拆解</h2><p>　　一天24小时,10小时上班,6小时睡觉,2小时吃饭休息,剩下6小时学习.睡觉前看自控力,冥想.</p>
<h3 id="每日监控">每日监控</h3><table>
<thead>
<tr>
<th style="text-align:center">Time</th>
<th style="text-align:center">工作日</th>
<th style="text-align:center">休息日</th>
<th style="text-align:center">Sum-Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7.20/8:45</td>
<td style="text-align:center">英语复习预习</td>
<td style="text-align:center">英语复习预习</td>
<td style="text-align:center">1h25m</td>
</tr>
<tr>
<td style="text-align:center">8:40/19:40</td>
<td style="text-align:center">琐碎时间=English+Android</td>
<td style="text-align:center">English+Android+Review</td>
<td style="text-align:center">11h</td>
</tr>
<tr>
<td style="text-align:center">20:30/22:00</td>
<td style="text-align:center">英语</td>
<td style="text-align:center">英语</td>
<td style="text-align:center">1h30m</td>
</tr>
<tr>
<td style="text-align:center">22:00/22:40</td>
<td style="text-align:center">锻炼+洗澡</td>
<td style="text-align:center">锻炼+洗澡</td>
<td style="text-align:center">40m</td>
</tr>
<tr>
<td style="text-align:center">22:40/23:40</td>
<td style="text-align:center">英语+Java</td>
<td style="text-align:center">英语+Java</td>
<td style="text-align:center">1h</td>
</tr>
<tr>
<td style="text-align:center">23:40/00:50</td>
<td style="text-align:center">Linux/Android</td>
<td style="text-align:center">Linux/Android</td>
<td style="text-align:center">1h10m</td>
</tr>
<tr>
<td style="text-align:center">00:50/01:10</td>
<td style="text-align:center">自控力+冥想</td>
<td style="text-align:center">自控力+冥想</td>
<td style="text-align:center">20m</td>
</tr>
</tbody>
</table>
<blockquote>
<p>学习情况改变,则调整每日监控　</p>
</blockquote>
<p>　　不仅仅需要按照上面计划来完成，学无止境，还需要不断的阅读,不断的练习。</p>
<p>　　从大四实习以来，做单片机、做FPGA、做Linux，一路曲折到现在进入Android驱动行业，另通过自己业余时间的不断折腾，自己总算知道自己想做什么，喜欢做什么。只是现在因为工作的原因，时间并不充裕，所以这条路显得更加长更加艰难。有时候，我也在想我有必要学这么多东西吗，可是人生不是就在于折腾吗，自己既然喜欢这些东西，为什么不折腾下去，让生命更有意义呢？</p>
<p>　　此博随时更新,直到完成此计划.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　几个月前，在网上看到了一篇<a href="http://www.cnblogs.com/jesse2013/p/how-to-learn-english.html">Jesse Liu写的学习英语的文章</a>，受到Jesse的启发，制定了学习计划和任务监控时间表，也按照计划执行了很长一段时间，可惜一个多月前生病后因为种种原因就落下了，后面虽然有断断续续地学习，但仍造成学习进度严重滞后了。</p>
<p>　　按照计划来学习来工作很有帮助，能帮我克服懒惰等坏习惯，让自己每天知道应该干什么，养成好的学习习惯。所以今天重新拟定计划，然后按照计划来学习提升自己。就目前来看自己主要有英语\Linux\Android\Java四个大部分需要花几乎所有时间来学习。</p>
<p>　　执行计划的最大阻碍是时间和身体，由于工作性质的原因，很多时候会加班。因此需要随时关注自己的计划，将琐碎时间完全利用起来，<strong>若什么时候未能完成当天的任务，就协调时间将其补起来</strong>，如此就好。男人就是得逼自己一把，才能知道自己有多优秀，何况自己已经27了，时间不等人,能让自己拼的时间已不多。</p>
<p>　　所以，接下来就对自己接下来的学习工作做一个大的规划，很暴力的计划，详细计划就在为知笔记的每日代办中记录。</p>
<blockquote>
<p>注:计划中的内容并不都是全新学习，很多都是断断续续看过，所以对自己时间定得比较紧比较死，对其他人不完全具有参考性</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Life" scheme="http://huaqianlee.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在内核里操作文件(create/open/read/write)]]></title>
    <link href="http://huaqianlee.me/2015/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E6%A0%B8%E9%87%8C%E6%93%8D%E4%BD%9C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6-create-open-read-write/"/>
    <id>http://huaqianlee.me/2015/03/17/如何在内核里操作读写文件-create-open-read-write/</id>
    <published>2015-03-17T14:15:42.000Z</published>
    <updated>2015-07-17T14:52:06.230Z</updated>
    <content type="html"><![CDATA[<p>　　因之前工作需要在kernel里存取数据到文件中，特意研究了一下怎么做，我们应尽可能避免直接操作文件I/O，选择通过调用VFS（虚拟文件系统）的函数来实现，我的实现demo如下：</p>
<h2 id="Includes">Includes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/fs.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/segment.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/uaccess.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/buffer_head.h&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Opening_a_file">Opening a file</h2><a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> file* file_open(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">int</span> flags, <span class="keyword">int</span> rights) &#123;</span><br><span class="line">    <span class="keyword">struct</span> file* filp = NULL;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 内核中进行系统调用（如文件操作）时，必须调用下面两句，对其进行保护，其作用是让内核能访问用户空间 */</span></span><br><span class="line">    oldfs = get_fs();  <span class="comment">// 备份当前进程地址空间</span></span><br><span class="line">    set_fs(get_ds()); <span class="comment">// 设置进程地址空间为虚拟地址空间上限，#define get_ds() (KERNEL_DS) ,</span></span><br><span class="line">    filp = filp_open(path, flags, rights); <span class="comment">// 调用文件打开函数</span></span><br><span class="line">    set_fs(oldfs); <span class="comment">//恢复进程地址空间</span></span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(filp)) &#123;</span><br><span class="line">        err = PTR_ERR(filp);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Close_a_file">Close a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">file_close</span><span class="params">(<span class="keyword">struct</span> file* file)</span> </span>&#123;</span><br><span class="line">    filp_close(file, NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reading_from_a_file">Reading from a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_read</span><span class="params">(<span class="keyword">struct</span> file* file, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> offset, <span class="keyword">unsigned</span> <span class="keyword">char</span>* data, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    oldfs = get_fs();</span><br><span class="line">    set_fs(get_ds());</span><br><span class="line"></span><br><span class="line">    ret = vfs_read(file, data, size, &amp;offset);  <span class="comment">// 读取文件，文件存在用户空间</span></span><br><span class="line"></span><br><span class="line">    set_fs(oldfs);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Writing_to_a_file">Writing to a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_write</span><span class="params">(<span class="keyword">struct</span> file* file, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> offset, <span class="keyword">unsigned</span> <span class="keyword">char</span>* data, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    mm_segment_t oldfs;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    oldfs = get_fs();</span><br><span class="line">    set_fs(get_ds());</span><br><span class="line"></span><br><span class="line">    ret = vfs_write(file, data, size, &amp;offset); <span class="comment">// 写文件</span></span><br><span class="line"></span><br><span class="line">    set_fs(oldfs);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Syncing_changes_a_file">Syncing changes a file</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">file_sync</span><span class="params">(<span class="keyword">struct</span> file* file)</span> </span>&#123;</span><br><span class="line">    vfs_fsync(file, <span class="number">0</span>); <span class="comment">// 同步文件，确定文件写到硬盘</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　因之前工作需要在kernel里存取数据到文件中，特意研究了一下怎么做，我们应尽可能避免直接操作文件I/O，选择通过调用VFS（虚拟文件系统）的函数来实现，我的实现demo如下：</p>
<h2 id="Includes">Includes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/fs.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/segment.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;asm/uaccess.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;linux/buffer_head.h&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Opening_a_file">Opening a file</h2>]]>
    
    </summary>
    
      <category term="kernel" scheme="http://huaqianlee.me/tags/kernel/"/>
    
      <category term="文件IO" scheme="http://huaqianlee.me/tags/%E6%96%87%E4%BB%B6IO/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android不带电量计的电量计算]]></title>
    <link href="http://huaqianlee.me/2015/01/21/%E9%AB%98%E9%80%9AAndroid%E4%B8%8D%E5%B8%A6%E7%94%B5%E9%87%8F%E8%AE%A1%E7%9A%84%E7%94%B5%E9%87%8F%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/"/>
    <id>http://huaqianlee.me/2015/01/21/高通Android不带电量计的电量计算方式/</id>
    <published>2015-01-21T12:10:01.000Z</published>
    <updated>2015-07-17T16:43:26.060Z</updated>
    <content type="html"><![CDATA[<p>　　一直比较好奇，Android的电量是怎么计算出来的，今天就借用qualcomm平台的8916芯片研究了一下，因为其不带电量计，所以是通过一个bms系统计算出来的，下面就来详细分析一下计算方法。</p>
<h2 id="SOC（state_of_charge_荷电状态_-_电量）">SOC（state of charge 荷电状态 - 电量）</h2><p>英文缩写:<br>FCC　　Full-charge capacity<br>RC 　　Remaining capacity (剩余电量)<br>CC 　　Coulumb counter<br>UUC　　Unusable capacity<br>RUC　　Remaining usable capacity<br>SoC　　State of charge<br>OCV　　Open circuit voltage<br><a id="more"></a><br>SOC=(RC-CC-UUC)/(FCC-UUC)<br>RUC=RC-CC-UUC</p>
<h2 id="电池电量决定因素">电池电量决定因素</h2><p>　　电池电量百分比主要有电池dtsi文件中百分比参数计算而得，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">	qcom,pc-temp-ocv-lut &#123;</span><br><span class="line">		qcom,lut-col-legend = &lt;(-<span class="number">10</span>) <span class="number">0</span> <span class="number">25</span> <span class="number">50</span>&gt;;  // Temperature      lut-data（电池OCV ）的column</span><br><span class="line">		qcom,lut-row-legend =  &lt;<span class="number">100</span> <span class="number">89</span> <span class="number">78</span>&gt;,     // Capacity Percent        row</span><br><span class="line">				&lt;<span class="number">67</span> <span class="number">56</span> <span class="number">45</span>&gt;,</span><br><span class="line">				&lt;<span class="number">34</span> <span class="number">23</span> <span class="number">14</span>&gt;,</span><br><span class="line">				&lt;<span class="number">8</span> <span class="number">4</span> <span class="number">0</span>&gt;;</span><br><span class="line">...				</span><br><span class="line">		qcom,lut-data = </span><br><span class="line">		&lt;<span class="number">4290</span>	<span class="number">4285</span>	<span class="number">4327</span>	<span class="number">4328</span>&gt;,</span><br><span class="line">		&lt;<span class="number">4151</span>	<span class="number">4162</span>	<span class="number">4193</span>	<span class="number">4208</span>&gt;,</span><br><span class="line">		&lt;<span class="number">4064</span>	<span class="number">4072</span>	<span class="number">4080</span>	<span class="number">4016</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3928</span>	<span class="number">3943</span>	<span class="number">3963</span>	<span class="number">3980</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3874</span>	<span class="number">3881</span>	<span class="number">3881</span>	<span class="number">3894</span>&gt;,</span><br><span class="line">		&lt;<span class="number">3809</span>	<span class="number">3834</span>	<span class="number">3823</span>	<span class="number">3820</span>&gt;,</span><br><span class="line"></span><br><span class="line">		&lt;<span class="number">3768</span>	<span class="number">3785</span>	<span class="number">3793</span>	<span class="number">3792</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3733</span>	<span class="number">3756</span>	<span class="number">3784</span>	<span class="number">3785</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3701</span>	<span class="number">3723</span>	<span class="number">3762</span>	<span class="number">3761</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3624</span>	<span class="number">3643</span>	<span class="number">3739</span>	<span class="number">3738</span>&gt;, </span><br><span class="line">		&lt;<span class="number">3614</span>	<span class="number">3623</span>	<span class="number">3689</span>	<span class="number">3688</span>&gt;, 	</span><br><span class="line">		&lt;<span class="number">3510</span>	<span class="number">3499</span>	<span class="number">3455</span>	<span class="number">3458</span>&gt;; </span><br><span class="line">	</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="关键结构">关键结构</h2><h3 id="dts_table_structure：">dts table structure：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * struct pc_temp_ocv_lut -</span><br><span class="line"> * @rows:	number of percent charge entries should be &lt;= PC_TEMP_ROWS</span><br><span class="line"> * @cols:	number of temperature entries should be &lt;= PC_TEMP_COLS</span><br><span class="line"> * @temp:	the temperatures at <span class="built_in">which</span> ocv data is available <span class="keyword">in</span> the table</span><br><span class="line"> *		The temperatures must be <span class="keyword">in</span> increasing order from <span class="number">0</span> to rows.</span><br><span class="line"> * @percent:	the percent charge at <span class="built_in">which</span> ocv data is available <span class="keyword">in</span> the table</span><br><span class="line"> *		The  percentcharge must be <span class="keyword">in</span> decreasing order from <span class="number">0</span> to cols.</span><br><span class="line"> * @ocv:	the open circuit voltage</span><br><span class="line"> */</span><br><span class="line">struct pc_temp_ocv_lut &#123;</span><br><span class="line">	int rows;</span><br><span class="line">	int cols;</span><br><span class="line">	int temp[PC_TEMP_COLS];</span><br><span class="line">	int percent[PC_TEMP_ROWS];</span><br><span class="line">	int ocv[PC_TEMP_ROWS][PC_TEMP_COLS];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="calculate_percentcharge_function">calculate percentcharge  function</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int linear_interpolate(int y0, int x0, int y1, int x1, int x)</span><br><span class="line">	<span class="keyword">if</span> (y0 == y1 || x == x0)	<span class="built_in">return</span> y0;</span><br><span class="line">	<span class="keyword">if</span> (x1 == x0 || x == x1)	<span class="built_in">return</span> y1;</span><br><span class="line">	<span class="built_in">return</span> y0 + ((y1 - y0) * (x - x0) / (x1 - x0));</span><br></pre></td></tr></table></figure>
<h2 id="驱动分析">驱动分析</h2><h3 id="关键函数：">关键函数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// File:  qpnp-vm-bms.c</span><br><span class="line">    lookup_soc_ocv(struct qpnp_bms_chip *chip, int ocv_uv, int batt_temp)、</span><br><span class="line">soc_ocv = interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, ocv_uv / <span class="number">1000</span>);  //calculate the  capacity percent</span><br><span class="line">soc_cutoff = interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, chip-&gt;dt.cfg_v_cutoff_uv / <span class="number">1000</span>);</span><br><span class="line">soc_final = DIV_ROUND_CLOSEST(<span class="number">100</span> * (soc_ocv - soc_cutoff),(<span class="number">100</span> - soc_cutoff));</span><br><span class="line">      DIV_ROUND_CLOSEST(x,y)    ---&gt;    (x-<span class="number">1</span>&gt;<span class="number">0</span>) || (y-<span class="number">1</span>&gt;<span class="number">0</span>) || x&gt;<span class="number">0</span>  ? (x+y/<span class="number">2</span>)/y : (x-y/<span class="number">2</span>)/y</span><br><span class="line"><span class="keyword">if</span> (!is_battery_charging(chip) &amp;&amp; chip-&gt;current_now &gt; <span class="number">0</span>) // 没有充电 重新计算电量</span><br><span class="line">        iavg_ma = calculate_uuc_iavg(chip);</span><br><span class="line">        fcc = interpolate_fcc(chip-&gt;batt_data-&gt;fcc_temp_lut,batt_temp);</span><br><span class="line">        acc = interpolate_acc(chip-&gt;batt_data-&gt;ibat_acc_lut,	batt_temp, iavg_ma);</span><br><span class="line">    both call ：</span><br><span class="line">linear_interpolate(int y0, int x0, int y1, int x1, int x)</span><br><span class="line">        soc_uuc = ((fcc - acc) * <span class="number">100</span>) / fcc;</span><br><span class="line">	soc_uuc = adjust_uuc(chip, soc_uuc);</span><br><span class="line">	soc_acc = DIV_ROUND_CLOSEST(<span class="number">100</span> * (soc_ocv - soc_uuc),(<span class="number">100</span> - soc_uuc));</span><br><span class="line">        soc_final = soc_acc;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        ... // charging - reset all the counters</span><br><span class="line">soc_final = bound_soc(soc_final) // 最终电量</span><br></pre></td></tr></table></figure>
<h3 id="百分比计算函数：">百分比计算函数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   interpolate_pc(chip-&gt;batt_data-&gt;pc_temp_ocv_lut,batt_temp, ocv_uv / <span class="number">1000</span>);  //calculate the  capacity percent</span><br><span class="line"><span class="keyword">if</span> (batt_temp == pc_temp_ocv-&gt;temp[j] * DEGC_SCALE) &#123;  /* found an exact match <span class="keyword">for</span> temp <span class="keyword">in</span> the table */</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++)    // i: rows- Capacity Percent  j: columns-Temperature</span><br><span class="line">                   ...</span><br><span class="line">	    pc = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;percent[i - <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i - <span class="number">1</span>][j],ocv); // calculate 不匹配dts表格的percentcharge </span><br><span class="line">                   转换为公式见下公式一;                                </span><br><span class="line"></span><br><span class="line">  /* batt_temp is within temperature <span class="keyword">for</span> column j-<span class="number">1</span> and j */</span><br><span class="line"> is_between(pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j], ocv)   // caculate temp1 percentcharge</span><br><span class="line">        pcj = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j],pc_temp_ocv-&gt;percent[i + <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j],	ocv);</span><br><span class="line">                  转换为公式见下公式二;                         </span><br><span class="line">           is_between(pc_temp_ocv-&gt;ocv[i][j-<span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j-<span class="number">1</span>], ocv)) // caculate temp2 percentcharge</span><br><span class="line">	    pcj_minus_one = linear_interpolate(pc_temp_ocv-&gt;percent[i],pc_temp_ocv-&gt;ocv[i][j-<span class="number">1</span>],pc_temp_ocv-&gt;percent[i + <span class="number">1</span>],pc_temp_ocv-&gt;ocv[i+<span class="number">1</span>][j-<span class="number">1</span>],ocv);</span><br><span class="line">                   转换为公式见下公式三;                       </span><br><span class="line">          <span class="keyword">if</span> (pcj &amp;&amp; pcj_minus_one) // temp1 and temp2 都存在，calculate percentcharge </span><br><span class="line">                   pc = linear_interpolate(pcj_minus_one,pc_temp_ocv-&gt;temp[j-<span class="number">1</span>] * DEGC_SCALE,	pcj,pc_temp_ocv-&gt;temp[j] * DEGC_SCALE,batt_temp);</span><br><span class="line">                   转换为公式见下公式四;                      </span><br><span class="line">           否则：<span class="built_in">return</span> pcj 、pcj_minus_one、其他临界值</span><br></pre></td></tr></table></figure>
<h3 id="公式一">公式一</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式1.png" alt="公式一"></p>
<h3 id="公式二">公式二</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式2.png" alt="公式二"></p>
<h3 id="公式三">公式三</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式3.png" alt="公式三"></p>
<h3 id="公式四">公式四</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog电量计算公式4.png" alt="公式四"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　一直比较好奇，Android的电量是怎么计算出来的，今天就借用qualcomm平台的8916芯片研究了一下，因为其不带电量计，所以是通过一个bms系统计算出来的，下面就来详细分析一下计算方法。</p>
<h2 id="SOC（state_of_charge_荷电状态_-_电量）">SOC（state of charge 荷电状态 - 电量）</h2><p>英文缩写:<br>FCC　　Full-charge capacity<br>RC 　　Remaining capacity (剩余电量)<br>CC 　　Coulumb counter<br>UUC　　Unusable capacity<br>RUC　　Remaining usable capacity<br>SoC　　State of charge<br>OCV　　Open circuit voltage<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://huaqianlee.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JUnit-test的用法]]></title>
    <link href="http://huaqianlee.me/2015/01/20/JUnit-test%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://huaqianlee.me/2015/01/20/JUnit-test的用法/</id>
    <published>2015-01-19T16:07:56.000Z</published>
    <updated>2015-07-19T16:12:21.160Z</updated>
    <content type="html"><![CDATA[<p>为了方便调试，不用每写一个类都需要写一个main方法对其测试，所以Java编写会经常用到JUnit测试。</p>
<h3 id="新建一个JUnit-test测试包，如下图:">新建一个JUnit.test测试包，如下图:</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blognewjunit.png" alt="new"></p>
<h3 id="JUnit测试">JUnit测试</h3><p>可以在原文件类的方法上面加上@Test作为JUnit测试单元运行，也可以新建JUnit文件测试，编写方法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class PersonTest &#123;</span><br><span class="line"></span><br><span class="line">	@BeforeClass // 测试类加载之前运行</span><br><span class="line">	public static void <span class="built_in">set</span>UpBeforeClass() throws Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Before  // 每个测试方法运行前运行， 常用</span><br><span class="line">	public void <span class="built_in">set</span>Up() throws Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">"所有的测试方法运行之前运行！！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Test  // 注解，给程序看</span><br><span class="line">	public void <span class="function"><span class="title">testEat</span></span>()&#123;</span><br><span class="line">		</span><br><span class="line">		cn.itcast.Person p = new cn.itcast.Person();</span><br><span class="line">		p.eat();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	public void <span class="function"><span class="title">testRun</span></span>()&#123;</span><br><span class="line">		cn.itcast.Person p = new cn.itcast.Person();</span><br><span class="line">		p.run();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@After // 每个测试方法运行后运行 ，常用</span><br><span class="line">	public void tearDown() throws Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">"所有的测试方法运行之后运行！！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    	@AfterClass //测试类加载之后运行</span><br><span class="line">	public static void tearDownAfterClass() throws Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">"After"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行JUnit">运行JUnit</h3><p>可以单独运行某个测试方法,也可以选中类,运行所以的测试方法,如下图:<br><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogrunjunit.png" alt="run"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了方便调试，不用每写一个类都需要写一个main方法对其测试，所以Java编写会经常用到JUnit测试。</p>
<h3 id="新建一个JUnit-test测试包，如下图:">新建一个JUnit.test测试包，如下图:</h3><p><img src="http://7]]>
    </summary>
    
      <category term="调试" scheme="http://huaqianlee.me/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Java" scheme="http://huaqianlee.me/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[xml文件约束与解析]]></title>
    <link href="http://huaqianlee.me/2015/01/19/xml%E6%96%87%E4%BB%B6%E7%BA%A6%E6%9D%9F%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
    <id>http://huaqianlee.me/2015/01/19/xml文件约束与解析/</id>
    <published>2015-01-19T15:12:35.000Z</published>
    <updated>2015-07-19T16:05:44.541Z</updated>
    <content type="html"><![CDATA[<p>在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束,常用的约束技术:<br>　1.  XML DTD<br>　2.  XML Schema</p>
<h1 id="DTD">DTD</h1><h2 id="DTD格式">DTD格式</h2><p>DTD(Document Type Definition)，全称为文档类型定义。 DTD文件应使用UTF-8或Unicode。格式如下:
　</p>
<h3 id="外部文件">外部文件</h3><p>　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogdtd.png" alt=""></p>
<blockquote>
<p>#PCDATA:放置字符数据　</p>
</blockquote>
<a id="more"></a>
<h3 id="内部编写方式">内部编写方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> standalone=<span class="string">"yes"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE 书架 [</span><br><span class="line">  &lt;!ELEMENT 书架 (书+)&gt; // 如果写EMPTY - 空元素，不能有子标签  ANY - 任何子标签</span><br><span class="line">  &lt;!ELEMENT 书 (书名,作者,售价)&gt;</span><br><span class="line">  &lt;!ELEMENT 书名 (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMENT 作者 (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMENT 售价 (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line">&lt;书架&gt;</span><br><span class="line">  &lt;书&gt;</span><br><span class="line">  &lt;书名&gt;Java就业培训教程&lt;/书名&gt;</span><br><span class="line">  &lt;作者&gt;张孝祥&lt;/作者&gt;</span><br><span class="line">  &lt;售价&gt;<span class="number">39.00</span>元&lt;/售价&gt;</span><br><span class="line">  &lt;/书&gt;</span><br><span class="line">      ...</span><br><span class="line">&lt;/书架&gt;</span><br></pre></td></tr></table></figure>
<h2 id="编程验证DTD">编程验证DTD</h2><p>编写方式如下：<br>外部文件方式：validate.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		var xmldoc = new ActiveXObject(<span class="string">"Microsoft.XMLDOM"</span>);  // 创建XML文档解析对象 IE5以上内置 Microsoft.XMLDOM 解析工具</span><br><span class="line">		xmldoc.validateOnParse=<span class="literal">true</span>; // 开启XML校验</span><br><span class="line">		xmldoc.load(<span class="string">"catalog.xml"</span>);  // 装载XML文件</span><br><span class="line"></span><br><span class="line">                /*打印错误信息*/</span><br><span class="line">		document.write(<span class="string">"错误的原因："</span> + xmldoc.parseError.reason + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">		document.write(<span class="string">"错误的行号："</span> + xmldoc.parseError.line + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">	&lt;body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="引用DTD约束">引用DTD约束</h2><p>XML中使用DOCTYPE声明语句来指明所遵循的DTD文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 文档根结点 SYSTEM <span class="string">"DTD文件的URL"</span>&gt; // 引用本地DTD文件</span><br><span class="line">&lt;!DOCTYPE 文档根结点 PUBLIC <span class="string">"DTD名称"</span> <span class="string">"DTD文件的URL"</span>&gt; // 引用公共文件（比如某网站的DTD文件）</span><br></pre></td></tr></table></figure></p>
<h2 id="DTD约束语法">DTD约束语法</h2><h3 id="元素定义">元素定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：&lt;!ELEMENT 元素名称 元素类型&gt;</span><br><span class="line">如为元素内容：则需要使用()括起来，如</span><br><span class="line">&lt;!ELEMENT 书架 (书名，作者，售价)&gt;</span><br><span class="line">&lt;!ELEMENT 书名 (<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">如为元素类型，则直接书写，DTD规范定义了如下几种类型：</span><br><span class="line">EMPTY：用于定义空元素，例如&lt;br/&gt; &lt;hr/&gt;</span><br><span class="line">ANY：表示元素内容为任意类型</span><br></pre></td></tr></table></figure>
<h3 id="元素组成">元素组成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT MYFILE (TITLE,AUTHOR,EMAIL)&gt;  // 内容与此什么顺序一致</span><br><span class="line">&lt;!ELEMENT MYFILE (TITLE|AUTHOR|EMAIL)&gt; // 只能出现其中一个</span><br><span class="line">&lt;!ELEMENT MYFILE (TITLE|AUTHOR|EMAIL)&gt;* //出现一个或者多个</span><br><span class="line"> +: 一次或多次 (书+)</span><br><span class="line">  ?: <span class="number">0</span>次或一次 (书?)</span><br><span class="line">  *: <span class="number">0</span>次或多次  (书*)</span><br><span class="line">           eg： </span><br><span class="line">                &lt;!ELEMENT MYFILE ((TITLE*, AUTHOR?, EMAIL)* | COMMENT)&gt;</span><br></pre></td></tr></table></figure>
<h3 id="属性定义">属性定义</h3><h4 id="属性定义方式">属性定义方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">属性格式：</span><br><span class="line">&lt;!ATTLIST 元素名</span><br><span class="line">  属性名<span class="number">1</span> 属性值类型 设置说明</span><br><span class="line">  属性名<span class="number">2</span> 属性值类型 设置说明</span><br><span class="line">  ……</span><br><span class="line">  &gt;</span><br><span class="line">属性说明：</span><br><span class="line"><span class="comment">#REQUIRED：必须设置该属性</span></span><br><span class="line"><span class="comment">#IMPLIED：可以设置也可以不设置</span></span><br><span class="line"><span class="comment">#FIXED：说明该属性的取值固定为一个值，在 XML 文件中不能为该属性设置其它值。但需要为该属性提供这个值</span></span><br><span class="line">直接使用默认值：在 XML 中可以设置该值也可以不设置该属性值。若没设置则使用默认值。  </span><br><span class="line">eg：</span><br><span class="line">       &lt;!ATTLIST 页面作者</span><br><span class="line">姓名 CDATA <span class="comment">#IMPLIED</span></span><br><span class="line">年龄 CDATA <span class="comment">#IMPLIED</span></span><br><span class="line">联系信息 CDATA <span class="comment">#REQUIRED</span></span><br><span class="line">网站职务 CDATA <span class="comment">#FIXED "页面作者"</span></span><br><span class="line">个人爱好 CDATA <span class="string">"上网"</span> // 默认值：上网</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h4 id="常用属性值类型">常用属性值类型</h4><ol>
<li>CDATA 文本字符串</li>
<li>ENUMERATED 枚举型<br>eg:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">"1.0"</span> encoding=<span class="string">"GB2312"</span> standalone=<span class="string">"yes"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE 购物篮 [</span><br><span class="line">  &lt;!ELEMENT 肉 EMPTY&gt;</span><br><span class="line">  &lt;!ATTLIST 肉 品种 ( 鸡肉 | 牛肉 | 猪肉 | 鱼肉 ) <span class="string">"鸡肉"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;购物篮&gt;</span><br><span class="line">  &lt;肉 品种=<span class="string">"鱼肉"</span>/&gt;</span><br><span class="line">  &lt;肉 品种=<span class="string">"牛肉"</span>/&gt;</span><br><span class="line">  &lt;肉/&gt;</span><br><span class="line">&lt;/购物篮&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="ID">ID</h4><p>ID只能由字母或者下划线开头.eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = <span class="string">"1.0"</span> encoding=<span class="string">"GB2312"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE 联系人列表[</span><br><span class="line">  &lt;!ELEMENT 联系人列表 ANY&gt;</span><br><span class="line">  &lt;!ELEMENT 联系人(姓名,EMAIL)&gt;</span><br><span class="line">  &lt;!ELEMENT 姓名(<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ELEMENT EMAIL(<span class="comment">#PCDATA)&gt;</span></span><br><span class="line">  &lt;!ATTLIST 联系人 编号 ID <span class="comment">#REQUIRED&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line">&lt;联系人列表&gt;</span><br><span class="line">  &lt;联系人 编号=<span class="string">"a1"</span>&gt;</span><br><span class="line">  &lt;姓名&gt;张三&lt;/姓名&gt;</span><br><span class="line">  &lt;EMAIL&gt;zhang@it315.org&lt;/EMAIL&gt;</span><br><span class="line">          &lt;/联系人&gt;</span><br><span class="line"> &lt;联系人 编号=<span class="string">"a2"</span>&gt;</span><br><span class="line">  &lt;姓名&gt;李四&lt;/姓名&gt;</span><br><span class="line">  &lt;EMAIL&gt;li@it315.org&lt;/EMAIL&gt;</span><br><span class="line">  &lt;/联系人&gt;</span><br><span class="line">&lt;/联系人列表&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="实体定义">实体定义</h4><p>在DTD文件中,&lt;!ENTITY …&gt;语句用于定义一个实体(相当于一个变量).</p>
<h5 id="引用实体">引用实体</h5><p>引用实体主要在XML文件中使用,格式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&lt;!ENTITY 实体名称 “实体内容” &gt;</span></span><br><span class="line"><span class="comment">#eg:</span></span><br><span class="line">&lt;!ENTITY copyright “I am a programmer<span class="string">"&gt;</span><br><span class="line">……</span><br><span class="line">&amp;copyright;//XML中以此形式引用</span></span><br></pre></td></tr></table></figure></p>
<h5 id="参数实体">参数实体</h5><p>参数实体主要为DTD文件自己使用,格式如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 <span class="string">"实体内容"</span> &gt;</span><br><span class="line"><span class="comment">#eg1:</span></span><br><span class="line">&lt;!ENTITY % TAG_NAMES <span class="string">"姓名 | EMAIL | 电话 | 地址"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!ELEMENT 个人信息 (%TAG_NAMES; | 生日)&gt;</span><br><span class="line">&lt;!ELEMENT 客户信息 (%TAG_NAMES; | 公司名)&gt;</span><br><span class="line"><span class="comment">#eg2:</span></span><br><span class="line">&lt;!ENTITY % common.attributes   </span><br><span class="line"> <span class="string">" id ID #IMPLIED   </span><br><span class="line">   account CDATA #REQUIRED "</span> &gt;</span><br><span class="line">...</span><br><span class="line">&lt;!ATTLIST purchaseOrder %common.attributes;&gt;</span><br><span class="line">&lt;!ATTLIST item %common.attributes;&gt;</span><br></pre></td></tr></table></figure></p>
<p>　</p>
<h2 id="xml编程">xml编程</h2><p>　<br>XML CRUD - create read update delete。JAXP包，J2SE的一部分，包含xml解析器对象。</p>
<h3 id="XML解析方式">XML解析方式</h3><p>XML解析方式分为两种：DOM（w3c推荐） 和 SAX(只能做查询)。两种区别如下：<br>　　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogsaxdom.png" alt="dif"></p>
<h3 id="使用JAXP包进行DOM解析">使用JAXP包进行DOM解析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line"></span><br><span class="line">	/**使用jaxp操作xml文档</span><br><span class="line">	 * @param args</span><br><span class="line">	 * @throws ParserConfigurationException </span><br><span class="line">	 * @throws IOException </span><br><span class="line">	 * @throws SAXException </span><br><span class="line">	 */</span><br><span class="line">	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException &#123;</span><br><span class="line">		</span><br><span class="line">		//<span class="number">1</span>.获取DOM解析器的工厂</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		</span><br><span class="line">		//<span class="number">2</span>.得到DOM解析器对象</span><br><span class="line">		DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">		</span><br><span class="line">		//<span class="number">3</span>.解析xml文档，得到代表文档的document</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line"></span><br><span class="line">		//<span class="number">4</span>.遍历所有节点</span><br><span class="line">		list(document);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//得到售价结点的值</span><br><span class="line">	@Test</span><br><span class="line">	public void <span class="built_in">read</span>() throws Exception&#123;</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		NodeList list = document.getElementsByTagName(<span class="string">"售价"</span>);  </span><br><span class="line">		Node price = list.item(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		String value = price.getTextContent();</span><br><span class="line">		System.out.println(value);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//修改结点的值:&lt;售价&gt;<span class="number">39.00</span>元&lt;/售价&gt;改为<span class="number">109</span></span><br><span class="line">	@Test</span><br><span class="line">	public  void update() throws Exception&#123;</span><br><span class="line">		</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder  builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Node price = document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">0</span>);</span><br><span class="line">		price.setTextContent(<span class="string">"109"</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		//把内存中的document写到xml文档</span><br><span class="line">		TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">		//得到转换器</span><br><span class="line">		Transformer ts = tf.newTransformer();</span><br><span class="line">		ts.transform(new DOMSource(document), new StreamResult(new File(<span class="string">"src/book1.xml"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//向指定节点中增加孩子节点（售价节点）</span><br><span class="line">	@Test</span><br><span class="line">	public void add() throws Exception&#123;</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder  builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		//创建需要增加的节点</span><br><span class="line">		Node price = document.createElement(<span class="string">"售价"</span>);</span><br><span class="line">		price.setTextContent(<span class="string">"59元"</span>);</span><br><span class="line">		</span><br><span class="line">		//得到需要增加的节点的父亲</span><br><span class="line">		Node parent = document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		//把需要增加的节点挂到父结点上</span><br><span class="line">		parent.appendChild(price);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">		Transformer ts = tf.newTransformer();</span><br><span class="line">		ts.transform(new DOMSource(document), new StreamResult(new File(<span class="string">"src/book1.xml"</span>)));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//向指定位置上插入售价节点</span><br><span class="line">	@Test</span><br><span class="line">	public void add2() throws Exception&#123;</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder  builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Node node = document.createElement(<span class="string">"售价"</span>);</span><br><span class="line">		node.setTextContent(<span class="string">"39元"</span>);</span><br><span class="line">		</span><br><span class="line">		Node parent = document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);</span><br><span class="line">		parent.insertBefore(node, document.getElementsByTagName(<span class="string">"书名"</span>).item(<span class="number">0</span>));</span><br><span class="line">		</span><br><span class="line">		TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">		Transformer ts = tf.newTransformer();</span><br><span class="line">		ts.transform(new DOMSource(document), new StreamResult(new File(<span class="string">"src/book1.xml"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//删除xml文档的售价结点</span><br><span class="line">	@Test</span><br><span class="line">	public void delete() throws Exception&#123;</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder  builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Node node = document.getElementsByTagName(<span class="string">"售价"</span>).item(<span class="number">2</span>);</span><br><span class="line">		node.getParentNode().removeChild(node);</span><br><span class="line">		</span><br><span class="line">		TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">		Transformer ts = tf.newTransformer();</span><br><span class="line">		ts.transform(new DOMSource(document), new StreamResult(new File(<span class="string">"src/book1.xml"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//操作xml文档属性</span><br><span class="line">	@Test</span><br><span class="line">	public void updateAttribute() throws Exception&#123;</span><br><span class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">		DocumentBuilder  builder = factory.newDocumentBuilder();</span><br><span class="line">		Document document = builder.parse(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		//操作xml文档的元素时，一般都把元素当作node对象，但是程序员如果发现node不好使时，就应把node强转成相应类型</span><br><span class="line">		Node node  = document.getElementsByTagName(<span class="string">"书"</span>).item(<span class="number">0</span>);</span><br><span class="line">		Element book = null;</span><br><span class="line">		<span class="keyword">if</span>(node.getNodeType()==Node.ELEMENT_NODE)&#123;  //在作结点转换之前，最好先判断结点类型</span><br><span class="line">			book  = (Element)node;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		book.setAttribute(<span class="string">"name"</span>, <span class="string">"yyyyyyy"</span>);</span><br><span class="line">		book.setAttribute(<span class="string">"password"</span>, <span class="string">"123"</span>);</span><br><span class="line">		book.removeAttribute(<span class="string">"password"</span>);</span><br><span class="line">		</span><br><span class="line">		TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">		Transformer ts = tf.newTransformer();</span><br><span class="line">		ts.transform(new DOMSource(document), new StreamResult(new File(<span class="string">"src/book1.xml"</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//遍历</span><br><span class="line">	public static void list(Node node)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(node.getNodeType()==Node.ELEMENT_NODE)&#123;</span><br><span class="line">			System.out.println(node.getNodeName());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		NodeList list = node.getChildNodes();</span><br><span class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;list.getLength();i++)&#123;</span><br><span class="line">			Node child = list.item(i);</span><br><span class="line">			list(child);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SAX解析">SAX解析</h3><p> 　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogsax.jpg" alt="sax"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用方法： startElement（） endElement（） characters（）；</span></span><br><span class="line">public class Demo1 &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 *sax方式解析book1.xml文件</span><br><span class="line">	 * @throws SAXException </span><br><span class="line">	 * @throws ParserConfigurationException </span><br><span class="line">	 * @throws IOException </span><br><span class="line">	 */</span><br><span class="line">	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException &#123;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		//<span class="number">1</span>.创建sax工厂</span><br><span class="line">		SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">		</span><br><span class="line">		//<span class="number">2</span>.用工厂创建解析器</span><br><span class="line">		SAXParser sp = factory.newSAXParser();</span><br><span class="line">		</span><br><span class="line">		//<span class="number">3</span>.利用解析器得到reader</span><br><span class="line">		XMLReader reader = sp.getXMLReader();</span><br><span class="line">		</span><br><span class="line">		//<span class="number">4</span>.在解析xml文档之前，设置好事件处理器,事件处理器为程序员设计来对解析xml进行处理</span><br><span class="line">		reader.setContentHandler(new MyContentHandler2()); </span><br><span class="line">		</span><br><span class="line">		//<span class="number">5</span>.利用reader读取 xml文档</span><br><span class="line">		reader.parse(<span class="string">"src/book1.xml"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//得到xml文档内容的事件处理器，实现接口</span><br><span class="line">class MyContentHandler implements ContentHandler&#123;</span><br><span class="line"></span><br><span class="line">	public void startElement(String uri, String <span class="built_in">local</span>Name, String name,	Attributes atts) throws SAXException &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"当前解析到了:"</span> + name + <span class="string">",这个标签是开始标签"</span>);</span><br><span class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;atts.getLength();i++)&#123;</span><br><span class="line">			String attname = atts.getQName(i);</span><br><span class="line">			String attvalue = atts.getValue(i);</span><br><span class="line">			</span><br><span class="line">			System.out.println(attname + <span class="string">"="</span> + attvalue);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void endElement(String uri, String <span class="built_in">local</span>Name, String name) throws SAXException &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"当前解析到了:"</span> + name + <span class="string">",这个标签是结束标签"</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void characters(char[] ch, int start, int length)	throws SAXException &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"当前解析到了内容："</span> + new String(ch,start,length));</span><br><span class="line">	&#125;</span><br><span class="line">	....	 // 实现接口其他方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用于获取第一个售价节点的值：&lt;售价&gt;<span class="number">109</span>&lt;/售价&gt; ,用继承的方式实现事件处理器，不用对接口每个方法进行实现</span><br><span class="line">class MyContentHandler2 extends DefaultHandler&#123;</span><br><span class="line"></span><br><span class="line">	private boolean isOk = <span class="literal">false</span>;</span><br><span class="line">	private int index = <span class="number">1</span>;</span><br><span class="line">	@Override</span><br><span class="line">	public void characters(char[] ch, int start, int length)	throws SAXException &#123;</span><br><span class="line">		<span class="keyword">if</span>(isOk==<span class="literal">true</span> &amp;&amp; index==<span class="number">1</span>)&#123;</span><br><span class="line">			System.out.println(new String(ch,start,length));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void startElement(String uri, String <span class="built_in">local</span>Name, String name,	Attributes attributes) throws SAXException &#123;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"售价"</span>))&#123;</span><br><span class="line">			isOk = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void endElement(String uri, String <span class="built_in">local</span>Name, String name)</span><br><span class="line">			throws SAXException &#123;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"售价"</span>))&#123;</span><br><span class="line">			isOk = <span class="literal">false</span>;</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Dom4j解析">Dom4j解析</h2><p>DOM4j中，获得Document对象的方式有三种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.读取XML文件,获得document对象            </span></span><br><span class="line">SAXReader reader = new SAXReader();</span><br><span class="line">Document   document = reader.read(new File(<span class="string">"input.xml"</span>));</span><br><span class="line"><span class="comment">#2.解析XML形式的文本,得到document对象.</span></span><br><span class="line">String text = <span class="string">"&lt;members&gt;&lt;/members&gt;"</span>;</span><br><span class="line">Document document = DocumentHelper.parseText(text);</span><br><span class="line"><span class="comment">#3.主动创建document对象.</span></span><br><span class="line">Document document = DocumentHelper.createDocument();            //创建根节点</span><br><span class="line">Element root = document.addElement(<span class="string">"members"</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意dom4j库及docs。参考<a href="http://zvon.org/xxl/XPathTutorial/General/examples.html" target="_blank" rel="external">XPath Tutorial</a>　</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">	//读取xml文档数据：&lt;书名&gt;Java就业培训教程&lt;/书名&gt;</span><br><span class="line">	@Test</span><br><span class="line">	public void <span class="built_in">read</span>() throws Exception&#123;</span><br><span class="line">		</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element root = document.getRootElement();</span><br><span class="line">		Element bookname = root.element(<span class="string">"书"</span>).element(<span class="string">"书名"</span>);</span><br><span class="line">		System.out.println(bookname.getText());</span><br><span class="line">	&#125;</span><br><span class="line">	//&lt;书 name=<span class="string">"yyyyyyy"</span>&gt;</span><br><span class="line">	@Test</span><br><span class="line">	public void <span class="built_in">read</span>Attr() throws Exception&#123;</span><br><span class="line">		</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element root = document.getRootElement();</span><br><span class="line">		String value = root.element(<span class="string">"书"</span>).attributeValue(<span class="string">"name"</span>);</span><br><span class="line">		System.out.println(value);</span><br><span class="line">	&#125;</span><br><span class="line">	//向xml文档中添加&lt;售价&gt;<span class="number">19</span>元&lt;/售价&gt;</span><br><span class="line">	@Test</span><br><span class="line">	public void add() throws Exception&#123;</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element price = DocumentHelper.createElement(<span class="string">"售价"</span>);</span><br><span class="line">		price.setText(<span class="string">"19元"</span>);</span><br><span class="line">		</span><br><span class="line">		document.getRootElement().element(<span class="string">"书"</span>).add(price);</span><br><span class="line">		</span><br><span class="line">                // 将修改从内存中存入xml</span><br><span class="line">		OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class="line">		format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		</span><br><span class="line">		XMLWriter writer = new XMLWriter(new FileOutputStream(<span class="string">"src/book1.xml"</span>),format);</span><br><span class="line">		writer.write(document);  //utf-<span class="number">8</span></span><br><span class="line">		writer.close();</span><br><span class="line">	&#125;</span><br><span class="line">	//修改：&lt;售价&gt;<span class="number">109</span>&lt;/售价&gt;  为<span class="number">209</span></span><br><span class="line">	@Test</span><br><span class="line">	public void update() throws Exception&#123;</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element price = (Element) document.getRootElement().element(<span class="string">"书"</span>).elements(<span class="string">"售价"</span>).get(<span class="number">1</span>);</span><br><span class="line">		price.setText(<span class="string">"209元"</span>);</span><br><span class="line">		</span><br><span class="line">		OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class="line">		format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		</span><br><span class="line">		XMLWriter writer = new XMLWriter(new FileOutputStream(<span class="string">"src/book1.xml"</span>),format);</span><br><span class="line">		writer.write(document);  //utf-<span class="number">8</span></span><br><span class="line">		writer.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	//删除：&lt;售价&gt;<span class="number">109</span>&lt;/售价&gt;</span><br><span class="line">	@Test</span><br><span class="line">	public void delete() throws Exception&#123;</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element price = (Element) document.getRootElement().element(<span class="string">"书"</span>).elements(<span class="string">"售价"</span>).get(<span class="number">0</span>);</span><br><span class="line">		price.getParent().remove(price);</span><br><span class="line">		</span><br><span class="line">		OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class="line">		format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		</span><br><span class="line">		XMLWriter writer = new XMLWriter(new FileOutputStream(<span class="string">"src/book1.xml"</span>),format);</span><br><span class="line">		writer.write(document);  //utf-<span class="number">8</span></span><br><span class="line">		writer.close();</span><br><span class="line">	&#125;</span><br><span class="line">	//向指定位置增加售价结点</span><br><span class="line">	@Test</span><br><span class="line">	public void add2() throws Exception&#123;</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element price = DocumentHelper.createElement(<span class="string">"售价"</span>);</span><br><span class="line">		price.setText(<span class="string">"19元"</span>);</span><br><span class="line">		</span><br><span class="line">		List list = document.getRootElement().element(<span class="string">"书"</span>).elements();</span><br><span class="line">		list.add(<span class="number">1</span>, price);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		OutputFormat format = OutputFormat.createPrettyPrint();</span><br><span class="line">		format.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		</span><br><span class="line">		XMLWriter writer = new XMLWriter(new FileOutputStream(<span class="string">"src/book1.xml"</span>),format);</span><br><span class="line">		writer.write(document);  //utf-<span class="number">8</span></span><br><span class="line">		writer.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">        //XPATH 编写</span><br><span class="line">	@Test</span><br><span class="line">	public void findWithXpath() throws Exception&#123;</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/book1.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element e = (Element) document.selectNodes(<span class="string">"//书名"</span>).get(<span class="number">1</span>); // search 书名node 并获得第一个</span><br><span class="line">		System.out.println(e.getText());</span><br><span class="line">	&#125;</span><br><span class="line">	@Test</span><br><span class="line">	public void findUser() throws Exception&#123;</span><br><span class="line">		String username = <span class="string">"aaa"</span>;</span><br><span class="line">		String password = <span class="string">"1233"</span>;</span><br><span class="line">		</span><br><span class="line">		SAXReader reader = new SAXReader();</span><br><span class="line">		Document document = reader.read(new File(<span class="string">"src/users.xml"</span>));</span><br><span class="line">		</span><br><span class="line">		Element e = (Element) document.selectSingleNode(<span class="string">"//user[@username='"</span>+username+<span class="string">"' and @password='"</span>+password+<span class="string">"']"</span>); //search 匹配的用户名和密码 node</span><br><span class="line">		<span class="keyword">if</span>(e!=null)&#123;</span><br><span class="line">			System.out.println(<span class="string">"用户登陆成功！！"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"用户名和密码不正确！！"</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="XML_schema">XML schema</h2><p>xml schema 也是一种定义和描述xml结构与内容的模式语言，其出现是为了克服DTD的局限性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//File:book.xsd</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt; </span><br><span class="line">//必须以 schema 开始和结束</span><br><span class="line">&lt;xs:schema xmlns:xs=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>        // 声明xs出处</span><br><span class="line">			      targetNamespace=<span class="string">"http://www. itcast.cn"</span>	   // 声明指定一个名称空间 http://www. itcast.cn， 将xsd中所有节点绑定到此空间，然后xml就可以根据此URL（名称空间）告知解析器  </span><br><span class="line">                              elementFormDefault=<span class="string">"qualified"</span>&gt; elementFormDefault指定schema属性都属于targetNamespace指定的名称空间</span><br><span class="line">	&lt;xs:element name=<span class="string">'书架'</span> &gt; </span><br><span class="line">		&lt;xs:complexType&gt;</span><br><span class="line">			&lt;xs:sequence maxOccurs=<span class="string">'unbounded'</span> &gt;</span><br><span class="line">				&lt;xs:element name=<span class="string">'书'</span> &gt;</span><br><span class="line">					&lt;xs:complexType&gt;</span><br><span class="line">						&lt;xs:sequence&gt;</span><br><span class="line">							&lt;xs:element name=<span class="string">'书名'</span> <span class="built_in">type</span>=<span class="string">'xs:string'</span> /&gt;</span><br><span class="line">							&lt;xs:element name=<span class="string">'作者'</span> <span class="built_in">type</span>=<span class="string">'xs:string'</span> /&gt;</span><br><span class="line">							&lt;xs:element name=<span class="string">'售价'</span> <span class="built_in">type</span>=<span class="string">'xs:string'</span> /&gt;</span><br><span class="line">						&lt;/xs:sequence&gt;</span><br><span class="line">					&lt;/xs:complexType&gt;</span><br><span class="line">				&lt;/xs:element&gt;</span><br><span class="line">			&lt;/xs:sequence&gt;</span><br><span class="line">		&lt;/xs:complexType&gt;</span><br><span class="line">	&lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:schema&gt;</span><br><span class="line"></span><br><span class="line">//File: book.xml</span><br><span class="line"><span class="comment">#a. 入门案例</span></span><br><span class="line"> &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;itcast:书架 xmlns:itcast=<span class="string">"http://www.itcast.cn"</span>    //声明指定上xsd文件中定义的名称空间</span><br><span class="line">		    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> // 指定下面schemaLocation属性出处</span><br><span class="line">		    xsi:schemaLocation=“http://www.itcast.cn book.xsd<span class="string">"&gt; // 指定名称空间的schema</span><br><span class="line"></span><br><span class="line">	&lt;itcast:书&gt;</span><br><span class="line">		&lt;itcast:书名&gt;JavaScript网页开发&lt;/itcast:书名&gt;</span><br><span class="line">		&lt;itcast:作者&gt;张孝祥&lt;/itcast:作者&gt;</span><br><span class="line">		&lt;itcast:售价&gt;28.00元&lt;/itcast:售价&gt;</span><br><span class="line">	&lt;/itcast:书&gt;</span><br><span class="line">&lt;/itcast:书架&gt;</span><br><span class="line">    b. 使用默认命名空间  </span><br><span class="line">	&lt;书架 xmlns="</span>http://www.itcast.cn<span class="string">"</span><br><span class="line">		xmlns:xsi="</span>http://www.w3.org/<span class="number">2001</span>/XMLSchema-instance<span class="string">"</span><br><span class="line">		xsi:schemaLocation=“http://www.itcast.cn book.xsd"</span>&gt;</span><br><span class="line">		&lt;书&gt;</span><br><span class="line">		&lt;书名&gt;JavaScript网页开发&lt;/书名&gt;</span><br><span class="line">		&lt;作者&gt;张孝祥&lt;/作者&gt;</span><br><span class="line">		&lt;售价&gt;<span class="number">28.00</span>元&lt;/售价&gt;</span><br><span class="line">		&lt;/书&gt;</span><br><span class="line">	&lt;书架&gt;</span><br><span class="line"><span class="comment">#c. 使用多个命名空间</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;书架 xmlns=<span class="string">"http://www.it315.org/xmlbook/schema"</span> </span><br><span class="line">	xmlns:demo=<span class="string">"http://www.it315.org/demo/schema"</span></span><br><span class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	xsi:schemaLocation=<span class="string">"http://www.it315.org/xmlbook/schema 	http://www.it315.org/xmlbook.xsd //命名空间1</span><br><span class="line">	http://www.it315.org/demo/schema http://www.it315.org/demo.xsd"</span>&gt; //命名空间<span class="number">2</span></span><br><span class="line">	&lt;书&gt;</span><br><span class="line">		&lt;书名&gt;JavaScript网页开发&lt;/书名&gt;</span><br><span class="line">		&lt;作者&gt;张孝祥&lt;/作者&gt;</span><br><span class="line">		&lt;售价 demo:币种=”人民币”&gt;<span class="number">28.00</span>元&lt;/售价&gt;</span><br><span class="line">	&lt;/书&gt;</span><br><span class="line">&lt;/书架&gt;</span><br><span class="line"><span class="comment">#d. 不使用名称空间</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;书架 xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	xsi:noNamespaceSchemaLocation=<span class="string">"xmlbook.xsd"</span>&gt;</span><br><span class="line">	&lt;书&gt;</span><br><span class="line">		&lt;书名&gt;JavaScript网页开发&lt;/书名&gt;</span><br><span class="line">		&lt;作者&gt;张孝祥&lt;/作者&gt;</span><br><span class="line">		&lt;售价&gt;<span class="number">28.00</span>元&lt;/售价&gt;</span><br><span class="line">	&lt;/书&gt;</span><br><span class="line">&lt;/书架&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束,常用的约束技术:<br>　1.  XML DTD<br>　2.  XML Schema</p>
<h1 id="DTD">DTD</h1><h2 id="DTD格式">DTD格式</h2><p>DTD(Document Type Definition)，全称为文档类型定义。 DTD文件应使用UTF-8或Unicode。格式如下:
　</p>
<h3 id="外部文件">外部文件</h3><p>　<img src="http://7xjdax.com1.z0.glb.clouddn.com/blogdtd.png" alt=""></p>
<blockquote>
<p>#PCDATA:放置字符数据　</p>
</blockquote>]]>
    
    </summary>
    
      <category term="xml" scheme="http://huaqianlee.me/tags/xml/"/>
    
      <category term="Javaweb" scheme="http://huaqianlee.me/categories/Javaweb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[xml基础]]></title>
    <link href="http://huaqianlee.me/2015/01/18/xml%E5%9F%BA%E7%A1%80/"/>
    <id>http://huaqianlee.me/2015/01/18/xml基础/</id>
    <published>2015-01-17T16:13:28.000Z</published>
    <updated>2015-07-19T16:22:47.975Z</updated>
    <content type="html"><![CDATA[<p>XML 是有w3c组织发布的一种可扩展标记语言(Extensible Markup Language)。</p>
<h2 id="XML_的常见应用">XML 的常见应用</h2><p>XML常见的应用场景：
　</p>
<ol>
<li>XML技术除用于保存有关系的数据之外，它还经常用作软件配置文件，以描述程序模块之间的关系。<br>2.在一个软件系统中，为提高系统的灵活性，它所启动的模块通常由其配置文件决定<br>　<br>例如一个软件在启动时，它需要启动Ａ、Ｂ两个模块，而A、Ｂ这两个模块在启动时，又分别需要A1、A2和B1、B2模块的支持，为了准确描述这种关系，此时使用ＸＭＬ文件最为合适不过。</li>
</ol>
<h2 id="XML的语法">XML的语法</h2><h3 id="文档的声明">文档的声明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"GB2312"</span>  standalone=<span class="string">"yes"</span> ?&gt;</span><br><span class="line">    encoding - 文档的字符编码。（代码里面写什么格式，一般就将文档存为什么格式，一般通用“UTF-<span class="number">8</span>”）</span><br><span class="line">    standalone - 文档是否为独立的，有依赖</span><br><span class="line">```    </span><br><span class="line"><span class="comment">###元素</span></span><br><span class="line"></span><br><span class="line">元素指XML中的标签,可以嵌套,只有一个主标签,两种书写方式如下:</span><br><span class="line">•包含标签体：&lt;a&gt;www.itcast.cn&lt;/a&gt;</span><br><span class="line">•不含标签体的：&lt;a&gt;&lt;/a&gt;, 简写为：&lt;a/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###属性</span></span><br><span class="line">属性值必须用<span class="string">""</span> 或<span class="string">''</span> 引起来,如:</span><br><span class="line">```bash</span><br><span class="line">&lt;input name=“text”&gt;</span><br><span class="line">也可以:(XML将空格也当做内容,不过现在浏览器都会执行处理,调用trim())</span><br><span class="line">&lt;input&gt;</span><br><span class="line">   &lt;name&gt;text&lt;/name&gt;</span><br><span class="line">&lt;/input&gt;</span><br></pre></td></tr></table></figure>
<h3 id="注释">注释</h3><p>&lt;!—注释—&gt;  // 注释语句必须写在XML声明语句后面</p>
<h3 id="CDATA区">CDATA区</h3><p>CDATA(character data)区用于让解析引擎不对其进行处理,按照原始内容显示. </p>
<pre><code class="bash">格式:&lt;![CDATA[ 内容 ]]&gt;
eg:
  &lt;![CDATA[
      &lt;itcast&gt;
          &lt;br/&gt;
      &lt;/itcast&gt;
  ]]&gt;
</code></pre>
<h3 id="转义字符">转义字符</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogxml.png" alt="escape">        </p>
<h3 id="处理指令">处理指令</h3><p>处理指令，简称PI （processing instruction）。处理指令用来指挥解析引擎如何解析XML文档内容。例如，在XML文档中可以使用xml-stylesheet指令，通知XML解析引擎，应用css文件显示xml文档内容。<br>&lt;?xml-stylesheet type=”text/css” href=”1.css”?&gt;<br>处理指令必须以“&lt;?”作为开头，以“?&gt;”作为结尾，XML声明语句就是最常见的一种处理指令。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>XML 是有w3c组织发布的一种可扩展标记语言(Extensible Markup Language)。</p>
<h2 id="XML_的常见应用">XML 的常见应用</h2><p>XML常见的应用场景：
　</p>
<ol>
<li>XML技术除用于保存有关系的数据之]]>
    </summary>
    
      <category term="xml" scheme="http://huaqianlee.me/tags/xml/"/>
    
      <category term="Javaweb" scheme="http://huaqianlee.me/categories/Javaweb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux常用快捷键及命令总结]]></title>
    <link href="http://huaqianlee.me/2014/12/21/Linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://huaqianlee.me/2014/12/21/Linux常用快捷键及命令总结/</id>
    <published>2014-12-21T12:10:01.000Z</published>
    <updated>2015-07-22T11:54:41.678Z</updated>
    <content type="html"><![CDATA[<p>　　或许我是一个geek范的人，又或许是想显得很有逼格， whatever， 反正我就喜欢Linux的命令行，喜欢黑黑的geek风，这样完全体现出了技术的酷炫。现将一些自己觉得很有用能让自己显得很牛的装X快捷键和指令总结如下，其中有一部分相当有用，使用后逼格瞬间提升，不信看文章最后的后记。</p>
<h2 id="Shell终端常用快捷键">Shell终端常用快捷键</h2><p>　　当进行命令行操作时，使用快捷键将极大提高工作效率，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + U – 剪切光标前的内容</span><br><span class="line">Ctrl + K – 剪切光标至行末的内容</span><br><span class="line">Ctrl + Y – 粘贴</span><br><span class="line">Ctrl + E – 移动光标到行末</span><br><span class="line">Ctrl + A – 移动光标到行首</span><br><span class="line">ALT + F – 跳向下一个空格</span><br><span class="line">ALT + B – 跳回上一个空格</span><br><span class="line">ALT + Backspace – 删除前一个单词</span><br><span class="line">Ctrl + W – 剪切光标前一个单词</span><br><span class="line">Ctrl + Insert – 复制</span><br><span class="line">Shift + Insert – 粘贴</span><br><span class="line"><span class="comment"># 下面两个命令的用法，如： 在shell终端输入vi main.c进入vi界面后，想切换到命令行，可以通过Ctrl+Z</span></span><br><span class="line">Ctrl + Z – 暂停应用程序</span><br><span class="line"><span class="built_in">fg</span> – 重新将程序唤到前台</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="常用Shell命令">常用Shell命令</h2><p>　　使用Linux，最酷炫的就是命令行操作，所以熟悉命令是必须，现将常用的Shell命令总结如下：</p>
<h3 id="硬件相关命令">硬件相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lscpu                   <span class="comment">#查看的是cpu信息.</span></span><br><span class="line">cat /proc/cpuinfo       <span class="comment">#查看CPU信息详细信息</span></span><br><span class="line">free -m                 <span class="comment">#概要查看内存情况，单位MB</span></span><br><span class="line">cat /proc/meminfo       <span class="comment">#查看内存详细信息</span></span><br><span class="line">lsblk                   <span class="comment">#查看硬盘和分区分布</span></span><br><span class="line">df -h                   <span class="comment">#查看各分区使用情况</span></span><br><span class="line">cat /proc/partitions    <span class="comment">#查看硬盘和分区</span></span><br><span class="line">mount | column -t       <span class="comment">#查看挂接的分区状态</span></span><br><span class="line">lspci | grep -i <span class="string">'eth'</span>   <span class="comment">#查看网卡硬件信息</span></span><br><span class="line">ifconfig <span class="operator">-a</span>             <span class="comment">#查看系统的所有网络接口</span></span><br><span class="line">ethtool eth0            <span class="comment">#如果要查看某个网络接口的详细信息，例如eth0的详细参数和指标</span></span><br></pre></td></tr></table></figure>
<h3 id="系统相关命令">系统相关命令</h3><hr>
<h4 id="内核相关命令">内核相关命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uname <span class="operator">-a</span>                <span class="comment">#查看版本当前操作系统内核信息）</span></span><br><span class="line">cat /proc/version       <span class="comment">#查看当前操作系统版本信息</span></span><br><span class="line">cat /etc/issue          <span class="comment">#查看版本当前操作系统发行版信息</span></span><br><span class="line">cat /etc/redhat-release <span class="comment">#同上</span></span><br><span class="line">cat /etc/SuSE-release   <span class="comment">#suse系统下才可使用</span></span><br><span class="line">lsb_release <span class="operator">-a</span>          <span class="comment">#用来查看linux兼容性的发行版信息</span></span><br><span class="line">lsmod                   <span class="comment">#列出加载的内核模块</span></span><br></pre></td></tr></table></figure>
<h4 id="网络常用命令">网络常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ifconfig                <span class="comment">#查看所有网络接口的属性</span></span><br><span class="line">iptables -L             <span class="comment">#查看防火墙设置</span></span><br><span class="line">service iptables status <span class="comment">#查看防火墙状态</span></span><br><span class="line">service iptables stop   <span class="comment">#关闭防火墙</span></span><br><span class="line">route -n                <span class="comment">#查看路由表</span></span><br><span class="line">netstat -lntp           <span class="comment">#查看所有监听端口</span></span><br><span class="line">netstat -antp           <span class="comment">#查看所有已经建立的连接</span></span><br><span class="line">netstat <span class="operator">-s</span>              <span class="comment">#查看网络统计信息进程</span></span><br><span class="line">netstat -at             <span class="comment">#列出所有tcp端口</span></span><br><span class="line">netstat -au             <span class="comment">#列出所有udp端口</span></span><br><span class="line">netstat <span class="operator">-lt</span>             <span class="comment">#只列出所有监听tcp端口</span></span><br></pre></td></tr></table></figure>
<h4 id="管理常用命令">管理常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">top                     <span class="comment">#查看系统所有进程的详细信息，比如CPU、内存等,信息很多！</span></span><br><span class="line">df -lh                  <span class="comment">#查看硬盘大小及使用率</span></span><br><span class="line">mount                   <span class="comment">#挂接远程目录、NFS、本地共享目录到linux下</span></span><br><span class="line">hostname                <span class="comment">#查看/修改计算机名</span></span><br><span class="line">w                       <span class="comment">#查看活动用户</span></span><br><span class="line">id                      <span class="comment">#查看指定用户信息</span></span><br><span class="line">last                    <span class="comment">#查看用户登录日志</span></span><br><span class="line">cut <span class="operator">-d</span>: <span class="operator">-f</span>1 /etc/passwd <span class="comment">#查看系统所有用户</span></span><br><span class="line">cut <span class="operator">-d</span>: <span class="operator">-f</span>1 /etc/group  <span class="comment">#查看系统所有组</span></span><br><span class="line">crontab <span class="operator">-l</span>              <span class="comment">#查看当前用户的计划任务服务</span></span><br><span class="line">chkconfig –list         <span class="comment">#列出所有系统服务</span></span><br><span class="line">chkconfig –list | grep on <span class="comment">#列出所有启动的系统服务程序</span></span><br><span class="line">rpm -qa                 <span class="comment">#查看所有安装的软件包</span></span><br><span class="line">uptime                  <span class="comment">#查看系统运行时间、用户数、负载    </span></span><br><span class="line">/sbin/chkconfig --list  <span class="comment">#查看系统自动启动列表</span></span><br><span class="line">/sbin/chkconfig　–add　mysql <span class="comment">#把MySQL添加到系统的启动服务组里面</span></span><br></pre></td></tr></table></figure>
<h4 id="文件操作常用命令">文件操作常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ranger               <span class="comment">#文件浏览系统，需要先安装ranger，超级方便，用了就知道</span></span><br><span class="line">ls -lht                 <span class="comment">#列出一个文件夹下所有文件及大小、访问权限</span></span><br><span class="line">du -sh &lt;dir&gt;            <span class="comment">#查看指定目录的大小 </span></span><br><span class="line">du -lh &lt;dir&gt;            <span class="comment">#查看指定目录及各文件的大小 </span></span><br><span class="line">ln <span class="operator">-s</span>                   <span class="comment">#建立软链接</span></span><br><span class="line">ls -lh                  <span class="comment">#以M为单位显示文件大小，去掉h，则单位为k</span></span><br><span class="line">du -skh  file        <span class="comment">#以M为单位显示文件大小</span></span><br></pre></td></tr></table></figure>
<h4 id="进程相关命令">进程相关命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">htop                      <span class="comment">#在终端以列表形式查看进程，需要安装htop，比ps好看好用太多了</span></span><br><span class="line">pstree -p pid           <span class="comment">#查看一个进程下的所有线程</span></span><br><span class="line">pstree  <span class="operator">-a</span>              <span class="comment">#显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。</span></span><br><span class="line">ps -ef                  <span class="comment">#查看所有进程</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> pid             <span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> all <span class="built_in">test</span>           <span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> `pgrep <span class="built_in">test</span>`    <span class="comment">#杀死进程</span></span><br><span class="line">./test.sh &amp;             <span class="comment">#使程序在后台运行</span></span><br><span class="line">nohup ./test.sh &amp;       <span class="comment">#使程序在后台运行</span></span><br></pre></td></tr></table></figure>
<h4 id="压缩解压缩">压缩解压缩</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zip -r dir.zip dir file  <span class="comment">#将目录dir、文件file等压缩到zip包,</span></span><br><span class="line">zip -re dir.zip dir file <span class="comment">#创建zip包，且加密</span></span><br><span class="line">unzip dir.zip            <span class="comment">#解压</span></span><br><span class="line">tar -zcvf dir.tar.gz dir file    <span class="comment">#将目录dir、文件file等压缩到tar包</span></span><br><span class="line">tar -xf dir.tar.gz       <span class="comment">#解压</span></span><br></pre></td></tr></table></figure>
<h4 id="screen命令">screen命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#screen命令，screen命令运行的服务不受shell终端影响，即使shell终端关闭仍存在</span></span><br><span class="line">screen -S <span class="built_in">test</span>          <span class="comment">#创建一个名字为test的screen</span></span><br><span class="line">screen -r <span class="built_in">test</span>          <span class="comment">#打开名字为test的screen</span></span><br><span class="line">screen -r pid           <span class="comment">#打开进程号为pid的screen</span></span><br><span class="line">screen -ls              <span class="comment">#列出所有的screen</span></span><br><span class="line">ctrl + a,d              <span class="comment">#当在一个screen时，退出screen</span></span><br><span class="line">ctrl + a,n              <span class="comment">#当在一个screen时，切换到下一个窗口</span></span><br><span class="line">ctrl + a,c              <span class="comment">#当在一个screen时，创建一个新的窗口</span></span><br></pre></td></tr></table></figure>
<h4 id="远程拷贝">远程拷贝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="built_in">local</span>_file remote_username@remote_ip:remote_dir    <span class="comment">#拷贝本地文件到远程机器上</span></span><br><span class="line">scp -r <span class="built_in">local</span>_dir remote_username@remote_ip:remote_dir  <span class="comment">#拷贝本地整个目录到远程机器上</span></span><br></pre></td></tr></table></figure>
<h3 id="软件包安装">软件包安装</h3><p>　　如下为Ubuntu下的是命令，如果账户没有root权限的话，需要在前面添加sudo以获取root权限。其实不知道命令的话，只需要输入软件名，终端将会打印出下载安装的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install package     <span class="comment">#安装</span></span><br><span class="line">apt-get update package      <span class="comment">#更新</span></span><br><span class="line">apt-get remove package      <span class="comment">#删除    </span></span><br><span class="line">apt-cache search package    <span class="comment">#搜索软件包</span></span><br><span class="line">dpkg -i package.deb         <span class="comment">#安装deb包</span></span><br></pre></td></tr></table></figure></p>
<h2 id="后记">后记</h2><p>　　为了让大家相信使用了这些命令或快捷键确实会逼格提升，专门贴图两张，哈哈。。。</p>
<h3 id="图一_执行htop（进程管理）">图一 执行htop（进程管理）</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/bloghtop.png" alt="htop"></p>
<h3 id="图二_执行ranger_（文件浏览）">图二 执行ranger （文件浏览）</h3><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogranger.png" alt="ranger"></p>
<p>　　有很多命令引用自<a href="http://www.xprogrammer.com/1799.html" target="_blank" rel="external">Linux常用的shell命令</a>，感谢此文作者.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　或许我是一个geek范的人，又或许是想显得很有逼格， whatever， 反正我就喜欢Linux的命令行，喜欢黑黑的geek风，这样完全体现出了技术的酷炫。现将一些自己觉得很有用能让自己显得很牛的装X快捷键和指令总结如下，其中有一部分相当有用，使用后逼格瞬间提升，不信看文章最后的后记。</p>
<h2 id="Shell终端常用快捷键">Shell终端常用快捷键</h2><p>　　当进行命令行操作时，使用快捷键将极大提高工作效率，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + U – 剪切光标前的内容</span><br><span class="line">Ctrl + K – 剪切光标至行末的内容</span><br><span class="line">Ctrl + Y – 粘贴</span><br><span class="line">Ctrl + E – 移动光标到行末</span><br><span class="line">Ctrl + A – 移动光标到行首</span><br><span class="line">ALT + F – 跳向下一个空格</span><br><span class="line">ALT + B – 跳回上一个空格</span><br><span class="line">ALT + Backspace – 删除前一个单词</span><br><span class="line">Ctrl + W – 剪切光标前一个单词</span><br><span class="line">Ctrl + Insert – 复制</span><br><span class="line">Shift + Insert – 粘贴</span><br><span class="line"><span class="comment"># 下面两个命令的用法，如： 在shell终端输入vi main.c进入vi界面后，想切换到命令行，可以通过Ctrl+Z</span></span><br><span class="line">Ctrl + Z – 暂停应用程序</span><br><span class="line"><span class="built_in">fg</span> – 重新将程序唤到前台</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="shell" scheme="http://huaqianlee.me/tags/shell/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux文件I/O操作及网络架构]]></title>
    <link href="http://huaqianlee.me/2014/11/17/Linux%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    <id>http://huaqianlee.me/2014/11/17/Linux文件IO操作及网络架构/</id>
    <published>2014-11-17T12:15:42.000Z</published>
    <updated>2015-07-17T14:52:16.079Z</updated>
    <content type="html"><![CDATA[<p>图片摘自网络，这些图片清晰的描述出了文件I/O和网络操作的脉络。<br><a id="more"></a></p>
<h2 id="网络交互模型">网络交互模型</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blog网络交互模型.jpg" alt="网络交互模型"></p>
<h2 id="read-recv-recvfrom">read-recv-recvfrom</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogread-recv-recvfrom.jpg" alt="read-recv-recvfrom"></p>
<h2 id="write-send-sendto">write-send-sendto</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogwrite-send-sendto.jpg" alt="write-send-sendto"></p>
<h2 id="socket-bind-listen-accept-close-connect">socket-bind-listen-accept-close-connect</h2><p><img src="http://7xjdax.com1.z0.glb.clouddn.com/blogsocket-bind-listen-accept-close-connect.jpg" alt="socket-bind-listen-accept-close-connect"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>图片摘自网络，这些图片清晰的描述出了文件I/O和网络操作的脉络。<br>]]>
    
    </summary>
    
      <category term="kernel" scheme="http://huaqianlee.me/tags/kernel/"/>
    
      <category term="文件IO" scheme="http://huaqianlee.me/tags/%E6%96%87%E4%BB%B6IO/"/>
    
      <category term="网络" scheme="http://huaqianlee.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Linux" scheme="http://huaqianlee.me/categories/Linux/"/>
    
  </entry>
  
</feed>